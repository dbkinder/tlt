Search.setIndex({"docnames": ["DATASETS", "GetStarted", "Legal", "Models", "_autosummary/tlt.datasets.dataset.BaseDataset", "_autosummary/tlt.datasets.hf_dataset.HFDataset", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "_autosummary/tlt.datasets.tf_dataset.TFDataset", "_autosummary/tlt.models.hf_model.HFModel", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "_autosummary/tlt.models.model.BaseModel", "_autosummary/tlt.models.pytorch_model.PyTorchModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "_autosummary/tlt.models.tf_model.TFModel", "api", "cli", "distributed", "docbuild", "examples/README", "examples/cli/README", "examples/cli/image_classification", "examples/cli/text_classification", "examples/examples", "index", "methods", "notebooks/Medical_Imaging_Classification", "notebooks/README", "notebooks/Remote_Sensing_Image_Scene_Classification", "notebooks/TLT_PyTorch_Anomly_Detection", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning", "notebooks/TLT_TF_Image_Classification_Transfer_Learning", "notebooks/TLT_TF_Text_Classification_Transfer_Learning", "notebooks/setup", "tlt/distributed/README"], "filenames": ["DATASETS.rst", "GetStarted.rst", "Legal.rst", "Models.rst", "_autosummary/tlt.datasets.dataset.BaseDataset.rst", "_autosummary/tlt.datasets.hf_dataset.HFDataset.rst", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.rst", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.rst", "_autosummary/tlt.datasets.tf_dataset.TFDataset.rst", "_autosummary/tlt.models.hf_model.HFModel.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train.rst", "_autosummary/tlt.models.model.BaseModel.rst", "_autosummary/tlt.models.pytorch_model.PyTorchModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train.rst", "_autosummary/tlt.models.tf_model.TFModel.rst", "api.rst", "cli.rst", "distributed.rst", "docbuild.rst", "examples/README.rst", "examples/cli/README.rst", "examples/cli/image_classification.rst", "examples/cli/text_classification.rst", "examples/examples.rst", "index.rst", "methods.rst", "notebooks/Medical_Imaging_Classification.nblink", "notebooks/README.rst", "notebooks/Remote_Sensing_Image_Scene_Classification.nblink", "notebooks/TLT_PyTorch_Anomly_Detection.nblink", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Text_Classification_Transfer_Learning.nblink", "notebooks/setup.rst", "tlt/distributed/README.rst"], "titles": ["Datasets", "Get Started", "Legal Information", "Intel\u00ae Transfer Learning Tool Supported Models", "tlt.datasets.dataset.BaseDataset", "tlt.datasets.hf_dataset.HFDataset", "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "tlt.datasets.pytorch_dataset.PyTorchDataset", "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "tlt.datasets.tf_dataset.TFDataset", "tlt.models.hf_model.HFModel", "tlt.models.image_classification.image_classification_model.ImageClassificationModel", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "tlt.models.model.BaseModel", "tlt.models.pytorch_model.PyTorchModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "tlt.models.text_classification.text_classification_model.TextClassificationModel", "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark", "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "tlt.models.tf_model.TFModel", "API Reference", "CLI Reference", "Distributed Training", "Building Documentation", "Examples", "Beyond Get Started CLI Example", "Image Classification Intel\u00ae Transfer Learning Tool CLI Example", "Text Classification Intel\u00ae Transfer Learning Tool CLI Example", "Examples", "Intel\u00ae Transfer Learning Tool", "Image Classification Methods", "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Intel\u00ae Transfer Learning Tool API Notebook Examples", "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool", "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API", "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Environment Setup and Running the Notebooks", "Distributed Training"], "terms": {"thi": [0, 1, 2, 12, 15, 27, 31, 45, 49, 55, 64, 72, 73, 74, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "i": [0, 1, 2, 7, 8, 12, 15, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "comprehens": [0, 85], "list": [0, 1, 12, 15, 27, 31, 40, 45, 49, 55, 64, 71, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90], "public": [0, 2, 73, 78, 80, 85, 86, 87, 88, 89, 91], "us": [0, 2, 4, 7, 8, 12, 15, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 79, 80, 83, 90, 91], "repositori": [0, 78, 87, 89], "name": [0, 1, 2, 3, 7, 8, 12, 15, 31, 35, 49, 55, 71, 72, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 91], "link": [0, 80, 82, 83, 84, 87], "sourc": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 35, 36, 40, 41, 45, 46, 49, 50, 51, 52, 55, 56, 60, 64, 65, 69, 70, 71, 74, 80], "framework": [0, 1, 3, 18, 19, 50, 51, 56, 70, 71, 76, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90], "case": [0, 1, 3, 71, 72, 76, 80, 83, 86, 87, 88, 89], "ag": 0, "new": [0, 73, 76, 77, 78, 80, 82, 84, 86, 87, 88, 89, 91], "hug": [0, 3, 5, 13, 18, 52, 55, 60, 71, 80, 87, 89], "face": [0, 3, 5, 13, 18, 52, 55, 60, 71, 80, 87, 89], "pytorch": [0, 1, 3, 7, 11, 28, 31, 32, 35, 49, 51, 52, 55, 71, 72, 76, 78, 80, 83], "text": [0, 12, 13, 14, 15, 16, 52, 55, 56, 60, 64, 65, 69, 72, 75, 76, 79, 80, 83, 86], "classif": [0, 1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 23, 27, 28, 31, 32, 35, 36, 40, 41, 45, 46, 49, 52, 55, 56, 60, 64, 65, 69, 72, 75, 76, 79, 80, 83], "tfd": 0, "tensorflow": [0, 1, 3, 8, 9, 15, 16, 60, 71, 72, 76, 77, 78, 80, 83, 86], "food101": [0, 86], "torchvis": [0, 3, 10, 31, 35, 46, 49, 71, 72, 80, 85], "imag": [0, 1, 6, 7, 8, 9, 10, 19, 23, 27, 28, 31, 32, 35, 36, 40, 41, 45, 46, 49, 72, 75, 76, 79, 80, 83, 89], "sm": [0, 78, 87, 89], "spam": [0, 78, 87, 89], "collect": [0, 78, 82, 87, 89], "tf": [0, 15, 17, 27, 36, 41, 45, 65, 70, 71, 82, 84, 88, 89], "flower": [0, 1, 76, 77, 86, 88], "cat": 0, "v": 0, "dog": 0, "country211": [0, 86], "dtd": [0, 86], "fgvcaircraft": [0, 86], "renderedsst2": [0, 86], "rock": 0, "paper": 0, "scissor": 0, "rotten_tomato": [0, 78, 87], "tweetev": 0, "cifar10": [0, 86], "imdb": [0, 78, 87], "review": 0, "glue": [0, 78, 89], "sst2": [0, 78, 87, 89], "cola": [0, 78, 89], "colorect": [0, 83], "histologi": [0, 83], "resisc45": [0, 84], "cdd": 0, "cesm": 0, "squad": 0, "mvtec": [0, 85], "anomali": [0, 83], "detect": [0, 83], "guid": [1, 74, 76, 80, 90], "walk": [1, 76, 80], "you": [1, 2, 12, 71, 73, 74, 76, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "through": [1, 76, 80], "coupl": [1, 80], "exampl": [1, 2, 12, 15, 20, 24, 27, 29, 31, 33, 37, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 71, 72, 74, 80, 82, 84, 85, 86, 87, 88, 89, 90], "show": [1, 71, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89], "approach": [1, 72, 80, 86], "recommend": [1, 27, 40, 45, 64, 69, 72, 82, 84, 86, 88, 89], "hardwar": [1, 80, 86, 87, 88], "precis": [1, 27, 40, 45, 64, 69, 76, 80, 82, 84, 85, 86, 87, 88, 89], "4th": 1, "gen": 1, "xeon": [1, 27, 40, 45, 64, 69, 82, 84, 88, 89], "scalabl": 1, "perform": [1, 2, 20, 21, 24, 25, 26, 27, 29, 30, 33, 34, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 53, 54, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 72, 80, 82, 84, 85, 86, 87, 88, 89, 90], "processor": [1, 27, 40, 45, 64, 69, 82, 84, 88, 89], "bf16": 1, "1st": 1, "2nd": 1, "3rd": 1, "fp32": [1, 25, 38, 43, 62, 67, 76, 80], "softwar": 1, "linux": 1, "valid": [1, 7, 8, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 82, 84, 85, 86, 87, 88, 89], "ubuntu": [1, 90], "20": [1, 85, 86, 88, 90], "04": [1, 90], "22": [1, 76], "lt": 1, "python": [1, 74, 75, 79, 80], "3": [1, 71, 76, 90], "8": [1, 3, 90], "9": [1, 90], "10": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 72, 76, 82, 84, 85, 86, 87, 89, 90], "pip": [1, 74, 90], "conda": [1, 90], "virtualenv": [1, 74, 90], "git": [1, 90], "onli": [1, 7, 8, 25, 38, 43, 62, 67, 71, 73, 78, 82, 84, 85, 90, 91], "advanc": 1, "depend": [1, 71, 74, 78, 83, 90], "packag": [1, 78], "sudo": [1, 74], "apt": [1, 74], "build": 1, "essenti": 1, "python3": [1, 74, 90], "dev": 1, "libgl1": 1, "libglib2": 1, "0": [1, 2, 7, 10, 12, 13, 72, 74, 76, 78, 82, 84, 85, 86, 87, 88, 89], "creat": [1, 2, 71, 72, 73, 76, 77, 78, 80, 82, 84, 86, 87, 88, 89, 91], "activ": [1, 31, 35, 49, 71, 74, 90], "virtual": 1, "environ": [1, 78, 82, 84, 85, 86, 87, 88, 89], "we": [1, 76, 82, 84, 85, 86, 87, 88, 89], "encourag": 1, "consist": 1, "manag": 1, "There": [1, 85], "ar": [1, 2, 7, 8, 12, 25, 27, 31, 35, 38, 40, 43, 45, 49, 62, 64, 67, 69, 71, 72, 73, 75, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "two": [1, 12, 15, 27, 31, 45, 49, 55, 64, 71, 73, 78, 82, 84, 85, 86, 87, 88, 89, 91], "wai": [1, 71, 85], "do": [1, 73, 85, 86, 88, 91], "p": [1, 73, 76, 77, 78, 85, 90, 91], "tlt_dev_venv": [1, 74], "bin": [1, 74], "b": [1, 85], "Or": [1, 71], "basic": 1, "instruct": [1, 73, 78, 80, 83, 85, 86, 87, 88, 89, 90, 91], "unless": [1, 85], "plan": 1, "make": [1, 27, 40, 45, 64, 69, 73, 74, 76, 78, 80, 82, 84, 88, 89, 91], "chang": [1, 73, 85, 86, 88, 91], "clone": [1, 90], "repo": [1, 90], "http": [1, 2, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89], "github": [1, 80, 86, 88], "com": [1, 76, 77, 84, 85, 86, 88], "intelai": 1, "cd": [1, 73, 90, 91], "Then": [1, 86, 88], "either": [1, 71, 74, 78, 80, 87, 89], "an": [1, 2, 6, 9, 10, 12, 27, 40, 45, 71, 72, 73, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "edit": [1, 73, 74, 91], "avoid": [1, 2], "rebuild": 1, "after": [1, 72, 76, 77, 78, 80, 85, 86, 88, 89], "each": [1, 7, 8, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 76, 77, 78, 82, 84, 86, 87, 88, 89], "prefer": 1, "wheel": 1, "setup": [1, 74, 83], "py": 1, "bdist_wheel": 1, "dist": 1, "intel_transfer_learning_tool": 1, "4": [1, 3, 71, 76, 78], "py3": 1, "none": [1, 4, 7, 8, 9, 12, 15, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 76, 82, 84, 85, 87, 88, 89], "ani": [1, 2, 73, 85, 86, 87, 88, 89, 91], "whl": 1, "addit": [1, 27, 31, 45, 49, 55, 64, 71, 80, 82, 84, 86, 87, 88, 89], "featur": [1, 27, 45, 80, 82, 84, 86, 87], "specif": [1, 2], "For": [1, 2, 7, 8, 12, 15, 72, 74, 76, 85, 86, 87, 88, 89], "distribut": [1, 13, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72], "multinod": [1, 73, 80, 91], "train": [1, 4, 7, 8, 9, 10, 13, 16, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 71, 77, 78, 80, 82, 84, 87, 89], "follow": [1, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90], "verifi": [1, 73, 91], "your": [1, 2, 73, 76, 80, 82, 84, 85, 90, 91], "wa": [1, 82, 84, 85, 86, 87, 88, 89], "success": 1, "command": [1, 72, 73, 74, 75, 76, 78, 79, 80, 91], "which": [1, 12, 15, 71, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89], "displai": [1, 86, 87, 88, 89], "help": [1, 27, 31, 45, 49, 55, 64, 76, 82, 84, 85, 86, 87, 88, 89], "inform": [1, 71, 72, 76, 80, 82, 84, 86, 87, 88, 89], "about": [1, 71, 72, 82, 84, 86, 87, 88, 89], "tlt": [1, 71, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89], "prepar": 1, "dataset": [1, 20, 21, 22, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 59, 61, 63, 64, 66, 68, 69, 72, 76, 80, 90], "The": [1, 7, 8, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 73, 74, 76, 77, 78, 80, 82, 84, 86, 87, 88, 89, 90, 91], "can": [1, 7, 8, 12, 15, 20, 24, 27, 29, 31, 33, 37, 40, 42, 45, 47, 49, 50, 52, 53, 55, 57, 60, 61, 64, 65, 66, 69, 71, 74, 76, 77, 80, 82, 84, 85, 86, 87, 88, 89, 90], "from": [1, 9, 10, 12, 13, 15, 16, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 57, 60, 61, 64, 66, 69, 71, 72, 74, 76, 80, 82, 84, 87, 89, 90], "exist": [1, 7, 8, 21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68, 71, 73, 80, 86, 87, 88, 89, 91], "catalog": [1, 9, 10, 13, 16, 71, 72, 82, 84], "custom": [1, 7, 8, 12, 15, 21, 26, 30, 34, 36, 39, 44, 48, 54, 58, 63, 68, 71, 72, 80, 82, 84, 85], "have": [1, 73, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "machin": [1, 74, 78, 87, 89], "": [1, 2, 3, 12, 15, 20, 21, 24, 26, 29, 30, 33, 34, 37, 39, 42, 44, 47, 48, 53, 54, 57, 58, 61, 63, 66, 68, 71, 78, 82, 84, 85, 87, 88, 89], "option": [1, 7, 8, 12, 15, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 90], "dir": [1, 72, 73, 76, 77, 78, 91], "directori": [1, 7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "download": [1, 10, 55, 71, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90], "dataset_dir": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 71, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90], "tmp": [1, 71, 72, 76, 77, 78], "mkdir": [1, 76, 77, 78, 90], "extract": [1, 76, 77, 78, 86, 87, 88, 89], "sure": [1, 73, 76, 91], "https_proxi": 1, "set": [1, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 71, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 91], "need": [1, 71, 74, 76, 86, 87, 89], "wget": [1, 76, 77, 78], "storag": [1, 76, 77, 86, 88], "googleapi": [1, 76, 77, 86, 88], "org": [1, 76, 77, 78, 82, 84, 86, 87, 88, 89], "example_imag": [1, 76, 77, 86, 88], "flower_photo": [1, 71, 76, 77, 86, 88], "tgz": [1, 76, 77, 86, 88], "tar": [1, 76, 77, 85], "xzf": [1, 76, 77], "c": [1, 76, 77, 82, 86, 89], "folder": [1, 7, 8, 12, 15, 72, 76, 77, 82, 84, 86, 88, 90], "At": [1, 12, 15], "point": [1, 27, 40, 45, 64, 69, 76, 82, 84, 86, 87, 88, 89], "should": [1, 7, 8, 12, 15, 27, 31, 45, 49, 55, 64, 71, 72, 73, 74, 76, 77, 82, 84, 85, 86, 87, 88, 89, 91], "subfold": [1, 7, 8, 71, 77, 86, 88], "daisi": [1, 71, 77, 86, 88], "dandelion": [1, 71, 77, 86, 88], "rose": [1, 71, 77, 86, 88], "sunflow": [1, 71, 77, 86, 88], "tulip": [1, 71, 77, 86, 88], "With": [1, 82, 84, 86, 87, 88, 89], "ai": [1, 2, 80], "model": [1, 7, 8, 12, 15, 77, 78, 80, 90], "bash": [1, 75, 79, 80], "prompt": [1, 73, 80, 91], "call": [1, 27, 31, 35, 40, 45, 49, 64, 69, 73, 75, 76, 79, 80, 82, 84, 85, 86, 87, 88, 89, 91], "script": [1, 2, 80], "both": [1, 27, 40, 45, 64, 69, 82, 84, 85, 88, 89], "provid": [1, 2, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 74, 78, 80, 82, 84, 86, 87, 88, 89], "same": [1, 76, 82, 84, 85, 86, 88], "opportun": 1, "evalu": [1, 4, 21, 26, 27, 30, 31, 34, 35, 39, 40, 44, 45, 48, 49, 54, 55, 58, 63, 64, 68, 69, 72, 76, 77, 78, 80, 86, 87, 88, 89], "optim": [1, 23, 25, 31, 32, 35, 36, 38, 43, 49, 52, 55, 62, 65, 67, 71, 80, 85, 86, 87, 88, 89], "benchmark": [1, 2, 78, 80, 84, 86, 87, 88, 89], "program": [1, 80], "experi": 1, "ll": 1, "knowledg": [1, 80, 82, 84], "choos": [1, 86], "work": [1, 71, 76, 86, 88], "best": [1, 76, 85], "let": [1, 80, 86, 87, 88, 89], "continu": [1, 76, 82, 84, 86, 87, 88, 89], "previou": [1, 82, 84, 86, 87, 88, 89], "where": [1, 7, 8, 12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 72, 76, 78, 87, 89], "classifi": [1, 12, 15, 71, 78, 87, 89], "identifi": 1, "differ": [1, 40, 82, 84, 85, 87, 88], "type": [1, 27, 40, 45, 64, 69, 71, 73, 76, 82, 84, 85, 88, 89, 91], "see": [1, 71, 73, 76, 80, 82, 84, 86, 87, 88, 89, 90, 91], "all": [1, 2, 12, 15, 71, 73, 74, 85, 86, 87, 88, 89, 91], "avail": [1, 71, 72, 82, 84, 85, 86, 87, 88, 89, 90], "image_classif": [1, 71, 76, 82, 84, 86, 88], "In": [1, 76, 78, 82, 84, 85, 86, 87, 88, 89], "resnet50v1": [1, 76], "5": [1, 55, 71, 76, 77], "alreadi": [1, 21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68, 72, 76, 77, 80, 85, 86, 87, 88, 89], "write": [1, 25, 38, 43, 55, 62, 64, 67, 69, 72, 73, 91], "specifi": [1, 8, 12, 15, 21, 22, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 59, 62, 63, 64, 67, 68, 69, 72, 76, 78, 82, 84, 85, 86, 87, 88, 89], "output": [1, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 72, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90], "f": [1, 72, 73, 76, 77, 78, 82, 86, 88, 91], "resnet_v1_50": [1, 3, 76, 77, 82, 84, 88], "epoch": [1, 22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89], "1": [1, 22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 74, 76, 77, 78], "found": [1, 12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 76, 86, 89], "3670": [1, 71, 76], "file": [1, 12, 15, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 78, 82, 84, 85, 86, 87, 88, 89, 91], "belong": [1, 71, 76, 77], "class": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 31, 32, 35, 36, 40, 41, 45, 46, 49, 50, 51, 52, 56, 60, 65, 69, 70, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89], "sequenti": [1, 71, 76], "_________________________________________________________________": [1, 76], "layer": [1, 27, 31, 35, 45, 49, 55, 64, 71, 76, 80, 82, 84, 85, 86, 87, 88, 89], "shape": [1, 71, 76], "param": [1, 76], "keras_lay": [1, 76], "keraslay": [1, 76], "2048": [1, 76], "23561152": [1, 76], "dens": [1, 27, 31, 35, 45, 49, 55, 64, 71, 76, 82, 84, 86, 87, 88, 89], "10245": [1, 76], "total": [1, 76], "23": [1, 76], "571": [1, 76], "397": [1, 76], "trainabl": [1, 76, 80], "245": [1, 76], "non": [1, 55, 64, 69, 76, 85], "561": [1, 76], "152": [1, 76], "checkpoint": [1, 25, 27, 31, 35, 38, 40, 43, 45, 49, 55, 62, 64, 67, 69, 72, 76, 80, 85, 86, 87, 88, 89], "resnet_v1_50_checkpoint": [1, 76], "86": [1, 76], "24": [1, 76], "248m": [1, 76], "loss": [1, 23, 27, 31, 32, 35, 36, 40, 45, 49, 52, 55, 64, 65, 69, 71, 72, 76, 82, 84, 86, 87, 88, 89], "4600": [1, 76], "acc": [1, 76], "8438": [1, 76], "save": [1, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 72, 76, 80, 82, 84, 85, 86, 88, 90], "complet": [1, 2, 72, 76, 86, 87], "accuraci": [1, 2, 27, 31, 45, 49, 55, 64, 72, 76, 82, 84, 85, 86, 87, 88, 89], "valu": [1, 12, 15, 72, 74, 76, 78, 87, 89], "print": [1, 71, 76, 82, 84, 85, 86, 87, 88, 89], "toward": [1, 76], "end": [1, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 73, 76, 82, 84, 85, 86, 87, 88, 89, 91], "consol": [1, 76], "export": [1, 72, 77, 78, 80, 90], "number": [1, 7, 12, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 72, 76, 82, 84, 86, 87, 88, 89], "That": 1, "As": 1, "also": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 76, 82, 84, 85, 86, 87, 88, 89], "beyond": [1, 75, 79], "includ": [1, 25, 38, 43, 62, 67, 71, 76, 87], "quantiz": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 80], "read": [1, 73, 91], "refer": [1, 82, 84, 85, 86, 87, 88, 89], "find": 1, "more": [1, 12, 15, 69, 76, 78, 82, 84, 86, 87, 88, 89], "our": [1, 78, 82, 84, 85, 86, 87, 88, 89], "int8": [1, 76, 80], "improv": [1, 80], "infer": [1, 12, 25, 38, 43, 62, 67, 76, 80, 86, 87, 88, 89], "jupyt": [1, 75, 79, 80, 83, 90], "notebook": [1, 75, 79, 80, 82, 84, 85, 86, 87, 88, 89], "detail": [1, 76, 84], "import": [1, 71, 73, 91], "dataset_factori": [1, 71, 82, 84, 85, 86, 87, 88, 89], "model_factori": [1, 71, 82, 84, 85, 86, 87, 88, 89], "util": [1, 82, 84, 85, 86, 87, 88, 89], "frameworktyp": [1, 18, 19, 50, 51, 56, 70, 71, 82, 84], "usecasetyp": [1, 18, 19, 50, 51, 56, 70, 71, 82, 84], "o": [1, 82, 84, 85, 86, 87, 88, 89], "ha": [1, 12, 15, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 72, 76, 77, 78, 80, 87, 89], "been": [1, 55, 64, 69, 72, 76, 80, 89], "els": [1, 73, 82, 84, 85, 86, 87, 88, 89, 91], "path": [1, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 71, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90], "join": [1, 82, 84, 85, 86, 87, 88, 89], "home": [1, 73, 82, 84, 85, 86, 87, 88, 89, 91], "output_dir": [1, 21, 22, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 59, 62, 63, 64, 67, 68, 69, 72, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90], "get_model": [1, 71, 82, 84, 85, 86, 87, 88, 89], "model_nam": [1, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70, 71, 72, 78, 82, 84, 85, 86, 87, 88, 89], "load": [1, 7, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 78, 86, 87, 88, 89], "preprocess": [1, 55, 82, 84, 85, 86, 87, 88, 89], "load_dataset": [1, 71, 84, 85, 86, 87, 88, 89], "use_cas": [1, 18, 19, 50, 51, 56, 70, 71, 82, 84, 85, 86, 87, 88, 89], "image_s": [1, 19, 71, 82, 84, 85, 86, 88], "batch_siz": [1, 72, 82, 84, 85, 86, 87, 88, 89], "32": [1, 27, 40, 45, 64, 69, 72, 82, 84, 85, 86, 87, 88, 89], "shuffle_split": [1, 82, 84, 85, 86, 87, 88, 89], "train_pct": [1, 82, 84, 85, 86, 87, 88, 89], "75": [1, 85, 86, 87, 88, 89], "val_pct": [1, 82, 84, 85, 86, 87, 88, 89], "25": [1, 76, 85, 86, 87, 88, 89], "metric": [1, 82, 84, 85, 86, 87, 88, 89], "metric_nam": [1, 89], "metric_valu": [1, 89], "zip": [1, 78, 87, 89], "_model": [1, 89], "metrics_nam": [1, 89], "format": [1, 77, 78, 82, 84, 85, 86, 87, 88, 89], "saved_model_dir": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 82, 84, 86, 87, 88, 89], "quantization_output": 1, "quantized_model": [1, 86, 87, 88, 89], "neural": [1, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 72, 76, 80, 85, 86, 87, 88, 89], "compressor": [1, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 72, 76, 80, 86, 87, 88, 89], "config": [1, 21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 71, 72, 86, 87, 88, 89], "graph": [1, 25, 38, 43, 62, 67, 72], "optimization_output": 1, "optimized_model": 1, "optimize_graph": 1, "document": [1, 2, 71, 78, 80, 82, 84, 85, 86, 87, 88, 89], "develop": [1, 74, 90], "deploy": [1, 80], "sampl": [1, 88], "ve": 1, "present": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 73, 91], "how": [1, 73, 77, 78, 82, 84, 85, 86, 87, 88, 89, 91], "execut": [1, 82, 84], "workflow": [1, 76, 80, 82, 84, 85], "trainng": 1, "well": [1, 73, 80, 87, 89, 91], "some": [1, 75, 79, 85], "intel": [2, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 75, 76, 79, 90, 91], "transfer": [2, 50, 73, 74, 75, 76, 79, 90, 91], "learn": [2, 27, 31, 35, 40, 45, 49, 50, 55, 64, 69, 72, 73, 74, 75, 76, 79, 90, 91], "tool": [2, 73, 74, 75, 76, 79, 90, 91], "intend": 2, "platform": [2, 27, 40, 45, 64, 69, 78, 80, 82, 84, 88, 89], "visit": 2, "www": [2, 78, 84, 86, 87, 89], "blog": 2, "commit": 2, "respect": 2, "human": [2, 78, 87, 89], "right": [2, 78, 87, 89], "complic": 2, "abus": 2, "polici": [2, 76, 86, 87, 88], "reflect": 2, "global": 2, "principl": 2, "accordingli": [2, 7, 8], "access": 2, "materi": 2, "agre": 2, "product": 2, "applic": [2, 23, 80, 87, 88, 89], "caus": 2, "contribut": 2, "violat": 2, "internation": 2, "recogn": 2, "code": [2, 74, 75, 79, 80], "under": [2, 73, 85, 91], "apach": 2, "version": [2, 25, 38, 43, 62, 67], "2": [2, 3, 69, 77, 78], "To": [2, 73, 74, 82, 84, 85, 86, 88, 91], "extent": 2, "referenc": 2, "site": 2, "those": [2, 27, 40, 45, 64, 69, 71], "third": [2, 27, 40, 45, 64, 69, 71, 82, 84, 85, 88, 89], "parti": [2, 71], "indic": [2, 12, 15], "data": [2, 7, 8, 12, 15, 21, 26, 27, 30, 34, 39, 40, 44, 45, 48, 54, 58, 63, 64, 68, 69, 71, 72, 77, 78, 82, 84, 85, 86, 87, 88, 89], "doe": [2, 7, 8, 12, 27, 40, 45, 64, 69, 82, 84, 85, 87, 88, 89], "warrant": 2, "qualiti": [2, 85], "By": [2, 82, 84], "term": [2, 87, 89], "associ": [2, 78, 87, 89], "compli": 2, "expressli": 2, "adequaci": 2, "liabl": 2, "error": [2, 73, 86, 87, 88, 89, 91], "omiss": 2, "defect": [2, 85], "relianc": 2, "liabil": 2, "damag": 2, "relat": [2, 80], "other": [2, 27, 40, 45, 64, 69, 74, 76, 82, 84, 85, 87, 88, 89], "brand": 2, "mai": [2, 73, 77, 78, 86, 87, 88, 89, 91], "claim": 2, "properti": [2, 87, 89], "trademark": [2, 80], "hub": [3, 27, 28, 41, 45, 71, 80, 82, 84, 85, 86, 89], "alexnet": [3, 76], "convnext_bas": [3, 76], "convnext_larg": [3, 76], "convnext_smal": [3, 76], "convnext_tini": [3, 76], "densenet121": [3, 76], "densenet161": [3, 76], "densenet169": [3, 76], "densenet201": [3, 76], "efficientnetv2": 3, "b0": 3, "b1": 3, "b2": 3, "b3": 3, "efficientnet_b0": [3, 71, 72, 76, 86], "efficientnet_b1": [3, 76], "efficientnet_b2": [3, 76], "efficientnet_b3": [3, 76], "efficientnet_b4": [3, 76], "efficientnet_b5": 3, "efficientnet_b6": 3, "efficientnet_b7": 3, "googlenet": 3, "inception_v3": 3, "mnasnet0_5": 3, "mnasnet1_0": 3, "mobilenet_v2": 3, "mobilenet_v2_100_224": 3, "mobilenet_v3_larg": 3, "mobilenet_v3_smal": 3, "nasnet_larg": 3, "proxyless_cpu": 3, "regnet_x_16gf": 3, "regnet_x_1_6gf": 3, "regnet_x_32gf": 3, "regnet_x_3_2gf": 3, "regnet_x_400mf": 3, "regnet_x_800mf": 3, "regnet_x_8gf": 3, "regnet_y_16gf": 3, "regnet_y_1_6gf": 3, "regnet_y_32gf": 3, "regnet_y_3_2gf": 3, "regnet_y_400mf": 3, "regnet_y_800mf": 3, "regnet_y_8gf": 3, "resnet101": 3, "resnet152": 3, "resnet18": [3, 85], "resnet18_ssl": 3, "resnet18_swsl": 3, "resnet34": 3, "resnet50": [3, 85], "resnet50_ssl": 3, "resnet50_swsl": 3, "resnet_v2_101": 3, "resnet_v2_50": 3, "resnext101_32x16d_ssl": 3, "resnext101_32x16d_swsl": 3, "resnext101_32x16d_wsl": 3, "resnext101_32x32d_wsl": 3, "resnext101_32x48d_wsl": 3, "resnext101_32x4d_ssl": 3, "resnext101_32x4d_swsl": 3, "resnext101_32x8d": 3, "resnext101_32x8d_ssl": 3, "resnext101_32x8d_swsl": 3, "resnext101_32x8d_wsl": 3, "resnext50_32x4d": 3, "resnext50_32x4d_ssl": 3, "resnext50_32x4d_swsl": 3, "shufflenet_v2_x0_5": 3, "shufflenet_v2_x1_0": 3, "vgg11": 3, "vgg11_bn": 3, "vgg13": 3, "vgg13_bn": 3, "vgg16": 3, "vgg16_bn": 3, "vgg19": 3, "vgg19_bn": 3, "vit_b_16": 3, "vit_b_32": 3, "vit_l_16": 3, "vit_l_32": 3, "wide_resnet101_2": 3, "wide_resnet50_2": 3, "convnextbas": 3, "kera": [3, 23, 27, 40, 45, 71, 80, 88], "convnextlarg": 3, "convnextsmal": 3, "convnexttini": 3, "convnextxlarg": 3, "efficientnetv2b0": 3, "efficientnetv2b1": 3, "efficientnetv2b2": 3, "efficientnetv2b3": 3, "efficientnetv2l": 3, "efficientnetv2m": 3, "inceptionresnetv2": 3, "inceptionv3": 3, "mobilenet": 3, "mobilenetv2": 3, "nasnetlarg": 3, "nasnetmobil": 3, "resnet101v2": 3, "resnet152v2": 3, "resnet50v2": 3, "xception": 3, "bert": [3, 78, 87], "base": [3, 4, 5, 6, 11, 14, 17, 18, 19, 27, 31, 35, 45, 49, 50, 51, 55, 64, 70, 73, 82, 84, 85, 86, 87, 88, 89, 91], "uncas": [3, 78], "larg": [3, 78, 80, 85, 86, 88], "clinic": 3, "distilbert": 3, "googl": [3, 78, 89], "bert_uncased_l": [3, 78, 89], "10_h": [3, 78], "128_a": [3, 89], "256_a": [3, 78], "512_a": 3, "768_a": 3, "12": [3, 76], "12_h": 3, "2_h": [3, 89], "4_h": 3, "6_h": 3, "8_h": 3, "dataset_nam": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 71, 72, 77, 78, 82, 86, 87, 88, 89], "dataset_catalog": [4, 5, 6, 11, 14, 17, 71, 72, 82, 86, 87, 88, 89], "abstract": [4, 20, 21, 22, 50, 57, 58, 59], "__init__": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70], "constructor": [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70, 78, 89], "attribut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70, 71], "repres": [5, 11, 17, 18, 19, 23, 27, 28, 31, 32, 36, 41, 45, 46, 49, 51, 52, 55, 56, 60, 64, 65, 70, 82, 84, 86, 87, 88, 89], "num_work": [7, 10, 12, 13], "shuffle_fil": [7, 8, 9, 10, 12, 13, 15, 16, 27, 40, 45, 64, 69, 87, 89], "true": [7, 8, 9, 10, 12, 13, 15, 16, 22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 71, 72, 82, 84, 85, 86, 87, 88, 89], "A": [7, 8, 12, 13, 15, 16, 55, 64, 69, 71, 72, 76, 78, 85], "note": [7, 8, 12, 15, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 91], "expect": [7, 8, 12, 15, 71, 77, 78, 87, 89], "organ": [7, 8, 71, 77, 86, 88], "contain": [7, 8, 12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 55, 57, 61, 66, 71, 72, 77, 82, 84, 86, 88], "jpg": [7, 8, 71, 77, 85, 86, 88], "label": [7, 8, 12, 15, 71, 77, 78, 85, 86, 87, 88, 89], "class_a": [7, 8, 12, 15, 71], "class_b": [7, 8, 12, 15, 71], "class_c": [7, 8, 71], "user": [7, 8, 71, 82, 84, 85], "defin": [7, 8, 31, 35, 49, 55, 64, 69, 85, 86, 87, 88, 90], "split": [7, 8, 9, 10, 13, 16, 71, 80, 82, 84, 85, 86, 87, 88, 89], "test": [7, 8, 20, 21, 24, 26, 29, 30, 33, 34, 37, 39, 42, 44, 47, 48, 53, 54, 57, 58, 61, 63, 66, 68, 71, 73, 74, 82, 84, 86, 87, 88, 89, 91], "subset": [7, 8, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 82, 84, 85, 86, 87, 88, 89], "arrang": [7, 8, 85, 86], "accept": [7, 8, 85], "paramet": [7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71], "str": [7, 8, 12, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 82, 84, 85, 86, 87, 88, 89], "locat": [7, 8, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 72, 73, 74, 76, 78, 84, 85, 91], "It": [7, 8, 27, 40, 45, 64, 69, 76, 78, 82, 84, 85, 88, 89], "subdirectori": [7, 8, 86, 88], "If": [7, 8, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 73, 74, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "given": [7, 8, 12, 15, 55, 71, 72, 73, 85, 86, 91], "int": [7, 8, 12, 15, 19, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 82, 84, 85, 86, 87, 88, 89], "process": [7, 31, 35, 49, 55, 72, 78, 80, 86], "default": [7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "bool": [7, 8, 12, 15, 19, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 71, 72, 82, 84, 85, 86, 87, 88, 89], "whether": [7, 8, 12, 15, 21, 25, 26, 27, 30, 34, 38, 39, 40, 43, 44, 45, 48, 54, 58, 62, 63, 64, 67, 68, 69, 85], "shuffl": [7, 8, 12, 15, 27, 40, 45, 64, 69, 85], "rais": [7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 33, 34, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71], "filenotfounderror": [7, 8, 12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "color_mod": 8, "rgb": [8, 86], "seed": [8, 9, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 85], "kwarg": [8, 9, 10, 15, 16, 23, 27, 28, 32, 36, 40, 41, 45, 46, 52, 55, 60, 64, 65, 69, 71], "color": [8, 85, 86, 88], "mode": [8, 76], "greyscal": 8, "rgba": 8, "random": [8, 15, 85], "as_supervis": 9, "csv_file_nam": [12, 15, 87, 89], "class_nam": [12, 15, 71, 72, 82, 84, 85, 86, 87, 88, 89], "column_nam": [12, 87], "label_map_func": [12, 15, 89], "callabl": [12, 15], "label_col": 12, "delimit": [12, 15, 72, 78, 87, 89], "header": [12, 15, 87, 89], "fals": [12, 13, 15, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 71, 82, 84, 85, 86, 87, 88, 89], "select_col": [12, 15, 87, 89], "exclude_col": [12, 15, 87, 89], "transform": [12, 15], "csv": [12, 15, 71, 72, 78, 87, 89], "column": [12, 15, 71, 78, 87, 89], "first": [12, 15, 27, 31, 35, 45, 49, 55, 64, 73, 78, 82, 84, 85, 86, 87, 88, 89, 91], "second": [12, 15, 27, 31, 45, 49, 55, 64, 72, 73, 76, 78, 82, 84, 85, 86, 87, 88, 89, 91], "sentenc": [12, 15, 71, 78, 87, 89], "comma": [12, 15, 72, 78, 87, 89], "separ": [12, 15, 72, 78, 87, 89], "look": [12, 15, 87, 89], "similar": [12, 15, 87, 89], "snippet": [12, 15], "below": [12, 15, 73, 77, 78, 82, 84, 85, 86, 87, 90, 91], "filter": [12, 15, 71, 72, 78, 85, 87, 89], "out": [12, 15, 25, 38, 43, 62, 67, 80, 86, 87, 88, 89], "pars": [12, 15, 87, 89], "order": [12, 15], "must": [12, 85], "exactli": 12, "one": [12, 15, 76, 78, 82, 84, 85, 86, 87, 88, 89], "posit": 12, "correspond": 12, "argument": [12, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 74, 78, 82, 84], "assign": 12, "text_1": 12, "text_2": 12, "rest": [12, 86, 88], "function": [12, 15, 71, 78, 82, 84, 85, 86, 87, 88, 89], "map": [12, 15, 78, 86, 87, 88, 89], "across": [12, 15, 80], "appli": [12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 76, 82, 84, 85, 86, 87, 88, 89], "element": [12, 15], "string": [12, 15, 27, 40, 45, 64, 69, 72, 78, 86, 87, 89], "instead": [12, 15, 72, 86, 88], "numer": [12, 15, 78, 86, 87, 88, 89], "index": [12, 87, 89], "integ": [12, 27, 31, 40, 45, 49, 55, 64, 69, 82, 84, 86, 87, 88, 89], "everi": 12, "uniqu": 12, "start": [12, 74, 75, 79, 85, 90], "charact": [12, 15, 78, 89], "row": [12, 15, 87, 89], "boolean": [12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72], "line": [12, 15, 80, 86, 88], "skip": [12, 15, 86, 87, 88, 89, 90], "sort": [12, 15, 71], "most": [12, 15], "exclud": [12, 15], "worker": 12, "pass": [12, 74, 76, 78, 85, 86, 87, 88, 89], "dataload": 12, "typeerror": [12, 15, 27, 40, 45, 55, 64, 69], "valueerror": [12, 15, 21, 26, 30, 34, 39, 44, 48, 54, 55, 58, 63, 68], "empti": [12, 15, 90], "mismatch": 12, "than": [12, 69], "field": 15, "do_fine_tun": 19, "dropout_layer_r": [19, 56], "pretrain": [19, 23, 28, 36, 41, 46, 50, 52, 56, 60, 65, 70, 71, 80, 85, 86, 87, 88, 89], "warmup": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "iter": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "100": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 80], "cores_per_inst": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "num_of_inst": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "inter_num_of_thread": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "intra_num_of_thread": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "otherwis": [20, 24, 29, 33, 37, 42, 47, 53, 55, 57, 61, 64, 66, 69], "full": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 76, 86, 87, 88, 89], "explicitli": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "imageclassificationdataset": [20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 57, 58, 61, 63, 66, 68, 82, 84, 86, 87, 88, 89], "befor": [20, 24, 27, 29, 33, 37, 40, 42, 45, 47, 53, 57, 61, 64, 66, 69, 78, 80, 83], "run": [20, 24, 27, 29, 33, 37, 40, 42, 45, 47, 53, 57, 61, 64, 66, 69, 72, 73, 74, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91], "cpu": [20, 24, 29, 33, 37, 42, 47, 53, 55, 57, 61, 66, 80], "core": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "per": [20, 24, 29, 31, 33, 35, 37, 42, 47, 49, 53, 55, 57, 61, 66, 72, 78], "instanc": [20, 24, 27, 29, 33, 37, 40, 42, 45, 47, 53, 57, 61, 66], "thread": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "inter": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "oper": [20, 24, 25, 29, 33, 37, 38, 42, 43, 47, 53, 57, 61, 62, 66, 67], "intra": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "return": [20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 82, 84, 85, 86, 87, 88, 89], "result": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 73, 76, 86, 87, 88, 89, 91], "notadirectoryerror": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "overwrite_model": [21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68], "post": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 72, 76, 87, 89], "calibr": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68], "its": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 74, 80], "written": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 76], "writabl": [21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68], "posttrainingquantconfig": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68], "overwrit": [21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68], "fileexistserror": [21, 25, 26, 27, 30, 34, 38, 39, 40, 43, 44, 45, 48, 54, 58, 62, 63, 64, 67, 68, 69], "compat": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 71], "basedataset": [22, 59], "initial_checkpoint": [22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 82, 84, 85, 86, 87, 88, 89], "do_ev": [22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 82, 84, 86, 87, 88, 89], "saved_model": [24, 25, 26, 37, 38, 39, 42, 43, 44, 61, 62, 63, 66, 67, 68, 71, 72, 76, 82, 84, 86, 87, 88, 89], "pb": [24, 25, 26, 37, 38, 39, 42, 43, 44, 61, 62, 63, 66, 67, 68, 71, 72, 76, 82, 84, 86, 87, 88, 89], "inc_config_path": [24, 29, 33, 37, 42, 47, 53, 61, 66], "convert": [25, 38, 43, 62, 67], "variabl": [25, 38, 43, 62, 67, 86, 87, 88, 89, 90], "constant": [25, 38, 43, 62, 67], "remov": [25, 38, 43, 62, 67, 73, 91], "like": [25, 38, 43, 62, 67, 73, 85, 87, 89, 91], "strip": [25, 38, 43, 62, 67, 86, 88], "part": [25, 38, 43, 62, 67, 76, 86, 88], "never": [25, 38, 43, 62, 67], "reach": [25, 27, 31, 35, 38, 40, 43, 45, 49, 55, 62, 64, 67, 69, 72, 76, 82, 84, 86, 87, 88, 89], "debug": [25, 38, 43, 62, 67], "checknumer": [25, 38, 43, 62, 67], "fold": [25, 38, 43, 62, 67], "batch": [25, 38, 43, 62, 67, 72, 76, 80, 82, 84, 85, 86, 87, 88, 89], "normal": [25, 38, 43, 62, 67, 85, 86], "op": [25, 38, 43, 62, 67, 76], "pre": [25, 38, 43, 62, 67, 80, 87, 89], "calcul": [25, 38, 43, 62, 67, 82, 84, 85, 86, 87, 88, 89], "weight": [25, 27, 31, 35, 38, 40, 43, 45, 49, 55, 62, 64, 67, 69, 72, 82, 84, 85, 86, 87, 88, 89], "fuse": [25, 38, 43, 62, 67], "common": [25, 38, 43, 62, 67], "unifi": [25, 38, 43, 62, 67], "early_stop": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "lr_decai": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "enable_auto_mixed_precis": [27, 40, 45, 64, 69, 82, 84, 88, 89], "extra_lay": [27, 31, 45, 49, 55, 64, 82, 84, 86, 87, 88, 89], "hostfil": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 78], "nnode": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 78], "nproc_per_nod": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 78], "callback": [27, 40, 45], "time": [27, 31, 35, 45, 49, 72, 76, 80, 82, 84, 86, 87, 88, 89], "get": [27, 31, 35, 45, 49, 72, 73, 74, 75, 79, 90, 91], "extractor": [27, 45, 85], "add": [27, 31, 35, 45, 49, 72, 82, 84, 86, 88], "compil": [27, 40, 45, 82, 84, 86, 88], "initi": [27, 40, 45, 64, 69, 71], "when": [27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 76, 78, 82, 84, 85, 86, 87, 88, 89], "writeabl": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 85, 86, 87, 88, 89], "latest": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "enabl": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "earli": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "stop": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "converg": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "while": [27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 74, 82, 84, 85, 86, 87, 88, 89], "rate": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "decai": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 89], "auto": [27, 40, 45, 64, 69, 80, 82, 84, 88, 89], "mix": [27, 40, 45, 64, 69, 76, 80, 82, 84, 85, 88, 89], "16": [27, 40, 45, 64, 69, 82, 84, 86, 88, 89], "bit": [27, 40, 45, 64, 69, 82, 84, 88, 89], "float": [27, 40, 45, 55, 56, 64, 69, 82, 84, 85, 86, 87, 88, 89], "faster": [27, 40, 45, 64, 69, 80, 82, 84, 88, 89], "less": [27, 40, 45, 64, 69, 82, 84, 88, 89], "memori": [27, 40, 45, 64, 69, 71, 82, 84, 85, 88, 89], "support": [27, 40, 45, 64, 69, 71, 72, 78, 82, 84, 85, 86, 87, 88, 89], "bfloat16": [27, 40, 45, 64, 69, 82, 84, 88, 89], "fourth": [27, 40, 45, 64, 69, 82, 84, 88, 89], "gener": [27, 40, 45, 64, 69, 72, 74, 80, 82, 84, 85, 86, 87, 88, 89], "detriment": [27, 40, 45, 64, 69, 82, 84, 88, 89], "automat": [27, 40, 45, 64, 69, 80, 82, 84, 86, 87, 88, 89], "disabl": [27, 40, 45, 64, 69, 82, 84, 88, 89], "reproduc": [27, 31, 35, 40, 45, 49, 55, 64, 69], "insert": [27, 31, 45, 49, 55, 64, 82, 84, 86, 87, 88, 89], "between": [27, 31, 45, 49, 55, 64, 82, 84, 85, 86, 87, 88, 89], "increas": [27, 31, 45, 49, 55, 64, 82, 84, 86, 87, 88, 89], "fine": [27, 31, 45, 49, 52, 55, 60, 64, 65, 72, 82, 84, 85, 86, 88], "tune": [27, 31, 45, 49, 52, 55, 60, 64, 65, 72, 76, 82, 84, 85, 86, 88], "tfhub": [27, 45, 64, 82, 84, 86, 87, 88, 89], "input": [27, 31, 45, 49, 55, 64, 71, 82, 84, 85, 86, 87, 88, 89], "size": [27, 31, 45, 49, 55, 64, 72, 76, 80, 82, 84, 85, 86, 87, 88, 89], "1024": [27, 31, 45, 49, 55, 64, 82, 84, 86, 87, 88, 89], "512": [27, 31, 45, 49, 55, 64, 76, 82, 84, 86, 87, 88, 89], "neuron": [27, 31, 45, 49, 55, 64, 82, 84, 86, 87, 88, 89], "dure": [27, 40, 45, 55, 64, 69, 72, 78, 85], "histori": [27, 40, 45, 55, 64, 69, 76, 82, 84, 86, 87, 88, 89], "object": [27, 31, 35, 40, 45, 49, 64, 69, 71, 82, 84, 85, 86, 87, 88, 89], "fit": [27, 40, 45, 55, 64, 69], "pt": [29, 30, 33, 34, 47, 48, 53, 54, 71, 72], "ipex_optim": [31, 35, 49, 55, 72, 87], "fulli": [31, 35, 49], "connect": [31, 35, 49], "linear": [31, 35, 49], "extens": [31, 35, 49, 55, 72, 80, 87], "ipex": [31, 35, 49, 72], "flag": [31, 35, 49, 55, 76], "node": [31, 35, 49, 55, 72, 73, 78, 91], "spawn": [31, 35, 49, 55], "runtimeerror": 40, "multi": [52, 78, 82, 84, 86, 88], "learning_r": 55, "1e": 55, "05": 55, "devic": 55, "use_train": [55, 87], "force_download": 55, "textclassificationdataset": [55, 64, 69], "arrow_dataset": 55, "entir": [55, 64, 69, 73, 91], "partit": [55, 64, 69], "done": [55, 76, 86, 87, 88], "trainer": [55, 87], "nativ": [55, 87, 90], "loop": [55, 87], "dictionari": [55, 71], "yet": [55, 71, 86, 88], "binari": [60, 64, 65, 69], "notimplementederror": [69, 71], "simplest": 71, "get_dataset": [71, 82, 86, 87, 88, 89], "themselv": 71, "tfcustomtextclassificationdataset": 71, "task": [71, 78, 87], "purpos": [71, 86, 88], "keyword": 71, "being": [71, 72, 77, 78, 85, 87, 89], "tf_dataset": [71, 72, 82, 88, 89], "cv": [71, 72], "huggingfac": [71, 72], "nlp": 71, "request": [71, 80, 85, 86], "tf_flower": [71, 77, 88], "rare": 71, "interact": 71, "directli": 71, "discov": 71, "load_model": [71, 82, 84, 85], "discoveri": 71, "inspect": [71, 87, 89], "get_supported_model": 71, "print_supported_model": [71, 82, 84, 86, 87, 88, 89], "model_hub": 71, "origin": [71, 82, 84, 85, 87, 89], "configur": [71, 78], "adam": 71, "torch": [71, 85, 86], "nn": 71, "crossentropyloss": 71, "further": [71, 80], "thei": [71, 73, 91], "amsgrad": 71, "want": [71, 73, 86, 88, 91], "my_model": 71, "relu": 71, "softmax": 71, "224": [71, 85, 86], "leaf": 71, "item": 71, "nameerror": 71, "unknown": 71, "miss": 71, "verbos": [71, 72, 82, 84, 85, 86, 87, 88, 89], "markdown": 71, "categor": 71, "tabl": 71, "updat": [71, 87, 89], "Not": 71, "arg": 72, "model_dir": 72, "requir": [72, 74, 80, 82, 83, 84, 90], "reload": 72, "inc": [72, 86, 87, 88, 89], "temporari": 72, "delet": 72, "previous": [72, 85], "try": [72, 74], "dataset_fil": [72, 78], "singl": [72, 85, 87, 89], "extra": 72, "static": [72, 78, 86, 87, 89], "dynam": [72, 86], "criterion": [72, 76, 86], "accuracy_criterion": 72, "rel": [72, 86], "allow": [72, 78, 82, 84, 86, 87, 88, 89], "01": [72, 76, 86], "timeout": [72, 76, 86, 87, 88], "finish": [72, 86], "max": [72, 76, 85, 86, 87, 88, 89], "trial": [72, 76, 86, 87, 88], "mean": [72, 85, 86], "phase": [72, 86], "met": [72, 86], "max_trial": [72, 86], "maximum": [72, 86, 87, 89], "50": [72, 76, 82, 84, 86], "workspac": 72, "deep": [72, 78, 80], "log": 72, "etc": [72, 82, 84, 86, 87, 88, 89], "init": 72, "init_checkpoint": 72, "resum": [72, 80], "aug": 72, "add_aug": [72, 82, 84, 85, 86, 88], "choic": 72, "augment": [72, 82, 84, 85, 86, 88], "hvflip": [72, 82, 84, 88], "hflip": [72, 82, 84, 85, 86, 88], "vflip": [72, 82, 84, 88], "rotat": [72, 82, 84, 85, 86, 88], "zoom": [72, 82, 84, 88], "d": [72, 78], "trigger": 72, "job": [72, 78], "nproc": 72, "lr": 72, "horovod": 72, "use_horovod": 72, "mpi": 72, "here": [73, 75, 76, 79, 85, 91], "particip": [73, 91], "oneapi": [73, 91], "toolkit": [73, 82, 84, 85, 91], "instal": [73, 74, 80, 83, 90, 91], "opt": [73, 91], "up": [73, 78, 80, 82, 84, 85, 86, 87, 88, 89, 91], "kei": [73, 91], "pair": [73, 91], "check": [73, 78, 80, 85, 91], "id_rsa": [73, 91], "pub": [73, 91], "don": [73, 87, 91], "t": [73, 78, 82, 86, 87, 88, 89, 91], "passphras": [73, 91], "keygen": [73, 91], "old_passphras": [73, 91], "n": [73, 82, 85, 86, 88, 91], "new_passphras": [73, 91], "keyfil": [73, 91], "replac": [73, 78, 91], "blank": [73, 91], "space": [73, 91], "give": [73, 86, 88, 91], "permiss": [73, 91], "chmod": [73, 91], "u": [73, 86, 88, 91], "x": [73, 82, 84, 89, 91], "rsa": [73, 91], "ask": [73, 91], "what": [73, 85, 91], "press": [73, 91], "enter": [73, 91], "just": [73, 82, 84, 85, 86, 87, 88, 89, 91], "open": [73, 80, 82, 84, 86, 88, 91], "editor": [73, 91], "vi": [73, 91], "vim": [73, 91], "nano": [73, 91], "pico": [73, 91], "sai": [73, 91], "your_idsid": [73, 91], "hostnam": [73, 74, 91], "domain": [73, 82, 84, 91], "omit": [73, 91], "idsid": [73, 91], "authorized_kei": [73, 91], "past": [73, 90, 91], "AND": [73, 91], "yourself": [73, 91], "anyon": [73, 91], "600": [73, 91], "file1": [73, 91], "file2": [73, 91], "file3": [73, 91], "ip_or_hostnam": [73, 91], "target": [73, 91], "system": [73, 80, 87, 90, 91], "workload": [73, 91], "local": [73, 74, 85, 87, 91], "content": [73, 86, 87, 89, 91], "insid": [73, 90, 91], "describ": 74, "root": [74, 85], "project": [74, 80], "m": [74, 76, 82], "pandoc": 74, "few": 74, "doc": 74, "r": [74, 78, 82, 90], "txt": [74, 86, 88, 90], "navig": [74, 90], "doctest": 74, "ensur": [74, 78, 86, 88], "within": [74, 85, 86, 87, 88], "produc": [74, 85], "similiar": 74, "summari": [74, 86, 87], "6": 74, "failur": 74, "cleanup": 74, "succeed": 74, "final": [74, 80], "html": [74, 86], "clean": 74, "_build": 74, "server": [74, 90], "view": [74, 85, 90], "serv": [74, 82, 84, 86, 87, 88, 89], "127": 74, "port": [74, 90], "9999": 74, "anoth": 74, "pleas": [74, 87, 89], "forward": 74, "appropri": [74, 82, 84], "listen_ip": 74, "listen_port": 74, "host": 74, "listen": 74, "now": [74, 85], "cli": [75, 79, 80], "low": [75, 79, 80, 86, 87, 88, 89], "api": [75, 78, 79, 80], "begin": 76, "step": [76, 80, 82, 84, 85, 86, 87, 88, 89, 90], "concept": 76, "limit": 76, "particular": 76, "readi": [76, 82, 84, 88, 89], "own": [76, 80, 85], "along": [76, 87, 89], "eval": [76, 77, 78], "2022": 76, "06": 76, "28": 76, "info": [76, 82, 86, 87, 88, 89], "latenc": 76, "031": 76, "throughput": 76, "329": 76, "878": 76, "sec": 76, "exit": [76, 86, 87, 88], "58": 76, "statist": 76, "conv2d": 76, "53": 76, "matmul": 76, "maxpool": 76, "quantizev2": 76, "dequant": 76, "elaps": 76, "32164": 76, "27": 76, "26": 76, "13921": 76, "64": [76, 85], "9008": 76, "9022": 76, "durat": 76, "13": 76, "9226": 76, "17": 76, "3321": 76, "baselin": [76, 86, 87, 88, 89], "nc_workspac": 76, "snapshot": 76, "meet": [76, 78, 87, 89], "goal": [76, 85], "savedmodel": 76, "again": [76, 86, 87, 88, 89], "compar": [76, 86, 87, 88, 89], "33": 76, "946": 76, "1056": 76, "940": 76, "altern": 76, "flow": [76, 80], "so": [76, 86, 87, 88, 89], "51": 76, "21": 76, "photo": 77, "vari": [77, 78], "sinc": [77, 78, 86, 88], "onlin": [77, 86, 88], "tfflower": [77, 86, 88], "author": [77, 78, 82, 84, 86, 87, 88, 89], "team": [77, 80, 86, 88], "titl": [77, 78, 82, 83, 84, 85, 86, 87, 88, 89], "month": [77, 78, 84, 86, 87, 88, 89], "jan": [77, 86, 88], "year": [77, 78, 82, 84, 86, 87, 88, 89], "2019": [77, 78, 85, 86, 88], "url": [77, 78, 84, 86, 87, 88, 89, 90], "although": 78, "flexibl": 78, "translat": [78, 87, 89], "tab": [78, 87, 89], "messag": [78, 87, 89], "ham": [78, 87, 89], "archiv": [78, 87, 89], "ic": [78, 87, 89], "uci": [78, 87, 89], "edu": [78, 86, 87, 89], "228": [78, 87, 89], "unzip": [78, 84], "copi": [78, 90], "smsspamcollection_numer": 78, "cp": 78, "smsspamcollect": [78, 87, 89], "sed": 78, "g": [78, 82], "google_bert_uncased_l": 78, "demonstr": [78, 80, 83, 85, 86, 88], "imdb_review": [78, 89], "level": [78, 89], "sentiment": [78, 87, 89], "analysi": [78, 82, 85, 87, 89], "tweet_ev": [78, 87], "ag_new": [78, 87], "prerequisit": 78, "successfulli": 78, "saniti": [78, 85], "inproceed": [78, 87, 89], "maa": [78, 87, 89], "etal": [78, 87, 89], "2011": [78, 87, 89], "acl": [78, 87, 89], "hlt2011": [78, 87, 89], "andrew": [78, 87, 89], "l": [78, 82, 86, 87, 88, 89], "dali": [78, 87, 89], "raymond": [78, 87, 89], "e": [78, 87, 89], "pham": [78, 87, 89], "peter": [78, 87, 89], "huang": [78, 87, 89], "dan": [78, 87, 89], "ng": [78, 87, 89], "y": [78, 82, 84, 87, 89], "pott": [78, 87, 89], "christoph": [78, 87, 89], "word": [78, 87, 89], "vector": [78, 82, 84, 87, 89], "booktitl": [78, 87, 89], "proceed": [78, 84, 87, 89], "49th": [78, 87, 89], "annual": [78, 87, 89], "comput": [78, 85, 87, 89], "linguist": [78, 87, 89], "languag": [78, 87, 89], "technologi": [78, 87, 89], "june": [78, 87, 89], "address": [78, 86, 87, 88, 89], "portland": [78, 87, 89], "oregon": [78, 87, 89], "usa": [78, 87, 89], "publish": [78, 82, 84, 87, 89], "page": [78, 82, 84, 87, 89], "142": [78, 87, 89], "150": [78, 87, 89], "aclweb": [78, 87, 89], "anthologi": [78, 87, 89], "p11": [78, 87, 89], "1015": [78, 87, 89], "wang2019glu": 78, "natur": [78, 82], "understand": 78, "wang": 78, "alex": [78, 86], "singh": 78, "amanpreet": 78, "michael": [78, 85], "julian": 78, "hill": 78, "felix": 78, "levi": 78, "omer": 78, "bowman": 78, "samuel": 78, "iclr": 78, "misc": [78, 87, 89], "misc_sms_spam_collection_228": [78, 87, 89], "almeida": [78, 87, 89], "tiago": [78, 87, 89], "2012": [78, 87, 89], "howpublish": [78, 87, 89], "socher": 78, "2013": 78, "recurs": 78, "semant": [78, 87], "composition": 78, "over": [78, 80], "treebank": 78, "richard": 78, "perelygin": 78, "wu": 78, "jean": 78, "chuang": 78, "jason": 78, "man": 78, "confer": [78, 85, 87, 89], "empir": 78, "oct": [78, 84], "seattl": 78, "washington": 78, "d13": 78, "1170": 78, "1631": 78, "1642": 78, "problem": 80, "smaller": 80, "easier": 80, "varieti": [80, 86], "Its": 80, "librari": [80, 86, 87, 88, 89], "leverag": 80, "effici": 80, "resourc": 80, "usag": 80, "select": [80, 82, 84, 85, 86, 88, 89], "quickli": 80, "built": 80, "scale": [80, 86, 88], "crop": 80, "predict": [80, 82, 84], "boost": 80, "reduc": 80, "speed": 80, "interfac": 80, "construct": 80, "overview": 80, "shown": [80, 85, 86, 88], "figur": [80, 85, 86, 88], "track": 80, "bug": 80, "enhanc": 80, "issu": [80, 86, 87, 88, 89], "submit": 80, "suggest": 80, "report": [80, 82, 84], "search": [80, 86, 87, 88, 89], "legal": 80, "disclaim": 80, "licens": [80, 87, 89], "facilit": [82, 84], "implement": [82, 84], "textur": 82, "cancer": 82, "sota": [82, 84], "resnet": [82, 84, 85], "v1": [82, 84, 85], "achiev": [82, 84], "numpi": [82, 84, 85, 86, 87, 88, 89], "np": [82, 84, 85, 86, 87, 88, 89], "pickl": [82, 84], "sklearn": [82, 84], "classification_report": [82, 84], "plot_util": [82, 84], "plot_curv": [82, 84], "factori": [82, 84, 85, 86, 87, 88, 89], "ad": [82, 84, 85, 86, 87, 88, 89], "next": [82, 84, 86, 87, 88, 89], "cell": [82, 84, 85, 86, 87, 88, 89], "later": [82, 84, 86, 87, 88, 89], "colorectal_histologi": 82, "nclass": [82, 87, 88, 89], "onc": [82, 84, 85, 86, 87, 88, 89, 90], "abov": [82, 84, 85, 86, 87, 88, 89], "resiz": [82, 84, 85, 86, 88, 89], "match": [82, 84, 85, 86, 88, 89], "them": [82, 84, 85, 86, 88, 89], "randomhorizontalandverticalflip": [82, 84, 88], "randomhorizontalflip": [82, 84, 85, 86, 88], "randomverticalflip": [82, 84, 88], "randomrot": [82, 84, 85, 86, 88], "randomzoom": [82, 84, 88], "80": [82, 84], "test_pct": [82, 84, 85], "paramt": [82, 84, 88, 89], "releas": [82, 84, 85, 86, 87, 88, 89], "date": [82, 84, 85, 86, 87, 88, 89], "current": [82, 84, 85, 86, 87, 88, 89], "descript": [82, 84, 85, 86, 87, 88, 89], "val_loss": [82, 84], "val_acc": [82, 84], "_checkpoint": [82, 84], "dump": [82, 84], "hist": 82, "pkl": [82, 84], "wb": [82, 84], "pick": [82, 84, 86, 87, 88, 89], "rb": [82, 84], "use_test_set": [82, 84, 85], "actual_label": [82, 84, 89], "concaten": [82, 84], "_test_subset": [82, 84], "axi": [82, 84, 85, 86, 87, 88, 89], "predicted_label": [82, 84], "articl": [82, 84, 86, 88], "kather2016multi": 82, "kather": 82, "jakob": 82, "nikola": 82, "wei": 82, "cleo": 82, "aron": 82, "bianconi": 82, "francesco": 82, "melcher": 82, "susann": 82, "schad": 82, "lothar": 82, "gaiser": 82, "timo": 82, "marx": 82, "alexand": 82, "z": 82, "llner": 82, "frank": 82, "gerrit": 82, "journal": [82, 84, 85, 86, 88], "scientif": 82, "volum": [82, 84], "27988": 82, "2016": [82, 86, 88], "group": 82, "j": 82, "z\u00f6llner": 82, "zenodo": 82, "doi": [82, 84, 85], "5281": 82, "53169": 82, "ipynb": 83, "medic": 83, "remot": 83, "sens": 83, "scene": 83, "resisc": 83, "rar": 84, "onedr": 84, "live": 84, "authkei": 84, "21ahhnahilzp": 84, "5fixj": 84, "cid": 84, "5c5e061130630a68": 84, "id": [84, 85, 86, 88], "21107": 84, "parid": 84, "21112": 84, "action": 84, "custom_dataset_path": [84, 86, 88], "256": 84, "resisc45_hist": 84, "cheng_2017": 84, "state": 84, "art": 84, "105": 84, "issn": 84, "1558": 84, "2256": 84, "dx": 84, "1109": [84, 85], "jproc": 84, "2017": [84, 87], "2675998": 84, "ieee": [84, 85], "institut": 84, "electr": 84, "electron": 84, "engin": 84, "cheng": 84, "gong": 84, "han": 84, "junwei": 84, "lu": 84, "xiaoqiang": 84, "1865": 84, "1883": 84, "assum": [85, 86, 87, 88, 89], "matplotlib": [85, 86, 88], "pyplot": [85, 86, 88], "plt": [85, 86, 88], "panda": [85, 86, 87, 88, 89], "pd": [85, 86, 87, 88, 89], "pil": [85, 86, 88], "interpolationmod": 85, "io": [85, 86], "bytesio": [85, 86], "file_util": [85, 86, 87, 88, 89], "download_and_extract_tar_fil": [85, 86, 88], "download_fil": [85, 86, 88], "desir": 85, "disk": [85, 87, 89], "anomaly_detect": 85, "path_to_model_fil": 85, "png": 85, "hazelnut": 85, "crack": 85, "good": [85, 87], "hole": 85, "least": 85, "matter": 85, "mani": 85, "long": 85, "would": 85, "layout": [85, 86, 88], "toothbrush": 85, "encod": 85, "bad": 85, "exact": 85, "re": 85, "certain": 85, "percentag": 85, "img_dir": 85, "image_anomaly_detect": 85, "_dataset": 85, "defect_nam": 85, "_validation_typ": 85, "cutpast": 85, "cutpaste_typ": 85, "scar": 85, "3wai": 85, "union": 85, "interpol": 85, "lanczo": 85, "def": [85, 89], "plot_imag": 85, "sup_titl": 85, "figsiz": [85, 86, 88], "18": [85, 86, 88], "14": [85, 86, 88], "subplots_adjust": [85, 86, 88], "hspace": [85, 86, 88], "rang": [85, 86, 88], "min": [85, 86, 88], "30": [85, 86, 88], "subplot": [85, 86, 88], "inp": [85, 86], "transpos": [85, 86], "arrai": [85, 86, 88], "485": [85, 86], "456": [85, 86], "406": [85, 86], "std": [85, 86], "229": [85, 86], "225": [85, 86], "clip": [85, 86], "imshow": [85, 86, 88], "correct_predict": [85, 86, 88], "darkgreen": [85, 86, 88], "crimson": [85, 86, 88], "good_sampl": 85, "black": 85, "fontsiz": [85, 86, 88], "off": [85, 86, 88], "_": [85, 86, 88], "suptitl": [85, 86, 88], "plot": 85, "get_batch": [85, 86, 87, 88, 89], "princip": 85, "compon": 85, "auroc": 85, "area": 85, "roc": 85, "curv": 85, "imageanomalydetectiondataset": 85, "generate_checkpoint": 85, "preserv": 85, "layer_nam": 85, "whose": 85, "pool": 85, "avg": 85, "kernel_s": 85, "kernel": 85, "pca_threshold": 85, "threshold": 85, "pca": 85, "99": 85, "examin": 85, "decid": 85, "list_lay": [85, 86, 87], "layer3": 85, "three": 85, "No": 85, "simpli": 85, "self": 85, "supervis": 85, "network": [85, 89], "siames": 85, "meaning": 85, "represent": 85, "without": 85, "differenti": 85, "regular": 85, "context": 85, "underli": 85, "take": [85, 86, 87, 88, 89], "backbon": 85, "better": 85, "embed": 85, "dl": 85, "fbaipublicfil": 85, "100ep": 85, "256b": 85, "checkpoint_0099": 85, "pth": 85, "strategi": 85, "patch": 85, "techniqu": 85, "preview": 85, "simsiam_imag": 85, "four": 85, "cutpastenorm": 85, "cutpastescar": 85, "cutpaste3wai": 85, "cutpasteunion": 85, "cutpaste_imag": 85, "pca_compon": 85, "trained_model": 85, "feature_dim": 85, "1000": 85, "pred_dim": 85, "250": 85, "path_to_checkpoints_fil": 85, "float32": 85, "sgd": 85, "freeze_resnet": 85, "head_lay": 85, "return_typ": 85, "correct": [85, 86, 88], "green": [85, 86, 88], "incorrect": [85, 86, 88], "red": [85, 86, 88], "sum": 85, "enumer": [85, 87, 89], "len": [85, 89], "paul": 85, "bergmann": 85, "kilian": 85, "batzner": 85, "fauser": 85, "david": [85, 86, 88], "sattlegg": 85, "carsten": 85, "steger": 85, "real": 85, "world": 85, "unsupervis": 85, "intern": [85, 87], "vision": 85, "129": 85, "1038": 85, "1059": 85, "2021": 85, "1007": 85, "s11263": 85, "020": 85, "01400": 85, "cvf": 85, "pattern": 85, "recognit": 85, "cvpr": 85, "9584": 85, "9592": 85, "00982": 85, "classfic": [86, 88], "speci": [86, 88], "similarli": [86, 88], "comment": [86, 88], "download_url": [86, 88], "subsequ": [86, 90], "reus": [86, 90], "These": 86, "apppli": 86, "haven": [86, 88], "imagenet": [86, 88], "labels_fil": [86, 88], "imagenetlabel": [86, 88], "labels_file_path": 86, "basenam": [86, 87, 88, 89], "imagenet_label": [86, 88], "readlin": [86, 88], "imagenet_class": [86, 88], "actual": [86, 87, 88, 89], "parenthesi": [86, 88], "modul": [86, 87], "unfrozen": [86, 87], "unfreeze_lay": [86, 87], "unfreez": [86, 87], "lastli": [86, 87, 89], "earlier": [86, 88], "visual": [86, 88], "wasn": [86, 88], "web": [86, 88], "image_url": [86, 88], "c8": [86, 88], "staticflickr": [86, 88], "7095": [86, 88], "7210797228_c7fe51c3cb_z": [86, 88], "image_shap": [86, 88], "dimens": [86, 88], "255": [86, 88], "channel": 86, "newaxi": [86, 88], "moveaxi": 86, "tensor": [86, 87], "section": [86, 87, 88, 89], "known": [86, 87, 88, 89], "sometim": [86, 87, 88, 89], "zmq": [86, 87, 88, 89], "zmqerror": [86, 87, 88, 89], "rerun": [86, 87, 88, 89], "recip": [86, 87, 88, 89], "constrain": [86, 87, 88], "sever": [86, 87, 88, 89], "minut": [86, 87, 88, 89], "get_inc_config": 86, "accuracy_criterion_rel": 86, "exit_policy_timeout": 86, "exit_policy_max_tri": 86, "inc_util": 86, "inc_output_dir": [86, 87, 88, 89], "quantized_result": [86, 87, 89], "krizhevski": 86, "cifar": 86, "2009": 86, "toronto": 86, "kriz": 86, "openimag": [86, 88], "krasin": [86, 88], "ivan": [86, 88], "duerig": [86, 88], "tom": [86, 88], "alldrin": [86, 88], "neil": [86, 88], "veit": [86, 88], "andrea": [86, 88], "abu": [86, 88], "el": [86, 88], "haija": [86, 88], "sami": [86, 88], "belongi": [86, 88], "serg": [86, 88], "cai": [86, 88], "feng": [86, 88], "zheyun": [86, 88], "ferrari": [86, 88], "vittorio": [86, 88], "gome": [86, 88], "victor": [86, 88], "gupta": [86, 88], "abhinav": [86, 88], "narayanan": [86, 88], "dhyanesh": [86, 88], "sun": [86, 88], "chen": [86, 88], "chechik": [86, 88], "gal": [86, 88], "murphi": [86, 88], "kevin": [86, 88], "download_and_extract_zip_fil": [87, 89], "text_classif": [87, 89], "mesag": [87, 89], "condit": [87, 89], "corpor": [87, 89], "modifi": 87, "csv_path": 87, "dataset_url": 87, "sms_spam_collect": [87, 89], "csv_name": 87, "label_nam": 87, "renam": 87, "know": 87, "renamed_csv": 87, "emoji": 87, "emot": 87, "hate": 87, "ironi": 87, "offens": 87, "stance_abort": 87, "stance_ath": 87, "stance_clim": 87, "stance_feminist": 87, "stance_hillari": 87, "data_batch": [87, 89], "batch_predict": [87, 89], "frame": [87, 89], "max_item": [87, 89], "score": [87, 89], "prediction_list": [87, 89], "input_id": 87, "get_text": 87, "append": [87, 89], "get_str_label": [87, 89], "break": [87, 89], "result_df": [87, 89], "datafram": [87, 89], "style": [87, 89], "hide": [87, 89], "raw": [87, 89], "movi": [87, 89], "un": [87, 89], "compress": [87, 89], "du": [87, 89], "h": [87, 89], "rosenthal2017semev": 87, "semev": 87, "twitter": 87, "rosenth": 87, "sara": 87, "farra": 87, "noura": 87, "nakov": 87, "preslav": 87, "11th": 87, "workshop": 87, "502": 87, "518": 87, "preprocessor": 88, "downloaded_fil": 88, "get_fil": 88, "norm_imag": 88, "vmin": 88, "vmax": 88, "zip_file_url": 89, "sms_data_directori": 89, "listdir": 89, "ag_news_subset": 89, "num_class": 89, "decod": 89, "utf": 89, "argmax": 89, "get_static_valu": 89, "center": 89, "set_table_styl": 89, "selector": 89, "th": 89, "prop": 89, "align": 89, "awesom": 89, "zhang2015characterlevel": 89, "convolut": 89, "xiang": 89, "zhang": 89, "junbo": 89, "zhao": 89, "yann": 89, "lecun": 89, "2015": 89, "eprint": 89, "1509": 89, "01626": 89, "archiveprefix": 89, "arxiv": 89, "primaryclass": 89, "lg": 89, "tutori": 90, "e2": 90, "comparison": 90, "upgrad": 90, "8888": 90, "termin": 90, "browser": 90}, "objects": {"tlt.datasets.dataset": [[4, 0, 1, "", "BaseDataset"]], "tlt.datasets.dataset.BaseDataset": [[4, 1, 1, "", "__init__"]], "tlt.datasets": [[71, 2, 0, "-", "dataset_factory"]], "tlt.datasets.dataset_factory": [[71, 3, 1, "", "get_dataset"], [71, 3, 1, "", "load_dataset"]], "tlt.datasets.hf_dataset": [[5, 0, 1, "", "HFDataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.image_classification_dataset": [[6, 0, 1, "", "ImageClassificationDataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[6, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset": [[7, 0, 1, "", "PyTorchCustomImageClassificationDataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[7, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset": [[8, 0, 1, "", "TFCustomImageClassificationDataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[8, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tfds_image_classification_dataset": [[9, 0, 1, "", "TFDSImageClassificationDataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[9, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset": [[10, 0, 1, "", "TorchvisionImageClassificationDataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[10, 1, 1, "", "__init__"]], "tlt.datasets.pytorch_dataset": [[11, 0, 1, "", "PyTorchDataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[11, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset": [[12, 0, 1, "", "HFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[12, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_text_classification_dataset": [[13, 0, 1, "", "HFTextClassificationDataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[13, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.text_classification_dataset": [[14, 0, 1, "", "TextClassificationDataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[14, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset": [[15, 0, 1, "", "TFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[15, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tfds_text_classification_dataset": [[16, 0, 1, "", "TFDSTextClassificationDataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[16, 1, 1, "", "__init__"]], "tlt.datasets.tf_dataset": [[17, 0, 1, "", "TFDataset"]], "tlt.datasets.tf_dataset.TFDataset": [[17, 1, 1, "", "__init__"]], "tlt.models.hf_model": [[18, 0, 1, "", "HFModel"]], "tlt.models.hf_model.HFModel": [[18, 1, 1, "", "__init__"]], "tlt.models.image_classification.image_classification_model": [[19, 0, 1, "", "ImageClassificationModel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[19, 1, 1, "", "__init__"], [20, 1, 1, "", "benchmark"], [21, 1, 1, "", "quantize"], [22, 1, 1, "", "train"]], "tlt.models.image_classification.keras_image_classification_model": [[23, 0, 1, "", "KerasImageClassificationModel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[23, 1, 1, "", "__init__"], [24, 1, 1, "", "benchmark"], [25, 1, 1, "", "optimize_graph"], [26, 1, 1, "", "quantize"], [27, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model": [[28, 0, 1, "", "PyTorchHubImageClassificationModel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[28, 1, 1, "", "__init__"], [29, 1, 1, "", "benchmark"], [30, 1, 1, "", "quantize"], [31, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_image_classification_model": [[32, 0, 1, "", "PyTorchImageClassificationModel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[32, 1, 1, "", "__init__"], [33, 1, 1, "", "benchmark"], [34, 1, 1, "", "quantize"], [35, 1, 1, "", "train"]], "tlt.models.image_classification.tf_image_classification_model": [[36, 0, 1, "", "TFImageClassificationModel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[36, 1, 1, "", "__init__"], [37, 1, 1, "", "benchmark"], [38, 1, 1, "", "optimize_graph"], [39, 1, 1, "", "quantize"], [40, 1, 1, "", "train"]], "tlt.models.image_classification.tfhub_image_classification_model": [[41, 0, 1, "", "TFHubImageClassificationModel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[41, 1, 1, "", "__init__"], [42, 1, 1, "", "benchmark"], [43, 1, 1, "", "optimize_graph"], [44, 1, 1, "", "quantize"], [45, 1, 1, "", "train"]], "tlt.models.image_classification.torchvision_image_classification_model": [[46, 0, 1, "", "TorchvisionImageClassificationModel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[46, 1, 1, "", "__init__"], [47, 1, 1, "", "benchmark"], [48, 1, 1, "", "quantize"], [49, 1, 1, "", "train"]], "tlt.models.model": [[50, 0, 1, "", "BaseModel"]], "tlt.models.model.BaseModel": [[50, 1, 1, "", "__init__"]], "tlt.models": [[71, 2, 0, "-", "model_factory"]], "tlt.models.model_factory": [[71, 3, 1, "", "get_model"], [71, 3, 1, "", "get_supported_models"], [71, 3, 1, "", "load_model"], [71, 3, 1, "", "print_supported_models"]], "tlt.models.pytorch_model": [[51, 0, 1, "", "PyTorchModel"]], "tlt.models.pytorch_model.PyTorchModel": [[51, 1, 1, "", "__init__"]], "tlt.models.text_classification.pytorch_hf_text_classification_model": [[52, 0, 1, "", "PyTorchHFTextClassificationModel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[52, 1, 1, "", "__init__"], [53, 1, 1, "", "benchmark"], [54, 1, 1, "", "quantize"], [55, 1, 1, "", "train"]], "tlt.models.text_classification.text_classification_model": [[56, 0, 1, "", "TextClassificationModel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[56, 1, 1, "", "__init__"], [57, 1, 1, "", "benchmark"], [58, 1, 1, "", "quantize"], [59, 1, 1, "", "train"]], "tlt.models.text_classification.tf_hf_text_classification_model": [[60, 0, 1, "", "TFHFTextClassificationModel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[60, 1, 1, "", "__init__"], [61, 1, 1, "", "benchmark"], [62, 1, 1, "", "optimize_graph"], [63, 1, 1, "", "quantize"], [64, 1, 1, "", "train"]], "tlt.models.text_classification.tf_text_classification_model": [[65, 0, 1, "", "TFTextClassificationModel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[65, 1, 1, "", "__init__"], [66, 1, 1, "", "benchmark"], [67, 1, 1, "", "optimize_graph"], [68, 1, 1, "", "quantize"], [69, 1, 1, "", "train"]], "tlt.models.tf_model": [[70, 0, 1, "", "TFModel"]], "tlt.models.tf_model.TFModel": [[70, 1, 1, "", "__init__"]], "tlt-benchmark": [[72, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch-size"], [72, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch_size"], [72, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output_dir"]], "tlt-eval": [[72, 4, 1, "cmdoption-tlt-eval-class-names", "--class-names"], [72, 4, 1, "cmdoption-tlt-eval-class-names", "--class_names"], [72, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset-catalog"], [72, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-eval-dataset-file", "--dataset-file"], [72, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset-name"], [72, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset_catalog"], [72, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-eval-dataset-file", "--dataset_file"], [72, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset_name"], [72, 4, 1, "cmdoption-tlt-eval-delimiter", "--delimiter"], [72, 4, 1, "cmdoption-tlt-eval-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-eval-model-name", "--model-name"], [72, 4, 1, "cmdoption-tlt-eval-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-eval-model-name", "--model_name"]], "tlt-list-models": [[72, 4, 1, "cmdoption-tlt-list-models-f", "--framework"], [72, 4, 1, "cmdoption-tlt-list-models-use-case", "--use-case"], [72, 4, 1, "cmdoption-tlt-list-models-use-case", "--use_case"], [72, 4, 1, "cmdoption-tlt-list-models-verbose", "--verbose"], [72, 4, 1, "cmdoption-tlt-list-models-f", "-f"]], "tlt-optimize": [[72, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output_dir"]], "tlt-quantize": [[72, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy-criterion"], [72, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy_criterion"], [72, 4, 1, "cmdoption-tlt-quantize-approach", "--approach"], [72, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch-size"], [72, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch_size"], [72, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max-trials"], [72, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max_trials"], [72, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output_dir"], [72, 4, 1, "cmdoption-tlt-quantize-timeout", "--timeout"]], "tlt-train": [[72, 4, 1, "cmdoption-tlt-train-add-aug", "--add-aug"], [72, 4, 1, "cmdoption-tlt-train-add-aug", "--add_aug"], [72, 4, 1, "cmdoption-tlt-train-class-names", "--class-names"], [72, 4, 1, "cmdoption-tlt-train-class-names", "--class_names"], [72, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset-catalog"], [72, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset-file"], [72, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset-name"], [72, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset_catalog"], [72, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset_file"], [72, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset_name"], [72, 4, 1, "cmdoption-tlt-train-delimiter", "--delimiter"], [72, 4, 1, "cmdoption-tlt-train-d", "--distributed"], [72, 4, 1, "cmdoption-tlt-train-early-stopping", "--early-stopping"], [72, 4, 1, "cmdoption-tlt-train-early-stopping", "--early_stopping"], [72, 4, 1, "cmdoption-tlt-train-epochs", "--epochs"], [72, 4, 1, "cmdoption-tlt-train-f", "--framework"], [72, 4, 1, "cmdoption-tlt-train-hostfile", "--hostfile"], [72, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init-checkpoints"], [72, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init_checkpoints"], [72, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex-optimize"], [72, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex_optimize"], [72, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr-decay"], [72, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr_decay"], [72, 4, 1, "cmdoption-tlt-train-model-name", "--model-name"], [72, 4, 1, "cmdoption-tlt-train-model-name", "--model_name"], [72, 4, 1, "cmdoption-tlt-train-nnodes", "--nnodes"], [72, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc-per-node"], [72, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc_per_node"], [72, 4, 1, "cmdoption-tlt-train-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-train-output-dir", "--output_dir"], [72, 4, 1, "cmdoption-tlt-train-use-horovod", "--use-horovod"], [72, 4, 1, "cmdoption-tlt-train-use-horovod", "--use_horovod"], [72, 4, 1, "cmdoption-tlt-train-d", "-d"], [72, 4, 1, "cmdoption-tlt-train-f", "-f"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function", "4": "std:cmdoption"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"], "4": ["std", "cmdoption", "program option"]}, "titleterms": {"dataset": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 71, 77, 78, 82, 84, 85, 86, 87, 88, 89], "get": [1, 76, 80, 82, 84, 85, 86, 87, 88, 89], "start": [1, 76, 80], "\u2460": 1, "check": 1, "system": 1, "requir": [1, 85, 86, 87, 88, 89], "\u2461": 1, "instal": 1, "\u2462": 1, "run": [1, 90], "intel": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89], "transfer": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89], "learn": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89], "tool": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89], "us": [1, 77, 78, 82, 84, 85, 86, 87, 88, 89], "No": 1, "code": 1, "cli": [1, 72, 76, 77, 78], "low": 1, "api": [1, 71, 82, 83, 84, 86, 87, 88, 89], "summari": 1, "next": 1, "step": 1, "legal": 2, "inform": 2, "disclaim": 2, "licens": 2, "support": [3, 80], "model": [3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 82, 84, 85, 86, 87, 88, 89], "imag": [3, 71, 77, 81, 82, 84, 85, 86, 88], "classif": [3, 71, 77, 78, 81, 82, 84, 86, 87, 88, 89], "text": [3, 71, 78, 81, 87, 89], "anomali": [3, 85], "detect": [3, 85], "tlt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "basedataset": 4, "hf_dataset": 5, "hfdataset": 5, "image_classif": [6, 7, 8, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "image_classification_dataset": 6, "imageclassificationdataset": 6, "pytorch_custom_image_classification_dataset": 7, "pytorchcustomimageclassificationdataset": 7, "tf_custom_image_classification_dataset": 8, "tfcustomimageclassificationdataset": 8, "tfds_image_classification_dataset": 9, "tfdsimageclassificationdataset": 9, "torchvision_image_classification_dataset": 10, "torchvisionimageclassificationdataset": 10, "pytorch_dataset": 11, "pytorchdataset": 11, "text_classif": [12, 13, 14, 15, 16, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "hf_custom_text_classification_dataset": 12, "hfcustomtextclassificationdataset": 12, "hf_text_classification_dataset": 13, "hftextclassificationdataset": 13, "text_classification_dataset": 14, "textclassificationdataset": 14, "tf_custom_text_classification_dataset": 15, "tfcustomtextclassificationdataset": 15, "tfds_text_classification_dataset": 16, "tfdstextclassificationdataset": 16, "tf_dataset": 17, "tfdataset": 17, "hf_model": 18, "hfmodel": 18, "image_classification_model": [19, 20, 21, 22], "imageclassificationmodel": [19, 20, 21, 22], "benchmark": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 72, 76], "quantiz": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 72, 76, 86, 87, 88, 89], "train": [22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 73, 76, 85, 86, 88, 91], "keras_image_classification_model": [23, 24, 25, 26, 27], "kerasimageclassificationmodel": [23, 24, 25, 26, 27], "optimize_graph": [25, 38, 43, 62, 67], "pytorch_hub_image_classification_model": [28, 29, 30, 31], "pytorchhubimageclassificationmodel": [28, 29, 30, 31], "pytorch_image_classification_model": [32, 33, 34, 35], "pytorchimageclassificationmodel": [32, 33, 34, 35], "tf_image_classification_model": [36, 37, 38, 39, 40], "tfimageclassificationmodel": [36, 37, 38, 39, 40], "tfhub_image_classification_model": [41, 42, 43, 44, 45], "tfhubimageclassificationmodel": [41, 42, 43, 44, 45], "torchvision_image_classification_model": [46, 47, 48, 49], "torchvisionimageclassificationmodel": [46, 47, 48, 49], "basemodel": 50, "pytorch_model": 51, "pytorchmodel": 51, "pytorch_hf_text_classification_model": [52, 53, 54, 55], "pytorchhftextclassificationmodel": [52, 53, 54, 55], "text_classification_model": [56, 57, 58, 59], "textclassificationmodel": [56, 57, 58, 59], "tf_hf_text_classification_model": [60, 61, 62, 63, 64], "tfhftextclassificationmodel": [60, 61, 62, 63, 64], "tf_text_classification_model": [65, 66, 67, 68, 69], "tftextclassificationmodel": [65, 66, 67, 68, 69], "tf_model": 70, "tfmodel": 70, "refer": [71, 72], "factori": 71, "method": [71, 81, 85], "class": 71, "base": 71, "eval": 72, "list": [72, 76], "framework": 72, "use_cas": 72, "optim": [72, 76], "distribut": [73, 78, 91], "prerequisit": [73, 83, 91], "passwordless": [73, 91], "ssh": [73, 91], "setup": [73, 82, 84, 85, 86, 87, 88, 89, 90, 91], "build": 74, "document": 74, "sphinx": 74, "exampl": [75, 76, 77, 78, 79, 83], "beyond": 76, "avail": 76, "perform": 76, "graph": 76, "additit": 76, "your": [77, 78, 86, 87, 88, 89], "own": [77, 78, 86, 87, 88, 89], "from": [77, 78, 85, 86, 88], "tfd": [77, 78, 89], "catalog": [77, 78, 86, 87, 88, 89], "citat": [77, 78, 82, 84, 85, 86, 87, 88, 89], "fine": [78, 87, 89], "tune": [78, 87, 89], "hug": 78, "face": 78, "what": 80, "i": 80, "how": 80, "work": 80, "medic": 82, "colorect": 82, "histologi": 82, "tensorflow": [82, 84, 88, 89], "1": [82, 84, 85, 86, 87, 88, 89], "import": [82, 84, 85, 86, 87, 88, 89], "depend": [82, 84, 85, 86, 87, 88, 89], "paramet": [82, 84, 85, 86, 87, 88, 89], "2": [82, 84, 85, 86, 87, 88, 89], "option": [82, 84, 85, 86, 87, 88, 89], "A": [82, 84, 86, 87, 88, 89], "load": [82, 84, 85], "b": [82, 84, 86, 87, 88, 89], "pretrain": [82, 84], "checkpoint": [82, 84], "3": [82, 84, 85, 86, 87, 88, 89], "4": [82, 84, 85, 86, 87, 88, 89], "prepar": [82, 84, 85, 86, 87, 88, 89], "5": [82, 84, 85, 86, 87, 88, 89], "6": [82, 84, 85, 86, 87, 88, 89], "evalu": [82, 84, 85], "7": [82, 84, 85, 86, 87, 88, 89], "export": [82, 84, 85, 86, 87, 88, 89], "8": [82, 84, 85, 86, 87, 88, 89], "infer": [82, 84], "notebook": [83, 90], "tutori": 83, "end": 83, "pipelin": 83, "remot": 84, "sens": 84, "scene": 84, "resisc": 84, "pytorch": [85, 86, 87], "categori": 85, "folder": 85, "test": 85, "subfold": 85, "visual": 85, "sampl": 85, "argument": [85, 86, 87, 88, 89], "featur": 85, "extract": 85, "The": 85, "simsiam": 85, "twocroptransform": 85, "cut": 85, "past": 85, "transform": 85, "predict": [85, 86, 87, 88, 89], "": 86, "torchvis": 86, "origin": [86, 88], "custom": [86, 88], "singl": [86, 88], "9": [86, 88], "post": [86, 88], "huggingfac": 87, "save": [87, 89], "environ": 90, "set": 90, "up": 90}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Datasets": [[0, "datasets"], [2, "datasets"], [71, "datasets"]], "Get Started": [[1, "get-started"], [80, "get-started"]], "\u2460 Check System Requirements": [[1, "check-system-requirements"]], "\u2461 Install": [[1, "install"]], "\u2462 Run the Intel Transfer Learning Tool": [[1, "run-the-intel-transfer-learning-tool"]], "Run Using the No-Code CLI": [[1, "run-using-the-no-code-cli"]], "Run Using the Low-Code API": [[1, "run-using-the-low-code-api"]], "Summary and Next Steps": [[1, "summary-and-next-steps"]], "Legal Information": [[2, "legal-information"]], "Disclaimer": [[2, "disclaimer"]], "License": [[2, "license"]], "Intel\u00ae Transfer Learning Tool Supported Models": [[3, "intel-transfer-learning-tool-supported-models"]], "Image Classification": [[3, "image-classification"], [71, "image-classification"], [71, "id3"]], "Text Classification": [[3, "text-classification"], [71, "text-classification"], [71, "id4"]], "Image Anomaly Detection": [[3, "image-anomaly-detection"]], "tlt.datasets.dataset.BaseDataset": [[4, "tlt-datasets-dataset-basedataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, "tlt-datasets-hf-dataset-hfdataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[6, "tlt-datasets-image-classification-image-classification-dataset-imageclassificationdataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[7, "tlt-datasets-image-classification-pytorch-custom-image-classification-dataset-pytorchcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[8, "tlt-datasets-image-classification-tf-custom-image-classification-dataset-tfcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[9, "tlt-datasets-image-classification-tfds-image-classification-dataset-tfdsimageclassificationdataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[10, "tlt-datasets-image-classification-torchvision-image-classification-dataset-torchvisionimageclassificationdataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[11, "tlt-datasets-pytorch-dataset-pytorchdataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[12, "tlt-datasets-text-classification-hf-custom-text-classification-dataset-hfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[13, "tlt-datasets-text-classification-hf-text-classification-dataset-hftextclassificationdataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[14, "tlt-datasets-text-classification-text-classification-dataset-textclassificationdataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[15, "tlt-datasets-text-classification-tf-custom-text-classification-dataset-tfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[16, "tlt-datasets-text-classification-tfds-text-classification-dataset-tfdstextclassificationdataset"]], "tlt.datasets.tf_dataset.TFDataset": [[17, "tlt-datasets-tf-dataset-tfdataset"]], "tlt.models.hf_model.HFModel": [[18, "tlt-models-hf-model-hfmodel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[19, "tlt-models-image-classification-image-classification-model-imageclassificationmodel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark": [[20, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-benchmark"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize": [[21, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-quantize"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train": [[22, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-train"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[23, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark": [[24, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-benchmark"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph": [[25, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize": [[26, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-quantize"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train": [[27, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[28, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark": [[29, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-benchmark"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize": [[30, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train": [[31, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[32, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark": [[33, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-benchmark"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize": [[34, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train": [[35, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-train"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[36, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark": [[37, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-benchmark"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph": [[38, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize": [[39, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-quantize"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train": [[40, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-train"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[41, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark": [[42, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-benchmark"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph": [[43, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize": [[44, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train": [[45, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-train"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[46, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark": [[47, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-benchmark"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize": [[48, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-quantize"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train": [[49, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-train"]], "tlt.models.model.BaseModel": [[50, "tlt-models-model-basemodel"]], "tlt.models.pytorch_model.PyTorchModel": [[51, "tlt-models-pytorch-model-pytorchmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[52, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark": [[53, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-benchmark"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize": [[54, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-quantize"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train": [[55, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-train"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[56, "tlt-models-text-classification-text-classification-model-textclassificationmodel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark": [[57, "tlt-models-text-classification-text-classification-model-textclassificationmodel-benchmark"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize": [[58, "tlt-models-text-classification-text-classification-model-textclassificationmodel-quantize"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.train": [[59, "tlt-models-text-classification-text-classification-model-textclassificationmodel-train"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[60, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark": [[61, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-benchmark"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph": [[62, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-optimize-graph"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize": [[63, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train": [[64, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-train"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[65, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark": [[66, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-benchmark"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph": [[67, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-optimize-graph"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize": [[68, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train": [[69, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-train"]], "tlt.models.tf_model.TFModel": [[70, "tlt-models-tf-model-tfmodel"]], "API Reference": [[71, "api-reference"]], "Factory Methods": [[71, "module-tlt.datasets.dataset_factory"], [71, "id1"]], "Class Reference": [[71, "class-reference"], [71, "id2"]], "Base Classes": [[71, "base-classes"], [71, "id5"]], "Models": [[71, "models"]], "CLI Reference": [[72, "cli-reference"]], "tlt": [[72, "tlt"]], "benchmark": [[72, "tlt-benchmark"]], "eval": [[72, "tlt-eval"]], "list": [[72, "tlt-list"]], "frameworks": [[72, "tlt-list-frameworks"]], "models": [[72, "tlt-list-models"]], "use_cases": [[72, "tlt-list-use-cases"]], "optimize": [[72, "tlt-optimize"]], "quantize": [[72, "tlt-quantize"]], "train": [[72, "tlt-train"]], "Distributed Training": [[73, "distributed-training"], [91, "distributed-training"]], "Prerequisites": [[73, "prerequisites"], [83, "prerequisites"], [91, "prerequisites"]], "Passwordless SSH setup": [[73, "passwordless-ssh-setup"], [91, "passwordless-ssh-setup"]], "Building Documentation": [[74, "building-documentation"]], "Sphinx Documentation": [[74, "sphinx-documentation"]], "Examples": [[75, "examples"], [79, "examples"]], "Beyond Get Started CLI Example": [[76, "beyond-get-started-cli-example"]], "List the Available Models": [[76, "list-the-available-models"]], "Train a Model": [[76, "train-a-model"]], "Benchmark the Trained Model": [[76, "benchmark-the-trained-model"]], "Quantize the Model": [[76, "quantize-the-model"]], "Benchmark the Quantized Model": [[76, "benchmark-the-quantized-model"]], "Perform Graph Optimization on the Trained Model": [[76, "perform-graph-optimization-on-the-trained-model"]], "Addititional CLI Examples": [[76, "addititional-cli-examples"]], "Image Classification Intel\u00ae Transfer Learning Tool CLI Example": [[77, "image-classification-intel-transfer-learning-tool-cli-example"]], "Transfer Learning Using your Own Dataset": [[77, "transfer-learning-using-your-own-dataset"]], "Transfer Learning Using a Dataset from the TFDS Catalog": [[77, "transfer-learning-using-a-dataset-from-the-tfds-catalog"]], "Citations": [[77, "citations"], [78, "citations"], [87, "Citations"], [89, "Citations"]], "Text Classification Intel\u00ae Transfer Learning Tool CLI Example": [[78, "text-classification-intel-transfer-learning-tool-cli-example"]], "Fine Tuning Using Your Own Dataset": [[78, "fine-tuning-using-your-own-dataset"]], "Fine Tuning Using a Dataset from the TFDS Catalog": [[78, "fine-tuning-using-a-dataset-from-the-tfds-catalog"]], "Distributed Transfer Learning Using a Dataset from Hugging Face": [[78, "distributed-transfer-learning-using-a-dataset-from-hugging-face"]], "Intel\u00ae Transfer Learning Tool": [[80, "intel-transfer-learning-tool"]], "What is Intel\u00ae Transfer Learning Tool": [[80, "what-is-intel-transfer-learning-tool"]], "How the Intel Transfer Learning Tool Works": [[80, "how-the-intel-transfer-learning-tool-works"]], "Support": [[80, "support"]], "Image Classification Methods": [[81, "image-classification-methods"]], "Text Classification Methods": [[81, "text-classification-methods"]], "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[82, "Medical-Imaging-Classification-(Colorectal-histology)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "1. Import dependencies and setup parameters": [[82, "1.-Import-dependencies-and-setup-parameters"], [84, "1.-Import-dependencies-and-setup-parameters"], [85, "1.-Import-dependencies-and-setup-parameters"], [86, "1.-Import-dependencies-and-setup-parameters"], [87, "1.-Import-dependencies-and-setup-parameters"], [88, "1.-Import-dependencies-and-setup-parameters"], [89, "1.-Import-dependencies-and-setup-parameters"]], "2. Get the model": [[82, "2.-Get-the-model"], [84, "2.-Get-the-model"], [86, "2.-Get-the-model"], [87, "2.-Get-the-model"], [88, "2.-Get-the-model"], [89, "2.-Get-the-model"]], "Option A: Load a model": [[82, "Option-A:-Load-a-model"], [84, "Option-A:-Load-a-model"]], "Option B: Load a pretrained checkpoint": [[82, "Option-B:-Load-a-pretrained-checkpoint"], [84, "Option-B:-Load-a-pretrained-checkpoint"]], "3. Get the dataset": [[82, "3.-Get-the-dataset"], [84, "3.-Get-the-dataset"], [85, "3.-Get-the-dataset"], [86, "3.-Get-the-dataset"], [87, "3.-Get-the-dataset"], [88, "3.-Get-the-dataset"], [89, "3.-Get-the-dataset"]], "4. Prepare the dataset": [[82, "4.-Prepare-the-dataset"], [84, "4.-Prepare-the-dataset"], [85, "4.-Prepare-the-dataset"], [86, "4.-Prepare-the-dataset"], [87, "4.-Prepare-the-dataset"], [88, "4.-Prepare-the-dataset"], [89, "4.-Prepare-the-dataset"]], "5. Transfer Learning": [[82, "5.-Transfer-Learning"], [84, "5.-Transfer-Learning"]], "6. Evaluate": [[82, "6.-Evaluate"], [84, "6.-Evaluate"]], "7. Export": [[82, "7.-Export"], [84, "7.-Export"]], "8. Inference": [[82, "8.-Inference"], [84, "8.-Inference"]], "Dataset Citations": [[82, "Dataset-Citations"], [84, "Dataset-Citations"], [85, "Dataset-Citations"], [86, "Dataset-Citations"], [88, "Dataset-Citations"]], "Intel\u00ae Transfer Learning Tool API Notebook Examples": [[83, "intel-transfer-learning-tool-api-notebook-examples"]], "Intel Transfer Learning Tool API Tutorial Notebooks": [[83, "intel-transfer-learning-tool-api-tutorial-notebooks"]], "Intel Transfer Learning Tool API End-to-End Pipelines": [[83, "intel-transfer-learning-tool-api-end-to-end-pipelines"]], "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[84, "Remote-Sensing-Image-Scene-Classification-(Resisc)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool": [[85, "Image-Anomaly-Detection-with-PyTorch-using-Intel\u00ae-Transfer-Learning-Tool"]], "2. Get or load the model": [[85, "2.-Get-or-load-the-model"]], "Method 1: Category Folders": [[85, "Method-1:-Category-Folders"]], "Method 2: Train & Test Folders with Category Subfolders": [[85, "Method-2:-Train-&-Test-Folders-with-Category-Subfolders"]], "5. Visualize samples from the dataset": [[85, "5.-Visualize-samples-from-the-dataset"]], "6. Training and Evaluation": [[85, "6.-Training-and-Evaluation"]], "Train Arguments": [[85, "Train-Arguments"]], "Required": [[85, "Required"], [86, "Required"], [87, "Required"], [88, "Required"], [89, "Required"]], "Optional": [[85, "Optional"], [86, "Optional"], [87, "Optional"], [88, "Optional"], [89, "Optional"]], "Feature Extraction": [[85, "Feature-Extraction"]], "Optional: The SimSiam TwoCropTransform": [[85, "Optional:-The-SimSiam-TwoCropTransform"]], "Optional: The Cut-paste Transforms": [[85, "Optional:-The-Cut-paste-Transforms"]], "7. Predict": [[85, "7.-Predict"], [86, "7.-Predict"], [88, "7.-Predict"]], "8. Export": [[85, "8.-Export"], [86, "8.-Export"], [88, "8.-Export"]], "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API": [[86, "Transfer-Learning-for-Image-Classification-using-PyTorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option A: Use your own dataset": [[86, "Option-A:-Use-your-own-dataset"], [87, "Option-A:-Use-your-own-dataset"], [88, "Option-A:-Use-your-own-dataset"], [89, "Option-A:-Use-your-own-dataset"]], "Option B: Use a dataset from the PyTorch\u2019s Torchvision Datasets catalog": [[86, "Option-B:-Use-a-dataset-from-the-PyTorch's-Torchvision-Datasets-catalog"]], "5. Predict using the original model": [[86, "5.-Predict-using-the-original-model"], [88, "5.-Predict-using-the-original-model"]], "6. Transfer Learning": [[86, "6.-Transfer-Learning"], [88, "6.-Transfer-Learning"]], "Arguments": [[86, "Arguments"], [87, "Arguments"], [88, "Arguments"], [89, "Arguments"]], "Custom Single Image Prediction": [[86, "Custom-Single-Image-Prediction"], [88, "Custom-Single-Image-Prediction"]], "9. Post-training quantization": [[86, "9.-Post-training-quantization"], [88, "9.-Post-training-quantization"]], "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API": [[87, "Text-Classification-fine-tuning-using-Pytorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the HuggingFace catalog": [[87, "Option-B:-Use-the-HuggingFace-catalog"]], "5. Fine tuning": [[87, "5.-Fine-tuning"], [89, "5.-Fine-tuning"]], "6. Predict": [[87, "6.-Predict"], [89, "6.-Predict"]], "Predict on Text": [[87, "Predict-on-Text"]], "7. Export the saved model": [[87, "7.-Export-the-saved-model"], [89, "7.-Export-the-saved-model"]], "8. Quantization": [[87, "8.-Quantization"], [89, "8.-Quantization"]], "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[88, "Transfer-Learning-for-Image-Classification-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use a dataset from the TensorFlow Datasets catalog": [[88, "Option-B:-Use-a-dataset-from-the-TensorFlow-Datasets-catalog"]], "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[89, "Text-Classification-fine-tuning-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the TFDS catalog": [[89, "Option-B:-Use-the-TFDS-catalog"]], "Environment Setup and Running the Notebooks": [[90, "environment-setup-and-running-the-notebooks"]], "Set Up Notebook Environment": [[90, "set-up-notebook-environment"]]}, "indexentries": {"basedataset (class in tlt.datasets.dataset)": [[4, "tlt.datasets.dataset.BaseDataset"]], "__init__() (tlt.datasets.dataset.basedataset method)": [[4, "tlt.datasets.dataset.BaseDataset.__init__"]], "hfdataset (class in tlt.datasets.hf_dataset)": [[5, "tlt.datasets.hf_dataset.HFDataset"]], "__init__() (tlt.datasets.hf_dataset.hfdataset method)": [[5, "tlt.datasets.hf_dataset.HFDataset.__init__"]], "imageclassificationdataset (class in tlt.datasets.image_classification.image_classification_dataset)": [[6, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.image_classification_dataset.imageclassificationdataset method)": [[6, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.__init__"]], "pytorchcustomimageclassificationdataset (class in tlt.datasets.image_classification.pytorch_custom_image_classification_dataset)": [[7, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.pytorchcustomimageclassificationdataset method)": [[7, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.__init__"]], "tfcustomimageclassificationdataset (class in tlt.datasets.image_classification.tf_custom_image_classification_dataset)": [[8, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tf_custom_image_classification_dataset.tfcustomimageclassificationdataset method)": [[8, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.__init__"]], "tfdsimageclassificationdataset (class in tlt.datasets.image_classification.tfds_image_classification_dataset)": [[9, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tfds_image_classification_dataset.tfdsimageclassificationdataset method)": [[9, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.__init__"]], "torchvisionimageclassificationdataset (class in tlt.datasets.image_classification.torchvision_image_classification_dataset)": [[10, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.torchvision_image_classification_dataset.torchvisionimageclassificationdataset method)": [[10, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.__init__"]], "pytorchdataset (class in tlt.datasets.pytorch_dataset)": [[11, "tlt.datasets.pytorch_dataset.PyTorchDataset"]], "__init__() (tlt.datasets.pytorch_dataset.pytorchdataset method)": [[11, "tlt.datasets.pytorch_dataset.PyTorchDataset.__init__"]], "hfcustomtextclassificationdataset (class in tlt.datasets.text_classification.hf_custom_text_classification_dataset)": [[12, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_custom_text_classification_dataset.hfcustomtextclassificationdataset method)": [[12, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.__init__"]], "hftextclassificationdataset (class in tlt.datasets.text_classification.hf_text_classification_dataset)": [[13, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_text_classification_dataset.hftextclassificationdataset method)": [[13, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.__init__"]], "textclassificationdataset (class in tlt.datasets.text_classification.text_classification_dataset)": [[14, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.text_classification_dataset.textclassificationdataset method)": [[14, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.__init__"]], "tfcustomtextclassificationdataset (class in tlt.datasets.text_classification.tf_custom_text_classification_dataset)": [[15, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tf_custom_text_classification_dataset.tfcustomtextclassificationdataset method)": [[15, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.__init__"]], "tfdstextclassificationdataset (class in tlt.datasets.text_classification.tfds_text_classification_dataset)": [[16, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tfds_text_classification_dataset.tfdstextclassificationdataset method)": [[16, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.__init__"]], "tfdataset (class in tlt.datasets.tf_dataset)": [[17, "tlt.datasets.tf_dataset.TFDataset"]], "__init__() (tlt.datasets.tf_dataset.tfdataset method)": [[17, "tlt.datasets.tf_dataset.TFDataset.__init__"]], "hfmodel (class in tlt.models.hf_model)": [[18, "tlt.models.hf_model.HFModel"]], "__init__() (tlt.models.hf_model.hfmodel method)": [[18, "tlt.models.hf_model.HFModel.__init__"]], "imageclassificationmodel (class in tlt.models.image_classification.image_classification_model)": [[19, "tlt.models.image_classification.image_classification_model.ImageClassificationModel"]], "__init__() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[19, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[20, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[21, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[22, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train"]], "kerasimageclassificationmodel (class in tlt.models.image_classification.keras_image_classification_model)": [[23, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel"]], "__init__() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[23, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[24, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[25, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[26, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[27, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train"]], "pytorchhubimageclassificationmodel (class in tlt.models.image_classification.pytorch_hub_image_classification_model)": [[28, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[28, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[29, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[30, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[31, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train"]], "pytorchimageclassificationmodel (class in tlt.models.image_classification.pytorch_image_classification_model)": [[32, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[32, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[33, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[34, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[35, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train"]], "tfimageclassificationmodel (class in tlt.models.image_classification.tf_image_classification_model)": [[36, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel"]], "__init__() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[36, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[37, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[38, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[39, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[40, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train"]], "tfhubimageclassificationmodel (class in tlt.models.image_classification.tfhub_image_classification_model)": [[41, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[41, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[42, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[43, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[44, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[45, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train"]], "torchvisionimageclassificationmodel (class in tlt.models.image_classification.torchvision_image_classification_model)": [[46, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel"]], "__init__() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[46, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[47, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[48, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[49, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train"]], "basemodel (class in tlt.models.model)": [[50, "tlt.models.model.BaseModel"]], "__init__() (tlt.models.model.basemodel method)": [[50, "tlt.models.model.BaseModel.__init__"]], "pytorchmodel (class in tlt.models.pytorch_model)": [[51, "tlt.models.pytorch_model.PyTorchModel"]], "__init__() (tlt.models.pytorch_model.pytorchmodel method)": [[51, "tlt.models.pytorch_model.PyTorchModel.__init__"]], "pytorchhftextclassificationmodel (class in tlt.models.text_classification.pytorch_hf_text_classification_model)": [[52, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[52, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[53, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark"]], "quantize() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[54, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[55, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train"]], "textclassificationmodel (class in tlt.models.text_classification.text_classification_model)": [[56, "tlt.models.text_classification.text_classification_model.TextClassificationModel"]], "__init__() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[56, "tlt.models.text_classification.text_classification_model.TextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[57, "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark"]], "quantize() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[58, "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize"]], "train() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[59, "tlt.models.text_classification.text_classification_model.TextClassificationModel.train"]], "tfhftextclassificationmodel (class in tlt.models.text_classification.tf_hf_text_classification_model)": [[60, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[60, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[61, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark"]], "optimize_graph() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[62, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph"]], "quantize() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[63, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[64, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train"]], "tftextclassificationmodel (class in tlt.models.text_classification.tf_text_classification_model)": [[65, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[65, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[66, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark"]], "optimize_graph() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[67, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph"]], "quantize() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[68, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[69, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train"]], "tfmodel (class in tlt.models.tf_model)": [[70, "tlt.models.tf_model.TFModel"]], "__init__() (tlt.models.tf_model.tfmodel method)": [[70, "tlt.models.tf_model.TFModel.__init__"]], "get_dataset() (in module tlt.datasets.dataset_factory)": [[71, "tlt.datasets.dataset_factory.get_dataset"]], "get_model() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.get_model"]], "get_supported_models() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.get_supported_models"]], "load_dataset() (in module tlt.datasets.dataset_factory)": [[71, "tlt.datasets.dataset_factory.load_dataset"]], "load_model() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.load_model"]], "module": [[71, "module-tlt.datasets.dataset_factory"], [71, "module-tlt.models.model_factory"]], "print_supported_models() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.print_supported_models"]], "tlt.datasets.dataset_factory": [[71, "module-tlt.datasets.dataset_factory"]], "tlt.models.model_factory": [[71, "module-tlt.models.model_factory"]], "--accuracy-criterion": [[72, "cmdoption-tlt-quantize-accuracy-criterion"]], "--accuracy_criterion": [[72, "cmdoption-tlt-quantize-accuracy-criterion"]], "--add-aug": [[72, "cmdoption-tlt-train-add-aug"]], "--add_aug": [[72, "cmdoption-tlt-train-add-aug"]], "--approach": [[72, "cmdoption-tlt-quantize-approach"]], "--batch-size": [[72, "cmdoption-tlt-benchmark-batch-size"], [72, "cmdoption-tlt-quantize-batch-size"]], "--batch_size": [[72, "cmdoption-tlt-benchmark-batch-size"], [72, "cmdoption-tlt-quantize-batch-size"]], "--class-names": [[72, "cmdoption-tlt-eval-class-names"], [72, "cmdoption-tlt-train-class-names"]], "--class_names": [[72, "cmdoption-tlt-eval-class-names"], [72, "cmdoption-tlt-train-class-names"]], "--dataset-catalog": [[72, "cmdoption-tlt-eval-dataset-catalog"], [72, "cmdoption-tlt-train-dataset-catalog"]], "--dataset-dir": [[72, "cmdoption-tlt-benchmark-dataset-dir"], [72, "cmdoption-tlt-eval-dataset-dir"], [72, "cmdoption-tlt-quantize-dataset-dir"], [72, "cmdoption-tlt-train-dataset-dir"]], "--dataset-file": [[72, "cmdoption-tlt-eval-dataset-file"], [72, "cmdoption-tlt-train-dataset-file"]], "--dataset-name": [[72, "cmdoption-tlt-eval-dataset-name"], [72, "cmdoption-tlt-train-dataset-name"]], "--dataset_catalog": [[72, "cmdoption-tlt-eval-dataset-catalog"], [72, "cmdoption-tlt-train-dataset-catalog"]], "--dataset_dir": [[72, "cmdoption-tlt-benchmark-dataset-dir"], [72, "cmdoption-tlt-eval-dataset-dir"], [72, "cmdoption-tlt-quantize-dataset-dir"], [72, "cmdoption-tlt-train-dataset-dir"]], "--dataset_file": [[72, "cmdoption-tlt-eval-dataset-file"], [72, "cmdoption-tlt-train-dataset-file"]], "--dataset_name": [[72, "cmdoption-tlt-eval-dataset-name"], [72, "cmdoption-tlt-train-dataset-name"]], "--delimiter": [[72, "cmdoption-tlt-eval-delimiter"], [72, "cmdoption-tlt-train-delimiter"]], "--distributed": [[72, "cmdoption-tlt-train-d"]], "--early-stopping": [[72, "cmdoption-tlt-train-early-stopping"]], "--early_stopping": [[72, "cmdoption-tlt-train-early-stopping"]], "--epochs": [[72, "cmdoption-tlt-train-epochs"]], "--framework": [[72, "cmdoption-tlt-list-models-f"], [72, "cmdoption-tlt-train-f"]], "--hostfile": [[72, "cmdoption-tlt-train-hostfile"]], "--init-checkpoints": [[72, "cmdoption-tlt-train-init-checkpoints"]], "--init_checkpoints": [[72, "cmdoption-tlt-train-init-checkpoints"]], "--ipex-optimize": [[72, "cmdoption-tlt-train-ipex_optimize"]], "--ipex_optimize": [[72, "cmdoption-tlt-train-ipex_optimize"]], "--lr-decay": [[72, "cmdoption-tlt-train-lr-decay"]], "--lr_decay": [[72, "cmdoption-tlt-train-lr-decay"]], "--max-trials": [[72, "cmdoption-tlt-quantize-max-trials"]], "--max_trials": [[72, "cmdoption-tlt-quantize-max-trials"]], "--model-dir": [[72, "cmdoption-tlt-benchmark-model-dir"], [72, "cmdoption-tlt-eval-model-dir"], [72, "cmdoption-tlt-optimize-model-dir"], [72, "cmdoption-tlt-quantize-model-dir"]], "--model-name": [[72, "cmdoption-tlt-eval-model-name"], [72, "cmdoption-tlt-train-model-name"]], "--model_dir": [[72, "cmdoption-tlt-benchmark-model-dir"], [72, "cmdoption-tlt-eval-model-dir"], [72, "cmdoption-tlt-optimize-model-dir"], [72, "cmdoption-tlt-quantize-model-dir"]], "--model_name": [[72, "cmdoption-tlt-eval-model-name"], [72, "cmdoption-tlt-train-model-name"]], "--nnodes": [[72, "cmdoption-tlt-train-nnodes"]], "--nproc-per-node": [[72, "cmdoption-tlt-train-nproc_per_node"]], "--nproc_per_node": [[72, "cmdoption-tlt-train-nproc_per_node"]], "--output-dir": [[72, "cmdoption-tlt-benchmark-output-dir"], [72, "cmdoption-tlt-optimize-output-dir"], [72, "cmdoption-tlt-quantize-output-dir"], [72, "cmdoption-tlt-train-output-dir"]], "--output_dir": [[72, "cmdoption-tlt-benchmark-output-dir"], [72, "cmdoption-tlt-optimize-output-dir"], [72, "cmdoption-tlt-quantize-output-dir"], [72, "cmdoption-tlt-train-output-dir"]], "--timeout": [[72, "cmdoption-tlt-quantize-timeout"]], "--use-case": [[72, "cmdoption-tlt-list-models-use-case"]], "--use-horovod": [[72, "cmdoption-tlt-train-use-horovod"]], "--use_case": [[72, "cmdoption-tlt-list-models-use-case"]], "--use_horovod": [[72, "cmdoption-tlt-train-use-horovod"]], "--verbose": [[72, "cmdoption-tlt-list-models-verbose"]], "-d": [[72, "cmdoption-tlt-train-d"]], "-f": [[72, "cmdoption-tlt-list-models-f"], [72, "cmdoption-tlt-train-f"]], "tlt-benchmark command line option": [[72, "cmdoption-tlt-benchmark-batch-size"], [72, "cmdoption-tlt-benchmark-dataset-dir"], [72, "cmdoption-tlt-benchmark-model-dir"], [72, "cmdoption-tlt-benchmark-output-dir"]], "tlt-eval command line option": [[72, "cmdoption-tlt-eval-class-names"], [72, "cmdoption-tlt-eval-dataset-catalog"], [72, "cmdoption-tlt-eval-dataset-dir"], [72, "cmdoption-tlt-eval-dataset-file"], [72, "cmdoption-tlt-eval-dataset-name"], [72, "cmdoption-tlt-eval-delimiter"], [72, "cmdoption-tlt-eval-model-dir"], [72, "cmdoption-tlt-eval-model-name"]], "tlt-list-models command line option": [[72, "cmdoption-tlt-list-models-f"], [72, "cmdoption-tlt-list-models-use-case"], [72, "cmdoption-tlt-list-models-verbose"]], "tlt-optimize command line option": [[72, "cmdoption-tlt-optimize-model-dir"], [72, "cmdoption-tlt-optimize-output-dir"]], "tlt-quantize command line option": [[72, "cmdoption-tlt-quantize-accuracy-criterion"], [72, "cmdoption-tlt-quantize-approach"], [72, "cmdoption-tlt-quantize-batch-size"], [72, "cmdoption-tlt-quantize-dataset-dir"], [72, "cmdoption-tlt-quantize-max-trials"], [72, "cmdoption-tlt-quantize-model-dir"], [72, "cmdoption-tlt-quantize-output-dir"], [72, "cmdoption-tlt-quantize-timeout"]], "tlt-train command line option": [[72, "cmdoption-tlt-train-add-aug"], [72, "cmdoption-tlt-train-class-names"], [72, "cmdoption-tlt-train-d"], [72, "cmdoption-tlt-train-dataset-catalog"], [72, "cmdoption-tlt-train-dataset-dir"], [72, "cmdoption-tlt-train-dataset-file"], [72, "cmdoption-tlt-train-dataset-name"], [72, "cmdoption-tlt-train-delimiter"], [72, "cmdoption-tlt-train-early-stopping"], [72, "cmdoption-tlt-train-epochs"], [72, "cmdoption-tlt-train-f"], [72, "cmdoption-tlt-train-hostfile"], [72, "cmdoption-tlt-train-init-checkpoints"], [72, "cmdoption-tlt-train-ipex_optimize"], [72, "cmdoption-tlt-train-lr-decay"], [72, "cmdoption-tlt-train-model-name"], [72, "cmdoption-tlt-train-nnodes"], [72, "cmdoption-tlt-train-nproc_per_node"], [72, "cmdoption-tlt-train-output-dir"], [72, "cmdoption-tlt-train-use-horovod"]]}})