Search.setIndex({"docnames": ["DATASETS", "GetStarted", "Legal", "Models", "_autosummary/tlt.datasets.dataset.BaseDataset", "_autosummary/tlt.datasets.hf_dataset.HFDataset", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "_autosummary/tlt.datasets.tf_dataset.TFDataset", "_autosummary/tlt.models.hf_model.HFModel", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.get_inc_config", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.get_inc_config", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.get_inc_config", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.get_inc_config", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.get_inc_config", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.get_inc_config", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.get_inc_config", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "_autosummary/tlt.models.model.BaseModel", "_autosummary/tlt.models.pytorch_model.PyTorchModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.write_inc_config_file", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.write_inc_config_file", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.write_inc_config_file", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.write_inc_config_file", "_autosummary/tlt.models.tf_model.TFModel", "api", "cli", "distributed", "docbuild", "examples/README", "examples/cli/README", "examples/cli/image_classification", "examples/cli/text_classification", "examples/examples", "index", "methods", "notebooks/Medical_Imaging_Classification", "notebooks/README", "notebooks/Remote_Sensing_Image_Scene_Classification", "notebooks/TLT_PyTorch_Anomly_Detection", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning", "notebooks/TLT_TF_Image_Classification_Transfer_Learning", "notebooks/TLT_TF_Text_Classification_Transfer_Learning", "notebooks/setup", "tlt/distributed/README"], "filenames": ["DATASETS.rst", "GetStarted.rst", "Legal.rst", "Models.rst", "_autosummary/tlt.datasets.dataset.BaseDataset.rst", "_autosummary/tlt.datasets.hf_dataset.HFDataset.rst", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.rst", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.rst", "_autosummary/tlt.datasets.tf_dataset.TFDataset.rst", "_autosummary/tlt.models.hf_model.HFModel.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.get_inc_config.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.get_inc_config.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.get_inc_config.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.get_inc_config.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.get_inc_config.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.get_inc_config.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.get_inc_config.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train.rst", "_autosummary/tlt.models.model.BaseModel.rst", "_autosummary/tlt.models.pytorch_model.PyTorchModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.write_inc_config_file.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.write_inc_config_file.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.write_inc_config_file.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.write_inc_config_file.rst", "_autosummary/tlt.models.tf_model.TFModel.rst", "api.rst", "cli.rst", "distributed.rst", "docbuild.rst", "examples/README.rst", "examples/cli/README.rst", "examples/cli/image_classification.rst", "examples/cli/text_classification.rst", "examples/examples.rst", "index.rst", "methods.rst", "notebooks/Medical_Imaging_Classification.nblink", "notebooks/README.rst", "notebooks/Remote_Sensing_Image_Scene_Classification.nblink", "notebooks/TLT_PyTorch_Anomly_Detection.nblink", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Text_Classification_Transfer_Learning.nblink", "notebooks/setup.rst", "tlt/distributed/README.rst"], "titles": ["Datasets", "Get Started", "Legal Information", "Intel\u00ae Transfer Learning Tool Supported Models", "tlt.datasets.dataset.BaseDataset", "tlt.datasets.hf_dataset.HFDataset", "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "tlt.datasets.pytorch_dataset.PyTorchDataset", "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "tlt.datasets.tf_dataset.TFDataset", "tlt.models.hf_model.HFModel", "tlt.models.image_classification.image_classification_model.ImageClassificationModel", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.get_inc_config", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.get_inc_config", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.get_inc_config", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.get_inc_config", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.get_inc_config", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.get_inc_config", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.get_inc_config", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "tlt.models.model.BaseModel", "tlt.models.pytorch_model.PyTorchModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.write_inc_config_file", "tlt.models.text_classification.text_classification_model.TextClassificationModel", "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "tlt.models.text_classification.text_classification_model.TextClassificationModel.write_inc_config_file", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.write_inc_config_file", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.write_inc_config_file", "tlt.models.tf_model.TFModel", "API Reference", "CLI Reference", "Distributed Training", "Building Documentation", "Examples", "Beyond Get Started CLI Example", "Image Classification Intel\u00ae Transfer Learning Tool CLI Example", "Text Classification Intel\u00ae Transfer Learning Tool CLI Example", "Examples", "What is Intel\u00ae Transfer Learning Tool", "Image Classification Methods", "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Intel\u00ae Transfer Learning Tool API Notebook Examples", "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool", "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API", "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Environment Setup and Running the Notebooks", "Distributed Training"], "terms": {"thi": [0, 1, 2, 12, 15, 26, 30, 42, 46, 51, 59, 67, 68, 69, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86], "i": [0, 1, 2, 7, 8, 12, 15, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 50, 51, 52, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85, 86], "comprehens": [0, 80], "list": [0, 1, 12, 15, 26, 30, 38, 42, 46, 51, 59, 66, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85], "public": [0, 2, 68, 75, 80, 81, 83, 86], "us": [0, 2, 4, 7, 8, 12, 15, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 74, 75, 78, 85, 86], "repositori": [0, 73, 82, 84], "name": [0, 1, 2, 3, 7, 8, 12, 15, 30, 34, 46, 51, 66, 67, 68, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 86], "link": [0, 75, 77, 78, 79, 82], "sourc": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 31, 34, 35, 38, 39, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 65, 66, 69, 75], "framework": [0, 1, 3, 18, 19, 47, 48, 53, 65, 66, 71, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85], "case": [0, 1, 3, 66, 67, 71, 75, 78, 81, 82, 83, 84], "ag": 0, "new": [0, 68, 71, 72, 73, 75, 77, 79, 81, 82, 83, 84, 86], "hug": [0, 3, 5, 13, 18, 49, 51, 57, 66, 75, 82, 84], "face": [0, 3, 5, 13, 18, 49, 51, 57, 66, 75, 82, 84], "pytorch": [0, 1, 3, 7, 11, 27, 30, 31, 34, 46, 48, 49, 51, 66, 67, 71, 73, 75, 78], "text": [0, 12, 13, 14, 15, 16, 49, 51, 53, 57, 59, 61, 63, 67, 70, 71, 74, 75, 78], "classif": [0, 1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 23, 26, 27, 30, 31, 34, 35, 38, 39, 42, 43, 46, 49, 51, 53, 57, 59, 61, 63, 67, 70, 71, 74, 75, 78], "tfd": 0, "tensorflow": [0, 1, 3, 8, 9, 15, 16, 57, 66, 67, 71, 72, 73, 75, 78, 81], "food101": [0, 81], "torchvis": [0, 3, 10, 30, 34, 43, 46, 66, 67, 75, 80], "imag": [0, 1, 6, 7, 8, 9, 10, 19, 23, 26, 27, 30, 31, 34, 35, 38, 39, 42, 43, 46, 70, 71, 74, 75, 78, 84], "sm": [0, 73, 82, 84], "spam": [0, 73, 82, 84], "collect": [0, 73, 77, 82, 84], "tf": [0, 15, 17, 26, 35, 39, 42, 61, 65, 66, 77, 79, 83, 84], "flower": [0, 1, 71, 72, 81, 83], "cat": 0, "v": 0, "dog": 0, "country211": [0, 81], "dtd": [0, 81], "fgvcaircraft": [0, 81], "renderedsst2": [0, 81], "rock": 0, "paper": 0, "scissor": 0, "rotten_tomato": [0, 73, 82], "tweetev": 0, "cifar10": [0, 81], "imdb": [0, 73, 82], "review": 0, "glue": [0, 73, 84], "sst2": [0, 73, 82, 84], "cola": [0, 73, 84], "colorect": [0, 78], "histologi": [0, 78], "resisc45": [0, 79], "cdd": 0, "cesm": 0, "squad": 0, "mvtec": [0, 80], "anomali": [0, 78], "detect": [0, 78], "guid": [1, 69, 71, 75, 85], "walk": [1, 71, 75], "you": [1, 2, 12, 66, 68, 69, 71, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86], "through": [1, 71, 75], "coupl": [1, 75], "exampl": [1, 2, 12, 15, 26, 30, 42, 46, 51, 59, 66, 67, 69, 75, 77, 79, 80, 81, 82, 83, 84, 85], "show": [1, 66, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84], "approach": [1, 75], "recommend": [1, 26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "hardwar": [1, 75, 81, 82, 83, 84], "precis": [1, 26, 38, 42, 59, 63, 71, 75, 77, 79, 80, 81, 82, 83, 84], "4th": 1, "gen": 1, "xeon": [1, 26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "scalabl": 1, "perform": [1, 2, 21, 25, 26, 29, 33, 37, 38, 41, 42, 45, 50, 54, 58, 59, 62, 63, 67, 75, 77, 79, 80, 81, 82, 83, 84, 85], "processor": [1, 26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "bf16": 1, "1st": 1, "2nd": 1, "3rd": 1, "fp32": [1, 71, 75], "softwar": 1, "linux": 1, "valid": [1, 7, 8, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 51, 54, 59, 63, 66, 67, 77, 79, 80, 81, 82, 83, 84], "ubuntu": [1, 85], "20": [1, 80, 81, 83, 85], "04": [1, 85], "22": [1, 71], "lt": 1, "python": [1, 69, 70, 74, 75], "3": [1, 66, 71, 85], "8": [1, 3, 85], "9": [1, 85], "10": [1, 67, 71, 77, 79, 80, 81, 82, 84, 85], "pip": [1, 69, 85], "conda": [1, 85], "virtualenv": [1, 69, 85], "git": [1, 85], "onli": [1, 7, 8, 66, 68, 73, 77, 79, 80, 82, 84, 85, 86], "advanc": 1, "depend": [1, 66, 69, 73, 78, 85], "packag": [1, 73], "sudo": [1, 69], "apt": [1, 69], "build": [1, 75], "essenti": 1, "python3": [1, 69, 85], "dev": 1, "libgl1": 1, "libglib2": 1, "0": [1, 2, 7, 10, 12, 13, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 69, 71, 73, 77, 79, 80, 81, 82, 83, 84], "creat": [1, 2, 20, 24, 28, 32, 36, 40, 44, 66, 67, 68, 71, 72, 73, 75, 77, 79, 81, 82, 83, 84, 86], "activ": [1, 30, 34, 46, 66, 69, 85], "virtual": 1, "environ": [1, 73, 77, 79, 80, 81, 82, 83, 84], "we": [1, 71, 77, 79, 80, 81, 82, 83, 84], "encourag": 1, "consist": 1, "manag": 1, "There": [1, 80], "ar": [1, 2, 7, 8, 12, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 52, 59, 60, 63, 64, 66, 67, 68, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "two": [1, 12, 15, 26, 30, 42, 46, 51, 59, 66, 68, 73, 77, 79, 80, 81, 82, 83, 84, 86], "wai": [1, 66, 80], "do": [1, 68, 80, 81, 82, 83, 84, 86], "p": [1, 68, 71, 72, 73, 80, 85, 86], "tlt_dev_venv": [1, 69], "bin": [1, 69], "b": [1, 80], "Or": [1, 66], "basic": 1, "instruct": [1, 68, 73, 75, 78, 80, 81, 82, 83, 84, 85, 86], "unless": [1, 80], "plan": 1, "make": [1, 26, 38, 42, 59, 63, 68, 69, 71, 73, 75, 77, 79, 82, 83, 84, 86], "chang": [1, 68, 80, 81, 83, 86], "clone": [1, 85], "repo": [1, 67, 85], "http": [1, 2, 67, 69, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84], "github": [1, 67, 75, 81, 83], "com": [1, 67, 71, 72, 79, 80, 81, 83], "intelai": 1, "cd": [1, 68, 85, 86], "Then": [1, 81, 83], "either": [1, 66, 69, 73, 75, 82, 84], "an": [1, 2, 6, 9, 10, 12, 20, 24, 26, 28, 32, 36, 38, 40, 42, 44, 50, 52, 58, 60, 62, 64, 66, 67, 68, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86], "edit": [1, 68, 69, 86], "avoid": [1, 2], "rebuild": 1, "after": [1, 67, 71, 72, 73, 75, 80, 81, 83, 84], "each": [1, 7, 8, 12, 15, 26, 30, 34, 38, 42, 46, 51, 59, 63, 66, 67, 71, 72, 73, 77, 79, 81, 82, 83, 84], "prefer": 1, "wheel": 1, "setup": [1, 69, 78], "py": 1, "bdist_wheel": 1, "dist": 1, "intel_transfer_learning_tool": 1, "4": [1, 3, 66, 71, 73], "py3": 1, "none": [1, 4, 7, 8, 9, 12, 15, 21, 22, 23, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 41, 42, 45, 46, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 71, 77, 79, 80, 82, 83, 84], "ani": [1, 2, 68, 80, 81, 82, 83, 84, 86], "whl": 1, "addit": [1, 26, 30, 42, 46, 51, 59, 66, 75, 77, 79, 81, 82, 83, 84], "featur": [1, 26, 42, 75, 77, 79, 81, 82, 84], "specif": [1, 2], "For": [1, 2, 7, 8, 12, 15, 67, 69, 71, 80, 81, 82, 83, 84], "distribut": [1, 13, 26, 30, 34, 38, 42, 46, 51, 59, 63, 67], "multinod": [1, 68, 75, 86], "train": [1, 4, 7, 8, 9, 10, 13, 16, 20, 21, 24, 25, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 50, 54, 58, 62, 66, 72, 73, 75, 77, 79, 82, 84], "follow": [1, 71, 73, 77, 79, 80, 81, 82, 83, 84, 85], "verifi": [1, 68, 86], "your": [1, 2, 68, 71, 75, 77, 79, 80, 85, 86], "wa": [1, 77, 79, 80, 81, 82, 83, 84], "success": 1, "command": [1, 67, 68, 69, 70, 71, 73, 74, 75, 86], "which": [1, 12, 15, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 66, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84], "displai": [1, 81, 82, 83, 84], "help": [1, 26, 30, 42, 46, 51, 59, 71, 77, 79, 80, 81, 82, 83, 84], "inform": [1, 66, 67, 71, 75, 77, 79, 81, 82, 83, 84], "about": [1, 66, 67, 77, 79, 81, 82, 83, 84], "tlt": [1, 66, 69, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84], "prepar": 1, "dataset": [1, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 51, 52, 54, 55, 56, 59, 60, 63, 64, 67, 71, 75, 85], "The": [1, 7, 8, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 54, 58, 59, 62, 63, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 81, 82, 83, 84, 85, 86], "can": [1, 7, 8, 12, 15, 26, 30, 38, 42, 46, 47, 49, 51, 57, 59, 61, 63, 66, 67, 69, 71, 72, 75, 77, 79, 80, 81, 82, 83, 84, 85], "from": [1, 9, 10, 12, 13, 15, 16, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 52, 57, 59, 60, 63, 64, 66, 67, 69, 71, 75, 77, 79, 82, 84, 85], "exist": [1, 7, 8, 52, 60, 64, 66, 68, 75, 81, 82, 83, 84, 86], "catalog": [1, 9, 10, 13, 16, 66, 67, 77, 79], "custom": [1, 7, 8, 12, 15, 21, 25, 29, 33, 35, 37, 41, 45, 54, 66, 67, 75, 77, 79, 80, 82, 84], "have": [1, 68, 73, 77, 79, 80, 81, 82, 83, 84, 85, 86], "machin": [1, 69, 73, 82, 84], "": [1, 2, 3, 12, 15, 21, 25, 29, 33, 37, 41, 45, 54, 66, 67, 73, 77, 79, 80, 82, 83, 84], "option": [1, 7, 8, 12, 15, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 51, 54, 59, 63, 66, 67, 85], "dir": [1, 52, 60, 64, 67, 68, 71, 72, 73, 86], "directori": [1, 7, 8, 12, 15, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 52, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85, 86], "download": [1, 10, 51, 66, 67, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85], "dataset_dir": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 66, 67, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85], "tmp": [1, 66, 67, 71, 72, 73], "mkdir": [1, 71, 72, 73, 85], "extract": [1, 71, 72, 73, 81, 82, 83, 84], "sure": [1, 68, 71, 86], "https_proxi": 1, "set": [1, 26, 30, 34, 38, 42, 46, 51, 52, 59, 60, 63, 64, 66, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85], "need": [1, 66, 69, 71, 81, 82, 84], "wget": [1, 71, 72, 73], "storag": [1, 71, 72, 81, 83], "googleapi": [1, 71, 72, 81, 83], "org": [1, 71, 72, 73, 77, 79, 81, 82, 83, 84], "example_imag": [1, 71, 72, 81, 83], "flower_photo": [1, 66, 71, 72, 81, 83], "tgz": [1, 71, 72, 81, 83], "tar": [1, 71, 72, 80], "xzf": [1, 71, 72], "c": [1, 71, 72, 77, 81, 84], "folder": [1, 7, 8, 12, 15, 52, 60, 64, 67, 71, 72, 77, 79, 81, 83, 85], "At": [1, 12, 15], "point": [1, 26, 38, 42, 59, 63, 71, 77, 79, 81, 82, 83, 84], "should": [1, 7, 8, 12, 15, 26, 30, 42, 46, 51, 59, 66, 67, 68, 69, 71, 72, 77, 79, 80, 81, 82, 83, 84, 86], "subfold": [1, 7, 8, 66, 72, 81, 83], "daisi": [1, 66, 72, 81, 83], "dandelion": [1, 66, 72, 81, 83], "rose": [1, 66, 72, 81, 83], "sunflow": [1, 66, 72, 81, 83], "tulip": [1, 66, 72, 81, 83], "With": [1, 77, 79, 81, 82, 83, 84], "ai": [1, 2, 75], "model": [1, 7, 8, 12, 15, 72, 73, 75, 85], "bash": [1, 70, 74, 75], "prompt": [1, 68, 75, 86], "call": [1, 26, 30, 34, 38, 42, 46, 59, 63, 68, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 84, 86], "script": [1, 2, 75], "both": [1, 26, 38, 42, 59, 63, 77, 79, 80, 82, 83, 84], "provid": [1, 2, 12, 15, 26, 30, 34, 38, 42, 46, 51, 59, 63, 66, 67, 69, 73, 75, 77, 79, 81, 82, 83, 84], "same": [1, 71, 77, 79, 80, 81, 82, 83, 84], "opportun": 1, "evalu": [1, 4, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 51, 52, 54, 59, 60, 63, 64, 67, 71, 72, 73, 75, 81, 82, 83, 84], "optim": [1, 23, 30, 31, 34, 35, 46, 49, 51, 61, 66, 75, 80, 81, 82, 83, 84], "benchmark": [1, 2, 73, 75, 79, 81, 83], "program": [1, 75], "experi": 1, "ll": 1, "knowledg": [1, 75, 77, 79], "choos": [1, 81], "work": [1, 66, 71, 81, 82, 83, 84], "best": [1, 71, 80], "let": [1, 75, 81, 83], "continu": [1, 71, 77, 79, 81, 82, 83, 84], "previou": [1, 77, 79, 81, 82, 83, 84], "where": [1, 7, 8, 12, 15, 52, 60, 64, 66, 67, 71, 73, 82, 84], "classifi": [1, 12, 15, 66, 73, 82, 84], "identifi": 1, "differ": [1, 38, 77, 79, 80, 82, 83], "type": [1, 26, 38, 42, 52, 59, 60, 63, 64, 66, 68, 71, 77, 79, 80, 82, 83, 84, 86], "see": [1, 66, 68, 71, 75, 77, 79, 81, 82, 83, 84, 85, 86], "all": [1, 2, 12, 15, 66, 68, 69, 80, 81, 82, 83, 84, 86], "avail": [1, 66, 67, 77, 79, 80, 81, 82, 83, 84, 85], "image_classif": [1, 66, 71, 77, 79, 81, 83], "In": [1, 71, 73, 77, 79, 80, 81, 82, 83, 84], "resnet50v1": [1, 71], "5": [1, 51, 66, 71, 72], "alreadi": [1, 21, 25, 29, 33, 37, 41, 45, 50, 52, 54, 58, 60, 62, 64, 67, 71, 72, 75, 80, 81, 82, 83, 84], "write": [1, 51, 52, 59, 60, 63, 64, 67, 68, 82, 84, 86], "specifi": [1, 8, 12, 15, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 50, 51, 52, 55, 58, 59, 60, 62, 63, 64, 67, 71, 73, 77, 79, 80, 81, 82, 83, 84], "output": [1, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 52, 54, 58, 59, 60, 62, 63, 64, 67, 69, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85], "f": [1, 67, 68, 71, 72, 73, 77, 81, 82, 83, 84, 86], "resnet_v1_50": [1, 3, 71, 72, 77, 79, 83], "epoch": [1, 22, 26, 30, 34, 38, 42, 46, 51, 55, 59, 63, 67, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84], "1": [1, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 51, 52, 55, 59, 60, 63, 64, 67, 69, 71, 72, 73], "found": [1, 12, 15, 50, 58, 62, 66, 67, 71, 81, 84], "3670": [1, 66, 71], "file": [1, 12, 15, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 52, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 73, 77, 79, 80, 81, 82, 83, 84, 86], "belong": [1, 66, 71, 72], "class": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 27, 30, 31, 34, 35, 38, 39, 42, 43, 46, 47, 48, 49, 53, 57, 61, 63, 65, 67, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84], "sequenti": [1, 66, 71], "_________________________________________________________________": [1, 71], "layer": [1, 26, 30, 34, 42, 46, 51, 59, 66, 71, 75, 77, 79, 80, 81, 82, 83, 84], "shape": [1, 66, 71], "param": [1, 71], "keras_lay": [1, 71], "keraslay": [1, 71], "2048": [1, 71], "23561152": [1, 71], "dens": [1, 26, 30, 34, 42, 46, 51, 59, 66, 71, 77, 79, 81, 82, 83, 84], "10245": [1, 71], "total": [1, 71], "23": [1, 71], "571": [1, 71], "397": [1, 71], "trainabl": [1, 71, 75], "245": [1, 71], "non": [1, 51, 59, 63, 71, 80], "561": [1, 71], "152": [1, 71], "checkpoint": [1, 26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 71, 75, 80, 81, 82, 83, 84], "resnet_v1_50_checkpoint": [1, 71], "86": [1, 71], "24": [1, 71], "248m": [1, 71], "loss": [1, 20, 23, 24, 26, 28, 30, 31, 32, 34, 35, 36, 38, 40, 42, 44, 46, 49, 51, 52, 59, 60, 61, 63, 64, 66, 67, 71, 77, 79, 81, 82, 83, 84], "4600": [1, 71], "acc": [1, 71], "8438": [1, 71], "save": [1, 21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 62, 67, 71, 75, 77, 79, 80, 81, 83, 85], "complet": [1, 2, 67, 71, 81, 82], "accuraci": [1, 2, 20, 24, 26, 28, 30, 32, 36, 40, 42, 44, 46, 51, 52, 59, 60, 64, 67, 71, 77, 79, 80, 81, 82, 83, 84], "valu": [1, 12, 15, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 69, 71, 73, 82, 84], "print": [1, 66, 71, 77, 79, 80, 81, 82, 83, 84], "toward": [1, 71], "end": [1, 26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 68, 71, 77, 79, 80, 81, 82, 83, 84, 86], "consol": [1, 71], "export": [1, 67, 72, 73, 75, 85], "number": [1, 7, 12, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 51, 52, 59, 60, 63, 64, 67, 71, 77, 79, 81, 82, 83, 84], "That": 1, "As": 1, "also": [1, 71, 77, 79, 80, 81, 82, 83, 84], "beyond": [1, 70, 74], "more": [1, 12, 15, 63, 71, 73, 77, 79, 81, 82, 83, 84], "includ": [1, 66, 71, 82], "quantiz": [1, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 75], "read": [1, 68, 82, 84, 86], "refer": [1, 77, 79, 80, 81, 82, 83, 84], "find": 1, "our": [1, 73, 77, 79, 80, 81, 82, 83, 84], "int8": [1, 71, 75], "improv": [1, 75], "infer": [1, 12, 71, 75, 81, 82, 83, 84], "jupyt": [1, 70, 74, 75, 78, 85], "notebook": [1, 70, 74, 75, 77, 79, 80, 81, 82, 83, 84], "detail": [1, 71, 79], "import": [1, 66, 68, 86], "dataset_factori": [1, 66, 77, 79, 80, 81, 82, 83, 84], "model_factori": [1, 66, 77, 79, 80, 81, 82, 83, 84], "util": [1, 77, 79, 80, 81, 82, 83, 84], "frameworktyp": [1, 18, 19, 47, 48, 53, 65, 66, 77, 79], "usecasetyp": [1, 18, 19, 47, 48, 53, 65, 66, 77, 79], "o": [1, 77, 79, 80, 81, 82, 83, 84], "ha": [1, 12, 15, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 54, 58, 59, 62, 63, 67, 71, 72, 73, 75, 82, 84], "been": [1, 51, 59, 63, 67, 71, 75, 82, 84], "els": [1, 68, 77, 79, 80, 81, 82, 83, 84, 86], "path": [1, 26, 30, 34, 38, 42, 46, 50, 51, 52, 58, 59, 60, 62, 63, 64, 66, 67, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85], "join": [1, 77, 79, 80, 81, 82, 83, 84], "home": [1, 68, 77, 79, 80, 81, 82, 83, 84, 86], "output_dir": [1, 21, 22, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 52, 54, 55, 58, 59, 60, 62, 63, 64, 67, 72, 73, 77, 79, 80, 81, 82, 83, 84, 85], "get_model": [1, 66, 77, 79, 80, 81, 82, 83, 84], "model_nam": [1, 18, 19, 23, 27, 31, 35, 39, 43, 47, 48, 49, 53, 57, 61, 65, 66, 67, 73, 77, 79, 80, 81, 82, 83, 84], "load": [1, 7, 12, 15, 26, 30, 34, 38, 42, 46, 51, 59, 63, 66, 67, 73, 81, 82, 83, 84], "preprocess": [1, 51, 77, 79, 80, 81, 82, 83, 84], "load_dataset": [1, 66, 79, 80, 81, 82, 83, 84], "use_cas": [1, 18, 19, 47, 48, 53, 65, 66, 77, 79, 80, 81, 82, 83, 84], "image_s": [1, 19, 66, 77, 79, 80, 81, 83], "batch_siz": [1, 52, 56, 60, 64, 67, 77, 79, 80, 81, 82, 83, 84], "32": [1, 26, 38, 42, 59, 63, 67, 77, 79, 80, 81, 82, 83, 84], "shuffle_split": [1, 77, 79, 80, 81, 82, 83, 84], "train_pct": [1, 77, 79, 80, 81, 82, 83, 84], "75": [1, 80, 81, 82, 83, 84], "val_pct": [1, 77, 79, 80, 81, 82, 83, 84], "25": [1, 71, 80, 81, 82, 83, 84], "metric": [1, 77, 79, 80, 81, 82, 83, 84], "metric_nam": [1, 84], "metric_valu": [1, 84], "zip": [1, 73, 82, 84], "_model": [1, 84], "metrics_nam": [1, 84], "format": [1, 72, 73, 77, 79, 80, 81, 82, 83, 84], "saved_model_dir": [1, 77, 79, 81, 82, 83, 84], "neural": [1, 21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 60, 62, 64, 67, 71, 75, 80, 81, 82, 83, 84], "compressor": [1, 21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 60, 62, 64, 67, 71, 75, 81, 82, 83, 84], "config": [1, 20, 21, 24, 25, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 50, 52, 54, 58, 60, 62, 64, 66, 67, 81, 82, 83, 84], "inc_config_fil": [1, 82, 84], "inc_config": [1, 67, 82, 84], "yaml": [1, 50, 52, 58, 60, 62, 64, 67, 82, 84], "write_inc_config_fil": [1, 82, 84], "512": [1, 26, 30, 42, 46, 51, 59, 71, 77, 79, 81, 82, 83, 84], "overwrit": [1, 52, 56, 60, 64, 82, 84], "true": [1, 7, 8, 9, 10, 12, 13, 15, 16, 22, 26, 30, 34, 38, 42, 46, 51, 55, 59, 63, 66, 67, 77, 79, 80, 81, 82, 83, 84], "accuracy_criterion_rel": [1, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 81, 82, 84], "01": [1, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 71, 81, 82, 84], "exit_policy_timeout": [1, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 81, 82, 84], "exit_policy_max_tri": [1, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 81, 82, 84], "tuning_workspac": [1, 52, 60, 64, 82, 84], "nc_workspac": [1, 52, 60, 64, 71, 82, 84], "quantization_output": 1, "quantized_model": [1, 81, 82, 83, 84], "graph": [1, 67], "optimization_output": 1, "optimized_model": 1, "optimize_graph": 1, "document": [1, 2, 66, 67, 73, 75, 77, 79, 80, 81, 82, 83, 84], "develop": [1, 69, 85], "deploy": [1, 75], "sampl": [1, 83], "ve": 1, "present": [1, 68, 86], "how": [1, 68, 72, 73, 77, 79, 80, 81, 82, 83, 84, 86], "execut": [1, 77, 79], "workflow": [1, 71, 75, 77, 79, 80], "trainng": 1, "well": [1, 68, 75, 82, 84, 86], "some": [1, 70, 74, 80], "intel": [2, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 54, 58, 59, 60, 62, 63, 64, 67, 68, 70, 71, 74, 86], "transfer": [2, 47, 68, 69, 70, 71, 74, 86], "learn": [2, 26, 30, 34, 38, 42, 46, 47, 51, 59, 63, 67, 68, 69, 70, 71, 74, 86], "tool": [2, 68, 69, 70, 71, 74, 86], "intend": 2, "platform": [2, 26, 38, 42, 59, 63, 73, 75, 77, 79, 82, 83, 84], "visit": 2, "www": [2, 73, 79, 81, 82, 84], "blog": 2, "commit": 2, "respect": 2, "human": [2, 73, 82, 84], "right": [2, 73, 82, 84], "complic": 2, "abus": 2, "polici": [2, 71, 81, 82, 83, 84], "reflect": 2, "global": 2, "principl": 2, "accordingli": [2, 7, 8], "access": 2, "materi": 2, "agre": 2, "product": 2, "applic": [2, 23, 75, 82, 83, 84], "caus": 2, "contribut": 2, "violat": 2, "internation": 2, "recogn": 2, "code": [2, 69, 70, 74, 75], "under": [2, 68, 80, 86], "apach": 2, "version": 2, "2": [2, 3, 63, 72, 73], "To": [2, 68, 69, 77, 79, 80, 81, 83, 86], "extent": 2, "referenc": 2, "site": 2, "those": [2, 26, 38, 42, 59, 63, 66], "third": [2, 26, 38, 42, 59, 63, 66, 77, 79, 80, 82, 83, 84], "parti": [2, 66], "indic": [2, 12, 15], "data": [2, 7, 8, 12, 15, 21, 25, 26, 29, 33, 37, 38, 41, 42, 45, 54, 59, 63, 66, 67, 72, 73, 77, 79, 80, 81, 82, 83, 84], "doe": [2, 7, 8, 12, 26, 38, 42, 59, 63, 77, 79, 80, 82, 83, 84], "warrant": 2, "qualiti": [2, 80], "By": [2, 77, 79], "term": [2, 82, 84], "associ": [2, 73, 82, 84], "compli": 2, "expressli": 2, "adequaci": 2, "liabl": 2, "error": [2, 68, 81, 83, 86], "omiss": 2, "defect": [2, 80], "relianc": 2, "liabil": 2, "damag": 2, "relat": [2, 75], "other": [2, 26, 38, 42, 59, 63, 69, 71, 77, 79, 80, 82, 83, 84], "brand": 2, "mai": [2, 68, 72, 73, 81, 82, 83, 84, 86], "claim": 2, "properti": [2, 82, 84], "trademark": [2, 75], "hub": [3, 26, 27, 39, 42, 66, 75, 77, 79, 80, 81, 84], "alexnet": [3, 71], "convnext_bas": [3, 71], "convnext_larg": [3, 71], "convnext_smal": [3, 71], "convnext_tini": [3, 71], "densenet121": [3, 71], "densenet161": [3, 71], "densenet169": [3, 71], "densenet201": [3, 71], "efficientnetv2": 3, "b0": 3, "b1": 3, "b2": 3, "b3": 3, "efficientnet_b0": [3, 66, 67, 71, 81], "efficientnet_b1": [3, 71], "efficientnet_b2": [3, 71], "efficientnet_b3": [3, 71], "efficientnet_b4": [3, 71], "efficientnet_b5": 3, "efficientnet_b6": 3, "efficientnet_b7": 3, "googlenet": 3, "inception_v3": 3, "mnasnet0_5": 3, "mnasnet1_0": 3, "mobilenet_v2": 3, "mobilenet_v2_100_224": 3, "mobilenet_v3_larg": 3, "mobilenet_v3_smal": 3, "nasnet_larg": 3, "proxyless_cpu": 3, "regnet_x_16gf": 3, "regnet_x_1_6gf": 3, "regnet_x_32gf": 3, "regnet_x_3_2gf": 3, "regnet_x_400mf": 3, "regnet_x_800mf": 3, "regnet_x_8gf": 3, "regnet_y_16gf": 3, "regnet_y_1_6gf": 3, "regnet_y_32gf": 3, "regnet_y_3_2gf": 3, "regnet_y_400mf": 3, "regnet_y_800mf": 3, "regnet_y_8gf": 3, "resnet101": 3, "resnet152": 3, "resnet18": [3, 80], "resnet18_ssl": 3, "resnet18_swsl": 3, "resnet34": 3, "resnet50": [3, 80], "resnet50_ssl": 3, "resnet50_swsl": 3, "resnet_v2_101": 3, "resnet_v2_50": 3, "resnext101_32x16d_ssl": 3, "resnext101_32x16d_swsl": 3, "resnext101_32x16d_wsl": 3, "resnext101_32x32d_wsl": 3, "resnext101_32x48d_wsl": 3, "resnext101_32x4d_ssl": 3, "resnext101_32x4d_swsl": 3, "resnext101_32x8d": 3, "resnext101_32x8d_ssl": 3, "resnext101_32x8d_swsl": 3, "resnext101_32x8d_wsl": 3, "resnext50_32x4d": 3, "resnext50_32x4d_ssl": 3, "resnext50_32x4d_swsl": 3, "shufflenet_v2_x0_5": 3, "shufflenet_v2_x1_0": 3, "vgg11": 3, "vgg11_bn": 3, "vgg13": 3, "vgg13_bn": 3, "vgg16": 3, "vgg16_bn": 3, "vgg19": 3, "vgg19_bn": 3, "vit_b_16": 3, "vit_b_32": 3, "vit_l_16": 3, "vit_l_32": 3, "wide_resnet101_2": 3, "wide_resnet50_2": 3, "convnextbas": 3, "kera": [3, 23, 26, 38, 42, 66, 75, 83], "convnextlarg": 3, "convnextsmal": 3, "convnexttini": 3, "convnextxlarg": 3, "efficientnetv2b0": 3, "efficientnetv2b1": 3, "efficientnetv2b2": 3, "efficientnetv2b3": 3, "efficientnetv2l": 3, "efficientnetv2m": 3, "inceptionresnetv2": 3, "inceptionv3": 3, "mobilenet": 3, "mobilenetv2": 3, "nasnetlarg": 3, "nasnetmobil": 3, "resnet101v2": 3, "resnet152v2": 3, "resnet50v2": 3, "xception": 3, "bert": [3, 73, 82], "base": [3, 4, 5, 6, 11, 14, 17, 18, 19, 26, 30, 34, 42, 46, 47, 48, 51, 59, 65, 68, 77, 79, 80, 81, 82, 83, 84, 86], "uncas": [3, 73], "larg": [3, 73, 75, 80, 81, 83], "clinic": 3, "distilbert": 3, "googl": [3, 73, 84], "bert_uncased_l": [3, 73, 84], "10_h": [3, 73], "128_a": [3, 84], "256_a": [3, 73], "512_a": 3, "768_a": 3, "12": [3, 71], "12_h": 3, "2_h": [3, 84], "4_h": 3, "6_h": 3, "8_h": 3, "dataset_nam": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 66, 67, 72, 73, 77, 81, 82, 83, 84], "dataset_catalog": [4, 5, 6, 11, 14, 17, 66, 67, 77, 81, 82, 83, 84], "abstract": [4, 21, 22, 47, 55], "__init__": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 31, 35, 39, 43, 47, 48, 49, 53, 57, 61, 65], "constructor": [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 23, 27, 31, 35, 39, 43, 47, 48, 49, 53, 57, 61, 65], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 31, 35, 39, 43, 47, 48, 49, 53, 57, 61, 65, 73, 84], "attribut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 31, 35, 39, 43, 47, 48, 49, 53, 57, 61, 65, 66], "repres": [5, 11, 17, 18, 19, 23, 26, 27, 30, 31, 35, 39, 42, 43, 46, 48, 49, 51, 53, 57, 59, 61, 65, 77, 79, 81, 82, 83, 84], "num_work": [7, 10, 12, 13], "shuffle_fil": [7, 8, 9, 10, 12, 13, 15, 16, 26, 38, 42, 59, 63, 82, 84], "A": [7, 8, 12, 13, 15, 16, 20, 24, 28, 32, 36, 40, 44, 51, 52, 59, 60, 63, 64, 66, 67, 71, 73, 80], "note": [7, 8, 12, 15, 68, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 86], "expect": [7, 8, 12, 15, 20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 66, 72, 73, 82, 84], "organ": [7, 8, 66, 72, 81, 83], "contain": [7, 8, 12, 15, 51, 66, 67, 72, 77, 79, 81, 83], "jpg": [7, 8, 66, 72, 80, 81, 83], "label": [7, 8, 12, 15, 66, 72, 73, 80, 81, 82, 83, 84], "class_a": [7, 8, 12, 15, 66], "class_b": [7, 8, 12, 15, 66], "class_c": [7, 8, 66], "user": [7, 8, 66, 77, 79, 80], "defin": [7, 8, 30, 34, 46, 51, 59, 63, 80, 81, 82, 83, 84, 85], "split": [7, 8, 9, 10, 13, 16, 66, 75, 77, 79, 80, 81, 82, 83, 84], "test": [7, 8, 21, 25, 29, 33, 37, 41, 45, 54, 66, 68, 69, 77, 79, 81, 82, 83, 84, 86], "subset": [7, 8, 21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 51, 54, 59, 63, 77, 79, 80, 81, 82, 83, 84], "arrang": [7, 8, 80, 81], "accept": [7, 8, 80], "paramet": [7, 8, 12, 15, 20, 21, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 50, 51, 52, 54, 58, 59, 60, 62, 63, 64, 66], "str": [7, 8, 12, 15, 18, 19, 21, 23, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 77, 79, 80, 81, 82, 83, 84], "locat": [7, 8, 52, 60, 64, 66, 67, 68, 69, 71, 73, 79, 80, 86], "It": [7, 8, 26, 38, 42, 59, 63, 71, 73, 77, 79, 80, 82, 83, 84], "subdirectori": [7, 8, 81, 83], "If": [7, 8, 12, 15, 26, 30, 34, 38, 42, 46, 51, 52, 59, 60, 63, 64, 66, 67, 68, 69, 71, 73, 77, 79, 80, 81, 82, 83, 84, 85, 86], "given": [7, 8, 12, 15, 51, 66, 67, 68, 80, 81, 86], "int": [7, 8, 12, 15, 19, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 51, 52, 59, 60, 63, 64, 77, 79, 80, 81, 82, 83, 84], "process": [7, 20, 24, 28, 30, 32, 34, 36, 40, 44, 46, 51, 52, 60, 64, 67, 73, 75, 81, 82, 84], "default": [7, 8, 12, 15, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 51, 52, 59, 60, 63, 64, 66, 67, 68, 73, 77, 79, 80, 81, 82, 83, 84, 85, 86], "bool": [7, 8, 12, 15, 19, 26, 30, 34, 38, 42, 46, 51, 52, 59, 60, 63, 64, 66, 67, 77, 79, 80, 81, 82, 83, 84], "whether": [7, 8, 12, 15, 26, 38, 42, 52, 59, 60, 63, 64, 80], "shuffl": [7, 8, 12, 15, 26, 38, 42, 59, 63, 80], "rais": [7, 8, 12, 15, 20, 21, 24, 25, 26, 28, 29, 32, 33, 36, 37, 38, 40, 41, 42, 44, 45, 50, 51, 52, 54, 58, 59, 60, 62, 63, 64, 66], "filenotfounderror": [7, 8, 12, 15, 50, 58, 62], "color_mod": 8, "rgb": [8, 81], "seed": [8, 9, 15, 26, 30, 34, 38, 42, 46, 51, 52, 59, 60, 63, 64, 80], "kwarg": [8, 9, 10, 15, 16, 23, 26, 27, 31, 35, 38, 39, 42, 43, 49, 51, 56, 57, 59, 61, 63, 66], "color": [8, 80, 81, 83], "mode": [8, 67, 71], "greyscal": 8, "rgba": 8, "random": [8, 15, 52, 60, 64, 80], "as_supervis": 9, "csv_file_nam": [12, 15, 82, 84], "class_nam": [12, 15, 66, 67, 77, 79, 80, 81, 82, 83, 84], "column_nam": [12, 82], "label_map_func": [12, 15, 84], "callabl": [12, 15], "label_col": 12, "delimit": [12, 15, 67, 73, 82, 84], "header": [12, 15, 82, 84], "fals": [12, 13, 15, 26, 30, 34, 38, 42, 46, 51, 52, 56, 59, 60, 63, 64, 66, 77, 79, 80, 81, 82, 83, 84], "select_col": [12, 15, 82, 84], "exclude_col": [12, 15, 82, 84], "transform": [12, 15], "csv": [12, 15, 66, 67, 73, 82, 84], "column": [12, 15, 66, 73, 82, 84], "first": [12, 15, 26, 30, 34, 42, 46, 51, 59, 68, 73, 77, 79, 80, 81, 82, 83, 84, 86], "second": [12, 15, 20, 24, 26, 28, 30, 32, 36, 40, 42, 44, 46, 51, 52, 59, 60, 64, 67, 68, 71, 73, 77, 79, 80, 81, 82, 83, 84, 86], "sentenc": [12, 15, 66, 73, 82, 84], "comma": [12, 15, 67, 73, 82, 84], "separ": [12, 15, 67, 73, 82, 84], "look": [12, 15, 82, 84], "similar": [12, 15, 82, 84], "snippet": [12, 15], "below": [12, 15, 68, 72, 73, 77, 79, 80, 81, 82, 85, 86], "filter": [12, 15, 66, 67, 73, 80, 82, 84], "out": [12, 15, 75, 81, 82, 83, 84], "pars": [12, 15, 82, 84], "order": [12, 15], "must": [12, 80], "exactli": 12, "one": [12, 15, 71, 73, 77, 79, 80, 81, 82, 83, 84], "posit": 12, "correspond": 12, "argument": [12, 66, 69, 73, 77, 79], "assign": 12, "text_1": 12, "text_2": 12, "rest": [12, 81, 83], "function": [12, 15, 66, 73, 77, 79, 80, 81, 82, 83, 84], "map": [12, 15, 73, 81, 82, 83, 84], "across": [12, 15, 75], "appli": [12, 15, 26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 71, 77, 79, 80, 81, 82, 83, 84], "element": [12, 15], "string": [12, 15, 26, 38, 42, 52, 59, 60, 63, 64, 67, 73, 81, 82, 84], "instead": [12, 15, 67, 81, 82, 83, 84], "numer": [12, 15, 73, 81, 82, 83, 84], "index": [12, 82, 84], "integ": [12, 26, 30, 38, 42, 46, 51, 59, 63, 77, 79, 81, 82, 83, 84], "everi": 12, "uniqu": 12, "start": [12, 69, 70, 74, 80, 85], "charact": [12, 15, 73, 84], "row": [12, 15, 82, 84], "boolean": [12, 15, 26, 30, 34, 38, 42, 46, 51, 59, 63, 66, 67], "line": [12, 15, 75, 81, 83], "skip": [12, 15, 81, 82, 83, 84, 85], "sort": [12, 15, 66], "most": [12, 15], "exclud": [12, 15], "worker": 12, "pass": [12, 69, 71, 73, 80, 81, 82, 83, 84], "dataload": 12, "typeerror": [12, 15, 26, 38, 42, 51, 59, 63], "valueerror": [12, 15, 20, 21, 24, 25, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 51, 52, 54, 60, 64], "empti": [12, 15, 52, 60, 64, 85], "mismatch": 12, "than": [12, 63], "field": 15, "do_fine_tun": 19, "dropout_layer_r": [19, 53], "pretrain": [19, 23, 27, 35, 39, 43, 47, 49, 53, 57, 61, 65, 66, 75, 80, 81, 82, 83, 84], "50": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 71, 77, 79, 81], "inc": [20, 24, 28, 32, 36, 40, 44, 50, 52, 67, 81, 82, 83, 84], "post": [20, 21, 24, 25, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 50, 54, 58, 62, 67, 71, 82, 84], "float": [20, 24, 26, 28, 32, 36, 38, 40, 42, 44, 51, 52, 53, 59, 60, 63, 64, 77, 79, 80, 81, 82, 83, 84], "rel": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 81, 82, 84], "tune": [20, 24, 26, 28, 30, 32, 36, 40, 42, 44, 46, 49, 51, 52, 57, 59, 60, 61, 64, 67, 71, 77, 79, 80, 81, 83], "timeout": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 71, 81, 82, 83, 84], "finish": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 81, 82, 84], "when": [20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 51, 52, 59, 60, 63, 64, 66, 67, 71, 73, 77, 79, 80, 81, 82, 83, 84], "max_trial": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 81, 82, 84], "reach": [20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 51, 52, 59, 60, 63, 64, 67, 71, 77, 79, 81, 82, 83, 84], "mean": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 80, 81, 82, 84], "phase": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 81, 82, 84], "stop": [20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 51, 52, 59, 60, 63, 64, 67, 77, 79, 81, 82, 83, 84], "criterion": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 71, 81, 82, 84], "met": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 81, 82, 84], "maximum": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 81, 82, 84], "trial": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 67, 71, 81, 82, 83, 84], "within": [20, 24, 28, 32, 36, 40, 44, 52, 60, 64, 69, 80, 81, 82, 83, 84], "calibr": [21, 25, 29, 33, 37, 41, 45, 54], "its": [21, 25, 29, 33, 37, 41, 45, 54, 69, 75], "written": [21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 62, 71, 82, 84], "writabl": [21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 62], "imageclassificationdataset": [21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 54, 77, 79, 81, 82, 83, 84], "posttrainingquantconfig": [21, 25, 29, 33, 37, 41, 45, 54], "return": [21, 25, 26, 29, 30, 33, 34, 37, 38, 41, 42, 45, 46, 50, 51, 52, 54, 58, 59, 60, 62, 63, 64, 66, 77, 79, 80, 81, 82, 83, 84], "fileexistserror": [21, 25, 26, 29, 33, 37, 38, 41, 42, 45, 50, 52, 54, 58, 59, 60, 62, 63, 64], "compat": [21, 25, 29, 33, 37, 41, 45, 52, 54, 60, 64, 66], "basedataset": [22, 52, 55, 60, 64], "initial_checkpoint": [22, 26, 30, 34, 38, 42, 46, 51, 55, 59, 63, 77, 79, 80, 81, 82, 83, 84], "do_ev": [22, 26, 30, 34, 38, 42, 46, 51, 55, 59, 63, 67, 77, 79, 81, 82, 83, 84], "saved_model": [25, 37, 41, 58, 62, 66, 67, 71, 77, 79, 81, 82, 83, 84], "pb": [25, 37, 41, 58, 62, 66, 67, 71, 77, 79, 81, 82, 83, 84], "early_stop": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "lr_decai": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "enable_auto_mixed_precis": [26, 38, 42, 59, 63, 77, 79, 83, 84], "extra_lay": [26, 30, 42, 46, 51, 59, 77, 79, 81, 82, 83, 84], "hostfil": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 73], "nnode": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 73], "nproc_per_nod": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 73], "callback": [26, 38, 42], "time": [26, 30, 34, 42, 46, 67, 71, 75, 77, 79, 81, 82, 83, 84], "get": [26, 30, 34, 42, 46, 67, 68, 69, 70, 74, 85, 86], "extractor": [26, 42, 80], "add": [26, 30, 34, 42, 46, 67, 77, 79, 81, 83], "compil": [26, 38, 42, 77, 79, 81, 83], "initi": [26, 38, 42, 59, 63, 66], "weight": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 80, 81, 82, 83, 84], "befor": [26, 38, 42, 59, 63, 73, 75, 78], "writeabl": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 80, 81, 82, 83, 84], "latest": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "enabl": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "earli": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "converg": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "while": [26, 30, 34, 38, 42, 46, 51, 59, 63, 66, 67, 69, 77, 79, 80, 81, 82, 83, 84], "rate": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "decai": [26, 30, 34, 38, 42, 46, 51, 59, 63, 67, 77, 79, 81, 82, 83, 84], "auto": [26, 38, 42, 59, 63, 75, 77, 79, 82, 83, 84], "mix": [26, 38, 42, 59, 63, 71, 75, 77, 79, 80, 82, 83, 84], "16": [26, 38, 42, 59, 63, 77, 79, 81, 82, 83, 84], "bit": [26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "run": [26, 38, 42, 59, 63, 67, 68, 69, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86], "faster": [26, 38, 42, 59, 63, 75, 77, 79, 82, 83, 84], "less": [26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "memori": [26, 38, 42, 59, 63, 66, 77, 79, 80, 82, 83, 84], "support": [26, 38, 42, 59, 63, 66, 67, 73, 77, 79, 80, 81, 82, 83, 84], "bfloat16": [26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "fourth": [26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "gener": [26, 38, 42, 59, 63, 67, 69, 75, 77, 79, 80, 81, 82, 83, 84], "detriment": [26, 38, 42, 59, 63, 77, 79, 82, 83, 84], "automat": [26, 38, 42, 59, 63, 75, 77, 79, 81, 82, 83, 84], "disabl": [26, 38, 42, 59, 63, 77, 79, 83, 84], "reproduc": [26, 30, 34, 38, 42, 46, 51, 59, 63], "insert": [26, 30, 42, 46, 51, 59, 77, 79, 81, 82, 83, 84], "between": [26, 30, 42, 46, 51, 59, 77, 79, 80, 81, 82, 83, 84], "increas": [26, 30, 42, 46, 51, 59, 77, 79, 81, 82, 83, 84], "fine": [26, 30, 42, 46, 49, 51, 57, 59, 61, 67, 77, 79, 80, 81, 83], "tfhub": [26, 42, 59, 77, 79, 81, 82, 83, 84], "input": [26, 30, 42, 46, 51, 59, 66, 77, 79, 80, 81, 82, 83, 84], "size": [26, 30, 42, 46, 51, 52, 59, 60, 64, 67, 71, 75, 77, 79, 80, 81, 82, 83, 84], "1024": [26, 30, 42, 46, 51, 59, 77, 79, 81, 82, 83, 84], "neuron": [26, 30, 42, 46, 51, 59, 77, 79, 81, 82, 83, 84], "instanc": [26, 38, 42], "dure": [26, 38, 42, 51, 59, 63, 67, 73, 80], "histori": [26, 38, 42, 51, 59, 63, 71, 77, 79, 81, 82, 83, 84], "object": [26, 30, 34, 38, 42, 46, 52, 59, 60, 63, 64, 66, 77, 79, 80, 81, 82, 83, 84], "fit": [26, 38, 42, 51, 59, 63], "pt": [29, 33, 45, 50, 66, 67], "ipex_optim": [30, 34, 46, 51, 67, 82], "fulli": [30, 34, 46], "connect": [30, 34, 46], "linear": [30, 34, 46], "extens": [30, 34, 46, 51, 67, 75, 82], "ipex": [30, 34, 46, 67, 82], "flag": [30, 34, 46, 51, 71], "node": [30, 34, 46, 51, 67, 68, 73, 86], "spawn": [30, 34, 46, 51], "per": [30, 34, 46, 51, 67, 73], "runtimeerror": 38, "multi": [49, 73, 77, 79, 81, 83], "inc_config_path": [50, 54, 58, 62], "learning_r": 51, "1e": 51, "05": 51, "devic": 51, "cpu": [51, 75], "use_train": [51, 82], "force_download": 51, "textclassificationdataset": [51, 59, 63], "arrow_dataset": 51, "otherwis": [51, 59, 63], "entir": [51, 59, 63, 68, 86], "partit": [51, 59, 63], "done": [51, 71, 81, 82, 83], "trainer": [51, 82], "nativ": [51, 82, 85], "loop": [51, 82], "dictionari": [51, 66], "yet": [51, 66, 81, 83], "config_file_path": [52, 56, 60, 64], "resize_interpol": [52, 60, 64], "bicub": [52, 60, 64], "tuning_random_se": [52, 60, 64], "9527": [52, 60, 64], "arg": [52, 60, 64, 67], "destin": [52, 60, 64], "batch": [52, 60, 64, 67, 71, 75, 77, 79, 80, 81, 82, 83, 84], "interpol": [52, 60, 64, 80], "select": [52, 60, 64, 75, 77, 79, 80, 81, 83, 84], "bilinear": [52, 60, 64], "nearest": [52, 60, 64], "determinist": [52, 60, 64], "env": [52, 60, 64], "var": [52, 60, 64], "notimplementederror": [52, 60, 63, 64, 66], "hfcustomimageclassificationdataset": 52, "binari": [57, 59, 61, 63], "tfcustomimageclassificationdataset": [60, 64], "simplest": 66, "get_dataset": [66, 77, 81, 82, 83, 84], "themselv": 66, "tfcustomtextclassificationdataset": 66, "task": [66, 73, 82], "purpos": [66, 81, 82, 83, 84], "keyword": 66, "being": [66, 67, 72, 73, 80, 82, 84], "tf_dataset": [66, 67, 77, 83, 84], "cv": [66, 67], "huggingfac": [66, 67], "nlp": 66, "request": [66, 75, 80, 81], "tf_flower": [66, 72, 83], "rare": 66, "interact": 66, "directli": 66, "discov": 66, "load_model": [66, 77, 79, 80], "discoveri": 66, "inspect": 66, "get_supported_model": 66, "print_supported_model": [66, 77, 79, 81, 82, 83, 84], "model_hub": 66, "origin": [66, 77, 79, 80, 82, 84], "configur": [66, 73, 82, 84], "adam": 66, "torch": [66, 80, 81], "nn": 66, "crossentropyloss": 66, "further": [66, 75], "thei": [66, 68, 86], "amsgrad": 66, "want": [66, 68, 81, 82, 83, 84, 86], "my_model": 66, "relu": 66, "softmax": 66, "224": [66, 80, 81], "leaf": 66, "item": 66, "nameerror": 66, "unknown": 66, "miss": 66, "verbos": [66, 67, 77, 79, 80, 81, 82, 83, 84], "markdown": 66, "categor": 66, "result": [66, 68, 71, 81, 82, 83, 84, 86], "tabl": 66, "updat": [66, 82, 84], "Not": 66, "model_dir": 67, "requir": [67, 69, 75, 77, 78, 79, 85], "reload": 67, "blob": 67, "master": 67, "doc": [67, 69], "md": 67, "temporari": 67, "delet": 67, "previous": [67, 80], "try": [67, 69], "dataset_fil": [67, 73], "singl": [67, 80, 82, 84], "extra": 67, "tree": 67, "accuracy_criterion": 67, "allow": [67, 73, 77, 79, 81, 82, 83, 84], "max": [67, 71, 80, 81, 82, 83, 84], "workspac": [67, 82, 84], "deep": [67, 73, 75], "log": 67, "etc": [67, 77, 79, 81, 82, 83, 84], "init": 67, "init_checkpoint": 67, "resum": [67, 75], "aug": 67, "add_aug": [67, 77, 79, 80, 81, 83], "choic": 67, "augment": [67, 77, 79, 80, 81, 83], "hvflip": [67, 77, 79, 83], "hflip": [67, 77, 79, 80, 81, 83], "vflip": [67, 77, 79, 83], "rotat": [67, 77, 79, 80, 81, 83], "zoom": [67, 77, 79, 83], "d": [67, 73], "trigger": 67, "job": [67, 73], "nproc": 67, "lr": 67, "horovod": 67, "use_horovod": 67, "mpi": 67, "here": [68, 70, 71, 74, 80, 86], "particip": [68, 86], "oneapi": [68, 86], "toolkit": [68, 77, 79, 80, 86], "instal": [68, 69, 75, 78, 86], "opt": [68, 86], "kei": [68, 86], "pair": [68, 86], "check": [68, 73, 75, 80, 86], "id_rsa": [68, 86], "pub": [68, 86], "don": [68, 82, 86], "t": [68, 73, 77, 81, 82, 83, 84, 86], "passphras": [68, 86], "remov": [68, 86], "keygen": [68, 86], "old_passphras": [68, 86], "n": [68, 77, 80, 81, 82, 83, 84, 86], "new_passphras": [68, 86], "keyfil": [68, 86], "replac": [68, 73, 86], "blank": [68, 86], "space": [68, 86], "give": [68, 81, 83, 86], "permiss": [68, 86], "chmod": [68, 86], "u": [68, 81, 83, 86], "x": [68, 77, 79, 84, 86], "rsa": [68, 86], "ask": [68, 86], "what": [68, 80, 86], "press": [68, 86], "enter": [68, 86], "just": [68, 77, 79, 80, 81, 82, 83, 84, 86], "open": [68, 75, 77, 79, 81, 82, 83, 84, 86], "editor": [68, 86], "like": [68, 80, 82, 84, 86], "vi": [68, 86], "vim": [68, 86], "nano": [68, 86], "pico": [68, 86], "sai": [68, 86], "your_idsid": [68, 86], "hostnam": [68, 69, 86], "domain": [68, 77, 79, 86], "omit": [68, 86], "idsid": [68, 86], "authorized_kei": [68, 86], "past": [68, 85, 86], "AND": [68, 86], "yourself": [68, 86], "anyon": [68, 86], "600": [68, 86], "file1": [68, 86], "file2": [68, 86], "file3": [68, 86], "ip_or_hostnam": [68, 86], "target": [68, 86], "system": [68, 75, 82, 85, 86], "workload": [68, 86], "local": [68, 69, 80, 82, 86], "content": [68, 81, 82, 84, 86], "insid": [68, 85, 86], "describ": 69, "root": [69, 80], "project": [69, 75], "m": [69, 71, 77], "pandoc": 69, "few": 69, "r": [69, 73, 77, 82, 84, 85], "txt": [69, 81, 83, 85], "navig": [69, 85], "doctest": 69, "ensur": [69, 73, 81, 83], "produc": [69, 80], "similiar": 69, "summari": [69, 81, 82], "6": 69, "failur": 69, "cleanup": 69, "succeed": 69, "final": [69, 75], "html": [69, 81], "clean": 69, "_build": 69, "server": [69, 85], "view": [69, 80, 85], "serv": [69, 77, 79, 81, 82, 83, 84], "127": 69, "port": [69, 85], "9999": 69, "anoth": 69, "pleas": [69, 82, 84], "forward": 69, "appropri": [69, 77, 79], "listen_ip": 69, "listen_port": 69, "host": 69, "listen": 69, "now": [69, 80], "cli": [70, 74, 75], "low": [70, 74, 75, 81, 82, 83, 84], "api": [70, 73, 74, 75], "begin": 71, "step": [71, 75, 77, 79, 80, 81, 82, 83, 84, 85], "full": [71, 81, 83], "concept": 71, "limit": 71, "particular": 71, "readi": [71, 77, 79, 83, 84], "own": [71, 75, 80], "along": [71, 82, 84], "eval": [71, 72, 73], "2022": 71, "06": 71, "28": 71, "info": [71, 77, 81, 82, 83, 84], "latenc": 71, "031": 71, "throughput": 71, "329": 71, "878": 71, "sec": 71, "exit": [71, 81, 82, 83, 84], "58": 71, "statist": 71, "op": 71, "conv2d": 71, "53": 71, "matmul": 71, "maxpool": 71, "quantizev2": 71, "dequant": 71, "elaps": 71, "32164": 71, "27": 71, "26": 71, "13921": 71, "64": [71, 80], "9008": 71, "9022": 71, "durat": 71, "13": 71, "9226": 71, "17": 71, "3321": 71, "baselin": [71, 81, 83], "snapshot": 71, "meet": [71, 73, 82, 84], "goal": [71, 80], "savedmodel": 71, "again": [71, 81, 83], "compar": [71, 81, 83], "33": 71, "946": 71, "1056": 71, "940": 71, "altern": 71, "part": [71, 81, 83], "flow": [71, 75], "so": [71, 81, 82, 83], "51": 71, "21": 71, "photo": 72, "vari": [72, 73], "sinc": [72, 73, 81, 83], "onlin": [72, 81, 83], "tfflower": [72, 81, 83], "author": [72, 73, 77, 79, 81, 82, 83, 84], "team": [72, 75, 81, 83], "titl": [72, 73, 77, 78, 79, 80, 81, 82, 83, 84], "month": [72, 73, 79, 81, 82, 83, 84], "jan": [72, 81, 83], "year": [72, 73, 77, 79, 81, 82, 83, 84], "2019": [72, 73, 80, 81, 83], "url": [72, 73, 79, 81, 82, 83, 84, 85], "although": 73, "flexibl": 73, "translat": [73, 82, 84], "tab": [73, 82, 84], "messag": [73, 82, 84], "ham": [73, 82, 84], "mesag": [73, 82, 84], "archiv": [73, 82, 84], "ic": [73, 82, 84], "uci": [73, 82, 84], "edu": [73, 81, 82, 84], "ml": [73, 82, 84], "databas": [73, 82, 84], "00228": [73, 82, 84], "smsspamcollect": [73, 82, 84], "unzip": [73, 79], "copi": [73, 85], "smsspamcollection_numer": 73, "cp": 73, "sed": 73, "g": [73, 77], "google_bert_uncased_l": 73, "demonstr": [73, 75, 78, 80, 81, 83], "imdb_review": [73, 84], "level": [73, 84], "sentiment": [73, 82, 84], "analysi": [73, 77, 80, 82, 84], "tweet_ev": [73, 82], "ag_new": [73, 82], "up": [73, 75, 77, 79, 80, 81, 82, 83, 84, 85], "prerequisit": 73, "successfulli": 73, "saniti": [73, 80], "inproceed": [73, 82, 84], "maa": [73, 82, 84], "etal": [73, 82, 84], "2011": [73, 82, 84], "acl": [73, 82, 84], "hlt2011": [73, 82, 84], "andrew": [73, 82, 84], "l": [73, 77, 81, 82, 83, 84], "dali": [73, 82, 84], "raymond": [73, 82, 84], "e": [73, 82, 84], "pham": [73, 82, 84], "peter": [73, 82, 84], "huang": [73, 82, 84], "dan": [73, 82, 84], "ng": [73, 82, 84], "y": [73, 77, 79, 82, 84], "pott": [73, 82, 84], "christoph": [73, 82, 84], "word": [73, 82, 84], "vector": [73, 77, 79, 82, 84], "booktitl": [73, 82, 84], "proceed": [73, 79, 82, 84], "49th": [73, 82, 84], "annual": [73, 82, 84], "comput": [73, 80, 82, 84], "linguist": [73, 82, 84], "languag": [73, 82, 84], "technologi": [73, 82, 84], "june": [73, 82, 84], "address": [73, 81, 82, 83, 84], "portland": [73, 82, 84], "oregon": [73, 82, 84], "usa": [73, 82, 84], "publish": [73, 77, 79, 82, 84], "page": [73, 77, 79, 82, 84], "142": [73, 82, 84], "150": [73, 82, 84], "aclweb": [73, 82, 84], "anthologi": [73, 82, 84], "p11": [73, 82, 84], "1015": [73, 82, 84], "wang2019glu": 73, "natur": [73, 77], "understand": 73, "wang": 73, "alex": [73, 81], "singh": 73, "amanpreet": 73, "michael": [73, 80], "julian": 73, "hill": 73, "felix": 73, "levi": 73, "omer": 73, "bowman": 73, "samuel": 73, "iclr": 73, "misc": [73, 82, 84], "misc_sms_spam_collection_228": [73, 82, 84], "almeida": [73, 82, 84], "tiago": [73, 82, 84], "2012": [73, 82, 84], "howpublish": [73, 82, 84], "socher": 73, "2013": 73, "recurs": 73, "semant": [73, 82], "composition": 73, "over": [73, 75, 82, 84], "treebank": 73, "richard": 73, "perelygin": 73, "wu": 73, "jean": 73, "chuang": 73, "jason": 73, "man": 73, "confer": [73, 80, 82, 84], "empir": 73, "oct": [73, 79], "seattl": 73, "washington": 73, "d13": 73, "1170": 73, "1631": 73, "1642": 73, "pre": 75, "problem": 75, "smaller": 75, "easier": 75, "varieti": [75, 81], "Its": 75, "librari": [75, 81, 82, 83, 84], "leverag": 75, "effici": 75, "resourc": 75, "usag": 75, "100": 75, "quickli": 75, "scale": [75, 81, 83], "crop": 75, "predict": [75, 77, 79], "boost": 75, "reduc": 75, "speed": 75, "interfac": 75, "construct": 75, "overview": 75, "shown": [75, 80, 81, 83], "figur": [75, 80, 81, 83], "track": 75, "bug": 75, "enhanc": 75, "issu": [75, 81, 83], "submit": 75, "suggest": 75, "report": [75, 77, 79], "search": [75, 81, 82, 83, 84], "legal": 75, "disclaim": 75, "licens": [75, 82, 84], "facilit": [77, 79], "implement": [77, 79, 82, 84], "textur": 77, "cancer": 77, "sota": [77, 79], "resnet": [77, 79, 80], "v1": [77, 79, 80], "achiev": [77, 79], "numpi": [77, 79, 80, 81, 82, 83, 84], "np": [77, 79, 80, 81, 82, 83, 84], "pickl": [77, 79], "sklearn": [77, 79], "classification_report": [77, 79], "plot_util": [77, 79], "plot_curv": [77, 79], "factori": [77, 79, 80, 81, 82, 83, 84], "ad": [77, 79, 80, 81, 82, 83, 84], "next": [77, 79, 81, 82, 83, 84], "cell": [77, 79, 80, 81, 82, 83, 84], "later": [77, 79, 81, 82, 83, 84], "colorectal_histologi": 77, "nclass": [77, 82, 83, 84], "onc": [77, 79, 80, 81, 82, 83, 84, 85], "abov": [77, 79, 80, 81, 82, 83, 84], "resiz": [77, 79, 80, 81, 83, 84], "match": [77, 79, 80, 81, 83, 84], "them": [77, 79, 80, 81, 83, 84], "randomhorizontalandverticalflip": [77, 79, 83], "randomhorizontalflip": [77, 79, 80, 81, 83], "randomverticalflip": [77, 79, 83], "randomrot": [77, 79, 80, 81, 83], "randomzoom": [77, 79, 83], "80": [77, 79], "test_pct": [77, 79, 80], "paramt": [77, 79, 82, 83, 84], "calcul": [77, 79, 80, 81, 82, 83, 84], "releas": [77, 79, 80, 81, 82, 83, 84], "date": [77, 79, 80, 81, 82, 83, 84], "current": [77, 79, 80, 81, 82, 83, 84], "descript": [77, 79, 80, 81, 82, 83, 84], "val_loss": [77, 79], "val_acc": [77, 79], "_checkpoint": [77, 79], "dump": [77, 79], "hist": 77, "pkl": [77, 79], "wb": [77, 79], "pick": [77, 79, 81, 82, 83, 84], "rb": [77, 79], "use_test_set": [77, 79, 80], "actual_label": [77, 79, 84], "concaten": [77, 79], "_test_subset": [77, 79], "axi": [77, 79, 80, 81, 82, 83, 84], "predicted_label": [77, 79], "articl": [77, 79, 81, 83], "kather2016multi": 77, "kather": 77, "jakob": 77, "nikola": 77, "wei": 77, "cleo": 77, "aron": 77, "bianconi": 77, "francesco": 77, "melcher": 77, "susann": 77, "schad": 77, "lothar": 77, "gaiser": 77, "timo": 77, "marx": 77, "alexand": 77, "z": 77, "llner": 77, "frank": 77, "gerrit": 77, "journal": [77, 79, 80, 81, 83], "scientif": 77, "volum": [77, 79], "27988": 77, "2016": [77, 81, 83], "group": 77, "j": 77, "z\u00f6llner": 77, "zenodo": 77, "doi": [77, 79, 80], "5281": 77, "53169": 77, "ipynb": 78, "medic": 78, "remot": 78, "sens": 78, "scene": 78, "resisc": 78, "rar": 79, "onedr": 79, "live": 79, "authkei": 79, "21ahhnahilzp": 79, "5fixj": 79, "cid": 79, "5c5e061130630a68": 79, "id": [79, 80, 81, 83], "21107": 79, "parid": 79, "21112": 79, "action": 79, "custom_dataset_path": [79, 81, 83], "256": 79, "resisc45_hist": 79, "cheng_2017": 79, "state": 79, "art": 79, "105": 79, "issn": 79, "1558": 79, "2256": 79, "dx": 79, "1109": [79, 80], "jproc": 79, "2017": [79, 82], "2675998": 79, "ieee": [79, 80], "institut": 79, "electr": 79, "electron": 79, "engin": 79, "cheng": 79, "gong": 79, "han": 79, "junwei": 79, "lu": 79, "xiaoqiang": 79, "1865": 79, "1883": 79, "assum": [80, 81, 82, 83, 84], "matplotlib": [80, 81, 83], "pyplot": [80, 81, 83], "plt": [80, 81, 83], "panda": [80, 81, 82, 83, 84], "pd": [80, 81, 82, 83, 84], "pil": [80, 81, 83], "interpolationmod": 80, "io": [80, 81], "bytesio": [80, 81], "file_util": [80, 81, 82, 83, 84], "download_and_extract_tar_fil": [80, 81, 83], "download_fil": [80, 81, 83], "desir": 80, "disk": [80, 82, 84], "anomaly_detect": 80, "path_to_model_fil": 80, "png": 80, "hazelnut": 80, "crack": 80, "good": [80, 82], "hole": 80, "least": 80, "matter": 80, "mani": 80, "long": 80, "would": [80, 82, 84], "layout": [80, 81, 83], "toothbrush": 80, "encod": 80, "bad": 80, "exact": 80, "re": 80, "certain": 80, "percentag": 80, "img_dir": 80, "image_anomaly_detect": 80, "_dataset": 80, "defect_nam": 80, "normal": [80, 81], "_validation_typ": 80, "cutpast": 80, "cutpaste_typ": 80, "scar": 80, "3wai": 80, "union": 80, "lanczo": 80, "def": [80, 84], "plot_imag": 80, "sup_titl": 80, "figsiz": [80, 81, 83], "18": [80, 81, 83], "14": [80, 81, 83], "subplots_adjust": [80, 81, 83], "hspace": [80, 81, 83], "rang": [80, 81, 83], "min": [80, 81, 83], "30": [80, 81, 83], "subplot": [80, 81, 83], "inp": [80, 81], "transpos": [80, 81], "arrai": [80, 81, 83], "485": [80, 81], "456": [80, 81], "406": [80, 81], "std": [80, 81], "229": [80, 81], "225": [80, 81], "clip": [80, 81], "imshow": [80, 81, 83], "correct_predict": [80, 81, 83], "darkgreen": [80, 81, 83], "crimson": [80, 81, 83], "good_sampl": 80, "black": 80, "fontsiz": [80, 81, 83], "off": [80, 81, 83], "_": [80, 81, 83], "suptitl": [80, 81, 83], "plot": 80, "get_batch": [80, 81, 82, 83, 84], "princip": 80, "compon": 80, "auroc": 80, "area": 80, "roc": 80, "curv": 80, "imageanomalydetectiondataset": 80, "generate_checkpoint": 80, "preserv": 80, "layer_nam": 80, "whose": 80, "pool": 80, "avg": 80, "kernel_s": 80, "kernel": 80, "pca_threshold": 80, "threshold": 80, "pca": 80, "99": 80, "examin": 80, "decid": 80, "list_lay": [80, 81, 82], "layer3": 80, "three": 80, "No": 80, "simpli": 80, "self": 80, "supervis": 80, "network": [80, 84], "siames": 80, "meaning": 80, "represent": 80, "without": 80, "differenti": 80, "regular": 80, "context": 80, "underli": 80, "take": [80, 81, 82, 83, 84], "backbon": 80, "better": 80, "embed": 80, "dl": 80, "fbaipublicfil": 80, "100ep": 80, "256b": 80, "checkpoint_0099": 80, "pth": 80, "strategi": 80, "patch": 80, "techniqu": 80, "preview": 80, "simsiam_imag": 80, "four": 80, "cutpastenorm": 80, "cutpastescar": 80, "cutpaste3wai": 80, "cutpasteunion": 80, "cutpaste_imag": 80, "pca_compon": 80, "trained_model": 80, "feature_dim": 80, "1000": 80, "pred_dim": 80, "250": 80, "path_to_checkpoints_fil": 80, "float32": 80, "sgd": 80, "freeze_resnet": 80, "head_lay": 80, "return_typ": 80, "correct": [80, 81, 83], "green": [80, 81, 83], "incorrect": [80, 81, 83], "red": [80, 81, 83], "sum": 80, "enumer": [80, 82, 84], "len": [80, 84], "paul": 80, "bergmann": 80, "kilian": 80, "batzner": 80, "fauser": 80, "david": [80, 81, 83], "sattlegg": 80, "carsten": 80, "steger": 80, "real": 80, "world": 80, "unsupervis": 80, "intern": [80, 82], "vision": 80, "129": 80, "1038": 80, "1059": 80, "2021": 80, "1007": 80, "s11263": 80, "020": 80, "01400": 80, "cvf": 80, "pattern": 80, "recognit": 80, "cvpr": 80, "9584": 80, "9592": 80, "00982": 80, "classfic": [81, 83], "speci": [81, 83], "similarli": [81, 83], "variabl": [81, 82, 83, 84, 85], "comment": [81, 83], "download_url": [81, 83], "subsequ": [81, 85], "reus": [81, 85], "These": 81, "apppli": 81, "haven": [81, 83], "imagenet": [81, 83], "labels_fil": [81, 83], "imagenetlabel": [81, 83], "labels_file_path": 81, "basenam": [81, 82, 83, 84], "imagenet_label": [81, 83], "readlin": [81, 83], "imagenet_class": [81, 83], "strip": [81, 83], "actual": [81, 82, 83, 84], "parenthesi": [81, 83], "modul": [81, 82], "unfrozen": [81, 82], "unfreeze_lay": [81, 82], "unfreez": [81, 82], "lastli": [81, 82, 84], "earlier": [81, 83], "visual": [81, 83], "wasn": [81, 83], "web": [81, 83], "image_url": [81, 83], "c8": [81, 83], "staticflickr": [81, 83], "7095": [81, 83], "7210797228_c7fe51c3cb_z": [81, 83], "image_shap": [81, 83], "dimens": [81, 83], "255": [81, 83], "channel": 81, "newaxi": [81, 83], "moveaxi": 81, "tensor": [81, 82], "section": [81, 82, 83, 84], "known": [81, 83], "sometim": [81, 83], "zmq": [81, 83], "zmqerror": [81, 83], "rerun": [81, 83], "recip": [81, 82, 83, 84], "constrain": [81, 82, 83, 84], "sever": [81, 82, 83, 84], "minut": [81, 82, 83, 84], "get_inc_config": 81, "inc_output_dir": [81, 83], "krizhevski": 81, "cifar": 81, "2009": 81, "toronto": 81, "kriz": 81, "openimag": [81, 83], "krasin": [81, 83], "ivan": [81, 83], "duerig": [81, 83], "tom": [81, 83], "alldrin": [81, 83], "neil": [81, 83], "veit": [81, 83], "andrea": [81, 83], "abu": [81, 83], "el": [81, 83], "haija": [81, 83], "sami": [81, 83], "belongi": [81, 83], "serg": [81, 83], "cai": [81, 83], "feng": [81, 83], "zheyun": [81, 83], "ferrari": [81, 83], "vittorio": [81, 83], "gome": [81, 83], "victor": [81, 83], "gupta": [81, 83], "abhinav": [81, 83], "narayanan": [81, 83], "dhyanesh": [81, 83], "sun": [81, 83], "chen": [81, 83], "chechik": [81, 83], "gal": [81, 83], "murphi": [81, 83], "kevin": [81, 83], "intel_extension_for_pytorch": 82, "download_and_extract_zip_fil": [82, 84], "text_classif": [82, 84], "num_class": [82, 84], "condit": [82, 84], "corpor": [82, 84], "modifi": 82, "csv_path": 82, "dataset_url": 82, "sms_spam_collect": [82, 84], "csv_name": 82, "label_nam": 82, "renam": 82, "know": 82, "renamed_csv": 82, "emoji": 82, "emot": 82, "hate": 82, "ironi": 82, "offens": 82, "stance_abort": 82, "stance_ath": 82, "stance_clim": 82, "stance_feminist": 82, "stance_hillari": 82, "data_batch": [82, 84], "batch_predict": [82, 84], "frame": [82, 84], "max_item": [82, 84], "score": [82, 84], "prediction_list": [82, 84], "input_id": 82, "get_text": 82, "append": [82, 84], "get_str_label": [82, 84], "break": [82, 84], "result_df": [82, 84], "datafram": [82, 84], "style": [82, 84], "hide": [82, 84], "raw": [82, 84], "movi": [82, 84], "control": [82, 84], "quantization_output_dir": [82, 84], "relative_accuracy_criterion": [82, 84], "15": [82, 84], "rosenthal2017semev": 82, "semev": 82, "twitter": 82, "rosenth": 82, "sara": 82, "farra": 82, "noura": 82, "nakov": 82, "preslav": 82, "11th": 82, "workshop": 82, "502": 82, "518": 82, "preprocessor": 83, "downloaded_fil": 83, "get_fil": 83, "norm_imag": 83, "vmin": 83, "vmax": 83, "zip_file_url": 84, "sms_data_directori": 84, "listdir": 84, "ag_news_subset": 84, "decod": 84, "utf": 84, "argmax": 84, "get_static_valu": 84, "center": 84, "set_table_styl": 84, "selector": 84, "th": 84, "prop": 84, "align": 84, "awesom": 84, "zhang2015characterlevel": 84, "convolut": 84, "xiang": 84, "zhang": 84, "junbo": 84, "zhao": 84, "yann": 84, "lecun": 84, "2015": 84, "eprint": 84, "1509": 84, "01626": 84, "archiveprefix": 84, "arxiv": 84, "primaryclass": 84, "lg": 84, "tutori": 85, "e2": 85, "comparison": 85, "upgrad": 85, "8888": 85, "termin": 85, "browser": 85}, "objects": {"tlt.datasets.dataset": [[4, 0, 1, "", "BaseDataset"]], "tlt.datasets.dataset.BaseDataset": [[4, 1, 1, "", "__init__"]], "tlt.datasets": [[66, 2, 0, "-", "dataset_factory"]], "tlt.datasets.dataset_factory": [[66, 3, 1, "", "get_dataset"], [66, 3, 1, "", "load_dataset"]], "tlt.datasets.hf_dataset": [[5, 0, 1, "", "HFDataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.image_classification_dataset": [[6, 0, 1, "", "ImageClassificationDataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[6, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset": [[7, 0, 1, "", "PyTorchCustomImageClassificationDataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[7, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset": [[8, 0, 1, "", "TFCustomImageClassificationDataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[8, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tfds_image_classification_dataset": [[9, 0, 1, "", "TFDSImageClassificationDataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[9, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset": [[10, 0, 1, "", "TorchvisionImageClassificationDataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[10, 1, 1, "", "__init__"]], "tlt.datasets.pytorch_dataset": [[11, 0, 1, "", "PyTorchDataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[11, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset": [[12, 0, 1, "", "HFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[12, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_text_classification_dataset": [[13, 0, 1, "", "HFTextClassificationDataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[13, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.text_classification_dataset": [[14, 0, 1, "", "TextClassificationDataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[14, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset": [[15, 0, 1, "", "TFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[15, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tfds_text_classification_dataset": [[16, 0, 1, "", "TFDSTextClassificationDataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[16, 1, 1, "", "__init__"]], "tlt.datasets.tf_dataset": [[17, 0, 1, "", "TFDataset"]], "tlt.datasets.tf_dataset.TFDataset": [[17, 1, 1, "", "__init__"]], "tlt.models.hf_model": [[18, 0, 1, "", "HFModel"]], "tlt.models.hf_model.HFModel": [[18, 1, 1, "", "__init__"]], "tlt.models.image_classification.image_classification_model": [[19, 0, 1, "", "ImageClassificationModel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[19, 1, 1, "", "__init__"], [20, 1, 1, "", "get_inc_config"], [21, 1, 1, "", "quantize"], [22, 1, 1, "", "train"]], "tlt.models.image_classification.keras_image_classification_model": [[23, 0, 1, "", "KerasImageClassificationModel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[23, 1, 1, "", "__init__"], [24, 1, 1, "", "get_inc_config"], [25, 1, 1, "", "quantize"], [26, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model": [[27, 0, 1, "", "PyTorchHubImageClassificationModel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[27, 1, 1, "", "__init__"], [28, 1, 1, "", "get_inc_config"], [29, 1, 1, "", "quantize"], [30, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_image_classification_model": [[31, 0, 1, "", "PyTorchImageClassificationModel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[31, 1, 1, "", "__init__"], [32, 1, 1, "", "get_inc_config"], [33, 1, 1, "", "quantize"], [34, 1, 1, "", "train"]], "tlt.models.image_classification.tf_image_classification_model": [[35, 0, 1, "", "TFImageClassificationModel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[35, 1, 1, "", "__init__"], [36, 1, 1, "", "get_inc_config"], [37, 1, 1, "", "quantize"], [38, 1, 1, "", "train"]], "tlt.models.image_classification.tfhub_image_classification_model": [[39, 0, 1, "", "TFHubImageClassificationModel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[39, 1, 1, "", "__init__"], [40, 1, 1, "", "get_inc_config"], [41, 1, 1, "", "quantize"], [42, 1, 1, "", "train"]], "tlt.models.image_classification.torchvision_image_classification_model": [[43, 0, 1, "", "TorchvisionImageClassificationModel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[43, 1, 1, "", "__init__"], [44, 1, 1, "", "get_inc_config"], [45, 1, 1, "", "quantize"], [46, 1, 1, "", "train"]], "tlt.models.model": [[47, 0, 1, "", "BaseModel"]], "tlt.models.model.BaseModel": [[47, 1, 1, "", "__init__"]], "tlt.models": [[66, 2, 0, "-", "model_factory"]], "tlt.models.model_factory": [[66, 3, 1, "", "get_model"], [66, 3, 1, "", "get_supported_models"], [66, 3, 1, "", "load_model"], [66, 3, 1, "", "print_supported_models"]], "tlt.models.pytorch_model": [[48, 0, 1, "", "PyTorchModel"]], "tlt.models.pytorch_model.PyTorchModel": [[48, 1, 1, "", "__init__"]], "tlt.models.text_classification.pytorch_hf_text_classification_model": [[49, 0, 1, "", "PyTorchHFTextClassificationModel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[49, 1, 1, "", "__init__"], [50, 1, 1, "", "quantize"], [51, 1, 1, "", "train"], [52, 1, 1, "", "write_inc_config_file"]], "tlt.models.text_classification.text_classification_model": [[53, 0, 1, "", "TextClassificationModel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[53, 1, 1, "", "__init__"], [54, 1, 1, "", "quantize"], [55, 1, 1, "", "train"], [56, 1, 1, "", "write_inc_config_file"]], "tlt.models.text_classification.tf_hf_text_classification_model": [[57, 0, 1, "", "TFHFTextClassificationModel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[57, 1, 1, "", "__init__"], [58, 1, 1, "", "quantize"], [59, 1, 1, "", "train"], [60, 1, 1, "", "write_inc_config_file"]], "tlt.models.text_classification.tf_text_classification_model": [[61, 0, 1, "", "TFTextClassificationModel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[61, 1, 1, "", "__init__"], [62, 1, 1, "", "quantize"], [63, 1, 1, "", "train"], [64, 1, 1, "", "write_inc_config_file"]], "tlt.models.tf_model": [[65, 0, 1, "", "TFModel"]], "tlt.models.tf_model.TFModel": [[65, 1, 1, "", "__init__"]], "tlt-benchmark": [[67, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch-size"], [67, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch_size"], [67, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset-dir"], [67, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset_dir"], [67, 4, 1, "cmdoption-tlt-benchmark-inc-config", "--inc-config"], [67, 4, 1, "cmdoption-tlt-benchmark-inc-config", "--inc_config"], [67, 4, 1, "cmdoption-tlt-benchmark-mode", "--mode"], [67, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model-dir"], [67, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model_dir"], [67, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output-dir"], [67, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output_dir"]], "tlt-eval": [[67, 4, 1, "cmdoption-tlt-eval-class-names", "--class-names"], [67, 4, 1, "cmdoption-tlt-eval-class-names", "--class_names"], [67, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset-catalog"], [67, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset-dir"], [67, 4, 1, "cmdoption-tlt-eval-dataset-file", "--dataset-file"], [67, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset-name"], [67, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset_catalog"], [67, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset_dir"], [67, 4, 1, "cmdoption-tlt-eval-dataset-file", "--dataset_file"], [67, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset_name"], [67, 4, 1, "cmdoption-tlt-eval-delimiter", "--delimiter"], [67, 4, 1, "cmdoption-tlt-eval-model-dir", "--model-dir"], [67, 4, 1, "cmdoption-tlt-eval-model-name", "--model-name"], [67, 4, 1, "cmdoption-tlt-eval-model-dir", "--model_dir"], [67, 4, 1, "cmdoption-tlt-eval-model-name", "--model_name"]], "tlt-list-models": [[67, 4, 1, "cmdoption-tlt-list-models-f", "--framework"], [67, 4, 1, "cmdoption-tlt-list-models-use-case", "--use-case"], [67, 4, 1, "cmdoption-tlt-list-models-use-case", "--use_case"], [67, 4, 1, "cmdoption-tlt-list-models-verbose", "--verbose"], [67, 4, 1, "cmdoption-tlt-list-models-f", "-f"]], "tlt-optimize": [[67, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model-dir"], [67, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model_dir"], [67, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output-dir"], [67, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output_dir"]], "tlt-quantize": [[67, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy-criterion"], [67, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy_criterion"], [67, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch-size"], [67, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch_size"], [67, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset-dir"], [67, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset_dir"], [67, 4, 1, "cmdoption-tlt-quantize-inc-config", "--inc-config"], [67, 4, 1, "cmdoption-tlt-quantize-inc-config", "--inc_config"], [67, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max-trials"], [67, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max_trials"], [67, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model-dir"], [67, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model_dir"], [67, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output-dir"], [67, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output_dir"], [67, 4, 1, "cmdoption-tlt-quantize-timeout", "--timeout"]], "tlt-train": [[67, 4, 1, "cmdoption-tlt-train-add-aug", "--add-aug"], [67, 4, 1, "cmdoption-tlt-train-add-aug", "--add_aug"], [67, 4, 1, "cmdoption-tlt-train-class-names", "--class-names"], [67, 4, 1, "cmdoption-tlt-train-class-names", "--class_names"], [67, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset-catalog"], [67, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset-dir"], [67, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset-file"], [67, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset-name"], [67, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset_catalog"], [67, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset_dir"], [67, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset_file"], [67, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset_name"], [67, 4, 1, "cmdoption-tlt-train-delimiter", "--delimiter"], [67, 4, 1, "cmdoption-tlt-train-d", "--distributed"], [67, 4, 1, "cmdoption-tlt-train-early-stopping", "--early-stopping"], [67, 4, 1, "cmdoption-tlt-train-early-stopping", "--early_stopping"], [67, 4, 1, "cmdoption-tlt-train-epochs", "--epochs"], [67, 4, 1, "cmdoption-tlt-train-f", "--framework"], [67, 4, 1, "cmdoption-tlt-train-hostfile", "--hostfile"], [67, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init-checkpoints"], [67, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init_checkpoints"], [67, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex-optimize"], [67, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex_optimize"], [67, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr-decay"], [67, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr_decay"], [67, 4, 1, "cmdoption-tlt-train-model-name", "--model-name"], [67, 4, 1, "cmdoption-tlt-train-model-name", "--model_name"], [67, 4, 1, "cmdoption-tlt-train-nnodes", "--nnodes"], [67, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc-per-node"], [67, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc_per_node"], [67, 4, 1, "cmdoption-tlt-train-output-dir", "--output-dir"], [67, 4, 1, "cmdoption-tlt-train-output-dir", "--output_dir"], [67, 4, 1, "cmdoption-tlt-train-use-horovod", "--use-horovod"], [67, 4, 1, "cmdoption-tlt-train-use-horovod", "--use_horovod"], [67, 4, 1, "cmdoption-tlt-train-d", "-d"], [67, 4, 1, "cmdoption-tlt-train-f", "-f"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function", "4": "std:cmdoption"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"], "4": ["std", "cmdoption", "program option"]}, "titleterms": {"dataset": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 66, 72, 73, 77, 79, 80, 81, 82, 83, 84], "get": [1, 71, 75, 77, 79, 80, 81, 82, 83, 84], "start": [1, 71, 75], "\u2460": 1, "check": 1, "system": 1, "requir": [1, 80, 81, 82, 83, 84], "\u2461": 1, "instal": [1, 85], "\u2462": 1, "run": [1, 85], "intel": [1, 3, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85], "transfer": [1, 3, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85], "learn": [1, 3, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85], "tool": [1, 3, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85], "us": [1, 72, 73, 77, 79, 80, 81, 82, 83, 84], "No": 1, "code": 1, "cli": [1, 67, 71, 72, 73], "low": 1, "api": [1, 66, 77, 78, 79, 81, 82, 83, 84], "summari": 1, "next": 1, "step": 1, "legal": 2, "inform": 2, "disclaim": 2, "licens": 2, "support": [3, 75], "model": [3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 77, 79, 80, 81, 82, 83, 84], "imag": [3, 66, 72, 76, 77, 79, 80, 81, 83], "classif": [3, 66, 72, 73, 76, 77, 79, 81, 82, 83, 84], "text": [3, 66, 73, 76, 82, 84], "anomali": [3, 80], "detect": [3, 80], "tlt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "basedataset": 4, "hf_dataset": 5, "hfdataset": 5, "image_classif": [6, 7, 8, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "image_classification_dataset": 6, "imageclassificationdataset": 6, "pytorch_custom_image_classification_dataset": 7, "pytorchcustomimageclassificationdataset": 7, "tf_custom_image_classification_dataset": 8, "tfcustomimageclassificationdataset": 8, "tfds_image_classification_dataset": 9, "tfdsimageclassificationdataset": 9, "torchvision_image_classification_dataset": 10, "torchvisionimageclassificationdataset": 10, "pytorch_dataset": 11, "pytorchdataset": 11, "text_classif": [12, 13, 14, 15, 16, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "hf_custom_text_classification_dataset": 12, "hfcustomtextclassificationdataset": 12, "hf_text_classification_dataset": 13, "hftextclassificationdataset": 13, "text_classification_dataset": 14, "textclassificationdataset": 14, "tf_custom_text_classification_dataset": 15, "tfcustomtextclassificationdataset": 15, "tfds_text_classification_dataset": 16, "tfdstextclassificationdataset": 16, "tf_dataset": 17, "tfdataset": 17, "hf_model": 18, "hfmodel": 18, "image_classification_model": [19, 20, 21, 22], "imageclassificationmodel": [19, 20, 21, 22], "get_inc_config": [20, 24, 28, 32, 36, 40, 44], "quantiz": [21, 25, 29, 33, 37, 41, 45, 50, 54, 58, 62, 67, 71, 81, 82, 83, 84], "train": [22, 26, 30, 34, 38, 42, 46, 51, 55, 59, 63, 67, 68, 71, 80, 81, 83, 86], "keras_image_classification_model": [23, 24, 25, 26], "kerasimageclassificationmodel": [23, 24, 25, 26], "pytorch_hub_image_classification_model": [27, 28, 29, 30], "pytorchhubimageclassificationmodel": [27, 28, 29, 30], "pytorch_image_classification_model": [31, 32, 33, 34], "pytorchimageclassificationmodel": [31, 32, 33, 34], "tf_image_classification_model": [35, 36, 37, 38], "tfimageclassificationmodel": [35, 36, 37, 38], "tfhub_image_classification_model": [39, 40, 41, 42], "tfhubimageclassificationmodel": [39, 40, 41, 42], "torchvision_image_classification_model": [43, 44, 45, 46], "torchvisionimageclassificationmodel": [43, 44, 45, 46], "basemodel": 47, "pytorch_model": 48, "pytorchmodel": 48, "pytorch_hf_text_classification_model": [49, 50, 51, 52], "pytorchhftextclassificationmodel": [49, 50, 51, 52], "write_inc_config_fil": [52, 56, 60, 64], "text_classification_model": [53, 54, 55, 56], "textclassificationmodel": [53, 54, 55, 56], "tf_hf_text_classification_model": [57, 58, 59, 60], "tfhftextclassificationmodel": [57, 58, 59, 60], "tf_text_classification_model": [61, 62, 63, 64], "tftextclassificationmodel": [61, 62, 63, 64], "tf_model": 65, "tfmodel": 65, "refer": [66, 67], "factori": 66, "method": [66, 76, 80], "class": 66, "base": 66, "benchmark": [67, 71], "eval": 67, "list": [67, 71], "framework": 67, "use_cas": 67, "optim": [67, 71], "distribut": [68, 73, 86], "prerequisit": [68, 78, 86], "passwordless": [68, 86], "ssh": [68, 86], "setup": [68, 77, 79, 80, 81, 82, 83, 84, 85, 86], "build": 69, "document": 69, "sphinx": 69, "exampl": [70, 71, 72, 73, 74, 78], "beyond": 71, "avail": 71, "perform": 71, "graph": 71, "additit": 71, "your": [72, 73, 81, 82, 83, 84], "own": [72, 73, 81, 82, 83, 84], "from": [72, 73, 80, 81, 83], "tfd": [72, 73, 84], "catalog": [72, 73, 81, 82, 83, 84], "citat": [72, 73, 77, 79, 80, 81, 82, 83, 84], "fine": [73, 82, 84], "tune": [73, 82, 84], "hug": 73, "face": 73, "what": 75, "i": 75, "how": 75, "work": 75, "medic": 77, "colorect": 77, "histologi": 77, "tensorflow": [77, 79, 83, 84], "1": [77, 79, 80, 81, 82, 83, 84], "import": [77, 79, 80, 81, 82, 83, 84], "depend": [77, 79, 80, 81, 82, 83, 84], "paramet": [77, 79, 80, 81, 82, 83, 84], "2": [77, 79, 80, 81, 82, 83, 84], "option": [77, 79, 80, 81, 82, 83, 84], "A": [77, 79, 81, 82, 83, 84], "load": [77, 79, 80], "b": [77, 79, 81, 82, 83, 84], "pretrain": [77, 79], "checkpoint": [77, 79], "3": [77, 79, 80, 81, 82, 83, 84], "4": [77, 79, 80, 81, 82, 83, 84], "prepar": [77, 79, 80, 81, 82, 83, 84], "5": [77, 79, 80, 81, 82, 83, 84], "6": [77, 79, 80, 81, 82, 83, 84], "evalu": [77, 79, 80], "7": [77, 79, 80, 81, 82, 83, 84], "export": [77, 79, 80, 81, 82, 83, 84], "8": [77, 79, 80, 81, 82, 83, 84], "infer": [77, 79], "notebook": [78, 85], "tutori": 78, "end": 78, "pipelin": 78, "remot": 79, "sens": 79, "scene": 79, "resisc": 79, "pytorch": [80, 81, 82], "categori": 80, "folder": 80, "test": 80, "subfold": 80, "visual": 80, "sampl": 80, "argument": [80, 81, 82, 83, 84], "featur": 80, "extract": 80, "The": 80, "simsiam": 80, "twocroptransform": 80, "cut": 80, "past": 80, "transform": 80, "predict": [80, 81, 82, 83, 84], "": 81, "torchvis": 81, "origin": [81, 83], "custom": [81, 83], "singl": [81, 83], "9": [81, 83], "post": [81, 83], "huggingfac": 82, "save": [82, 84], "environ": 85}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Datasets": [[0, "datasets"], [2, "datasets"], [66, "datasets"]], "Get Started": [[1, "get-started"], [75, "get-started"]], "\u2460 Check System Requirements": [[1, "check-system-requirements"]], "\u2461 Install": [[1, "install"]], "\u2462 Run the Intel Transfer Learning Tool": [[1, "run-the-intel-transfer-learning-tool"]], "Run Using the No-Code CLI": [[1, "run-using-the-no-code-cli"]], "Run Using the Low-Code API": [[1, "run-using-the-low-code-api"]], "Summary and Next Steps": [[1, "summary-and-next-steps"]], "Legal Information": [[2, "legal-information"]], "Disclaimer": [[2, "disclaimer"]], "License": [[2, "license"]], "Intel\u00ae Transfer Learning Tool Supported Models": [[3, "intel-transfer-learning-tool-supported-models"]], "Image Classification": [[3, "image-classification"], [66, "image-classification"], [66, "id3"]], "Text Classification": [[3, "text-classification"], [66, "text-classification"], [66, "id4"]], "Image Anomaly Detection": [[3, "image-anomaly-detection"]], "tlt.datasets.dataset.BaseDataset": [[4, "tlt-datasets-dataset-basedataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, "tlt-datasets-hf-dataset-hfdataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[6, "tlt-datasets-image-classification-image-classification-dataset-imageclassificationdataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[7, "tlt-datasets-image-classification-pytorch-custom-image-classification-dataset-pytorchcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[8, "tlt-datasets-image-classification-tf-custom-image-classification-dataset-tfcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[9, "tlt-datasets-image-classification-tfds-image-classification-dataset-tfdsimageclassificationdataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[10, "tlt-datasets-image-classification-torchvision-image-classification-dataset-torchvisionimageclassificationdataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[11, "tlt-datasets-pytorch-dataset-pytorchdataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[12, "tlt-datasets-text-classification-hf-custom-text-classification-dataset-hfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[13, "tlt-datasets-text-classification-hf-text-classification-dataset-hftextclassificationdataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[14, "tlt-datasets-text-classification-text-classification-dataset-textclassificationdataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[15, "tlt-datasets-text-classification-tf-custom-text-classification-dataset-tfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[16, "tlt-datasets-text-classification-tfds-text-classification-dataset-tfdstextclassificationdataset"]], "tlt.datasets.tf_dataset.TFDataset": [[17, "tlt-datasets-tf-dataset-tfdataset"]], "tlt.models.hf_model.HFModel": [[18, "tlt-models-hf-model-hfmodel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[19, "tlt-models-image-classification-image-classification-model-imageclassificationmodel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.get_inc_config": [[20, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-get-inc-config"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize": [[21, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-quantize"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train": [[22, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-train"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[23, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.get_inc_config": [[24, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-get-inc-config"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize": [[25, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-quantize"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train": [[26, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[27, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.get_inc_config": [[28, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-get-inc-config"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize": [[29, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train": [[30, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[31, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.get_inc_config": [[32, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-get-inc-config"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize": [[33, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train": [[34, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-train"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[35, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.get_inc_config": [[36, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-get-inc-config"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize": [[37, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-quantize"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train": [[38, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-train"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[39, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.get_inc_config": [[40, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-get-inc-config"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize": [[41, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train": [[42, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-train"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[43, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.get_inc_config": [[44, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-get-inc-config"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize": [[45, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-quantize"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train": [[46, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-train"]], "tlt.models.model.BaseModel": [[47, "tlt-models-model-basemodel"]], "tlt.models.pytorch_model.PyTorchModel": [[48, "tlt-models-pytorch-model-pytorchmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[49, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize": [[50, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-quantize"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train": [[51, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-train"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.write_inc_config_file": [[52, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-write-inc-config-file"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[53, "tlt-models-text-classification-text-classification-model-textclassificationmodel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize": [[54, "tlt-models-text-classification-text-classification-model-textclassificationmodel-quantize"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.train": [[55, "tlt-models-text-classification-text-classification-model-textclassificationmodel-train"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.write_inc_config_file": [[56, "tlt-models-text-classification-text-classification-model-textclassificationmodel-write-inc-config-file"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[57, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize": [[58, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train": [[59, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-train"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.write_inc_config_file": [[60, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-write-inc-config-file"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[61, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize": [[62, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train": [[63, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-train"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.write_inc_config_file": [[64, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-write-inc-config-file"]], "tlt.models.tf_model.TFModel": [[65, "tlt-models-tf-model-tfmodel"]], "API Reference": [[66, "api-reference"]], "Factory Methods": [[66, "module-tlt.datasets.dataset_factory"], [66, "id1"]], "Class Reference": [[66, "class-reference"], [66, "id2"]], "Base Classes": [[66, "base-classes"], [66, "id5"]], "Models": [[66, "models"]], "CLI Reference": [[67, "cli-reference"]], "tlt": [[67, "tlt"]], "benchmark": [[67, "tlt-benchmark"]], "eval": [[67, "tlt-eval"]], "list": [[67, "tlt-list"]], "frameworks": [[67, "tlt-list-frameworks"]], "models": [[67, "tlt-list-models"]], "use_cases": [[67, "tlt-list-use-cases"]], "optimize": [[67, "tlt-optimize"]], "quantize": [[67, "tlt-quantize"]], "train": [[67, "tlt-train"]], "Distributed Training": [[68, "distributed-training"], [86, "distributed-training"]], "Prerequisites": [[68, "prerequisites"], [78, "prerequisites"], [86, "prerequisites"]], "Passwordless SSH setup": [[68, "passwordless-ssh-setup"], [86, "passwordless-ssh-setup"]], "Building Documentation": [[69, "building-documentation"]], "Sphinx Documentation": [[69, "sphinx-documentation"]], "Examples": [[70, "examples"], [74, "examples"]], "Beyond Get Started CLI Example": [[71, "beyond-get-started-cli-example"]], "List the available models": [[71, "list-the-available-models"]], "Train a model": [[71, "train-a-model"]], "Benchmark the trained model": [[71, "benchmark-the-trained-model"]], "Quantize the model": [[71, "quantize-the-model"]], "Benchmark the quantized model": [[71, "benchmark-the-quantized-model"]], "Perform graph optimization on the trained model": [[71, "perform-graph-optimization-on-the-trained-model"]], "Addititional CLI Examples": [[71, "addititional-cli-examples"]], "Image Classification Intel\u00ae Transfer Learning Tool CLI Example": [[72, "image-classification-intel-transfer-learning-tool-cli-example"]], "Transfer learning using your own dataset": [[72, "transfer-learning-using-your-own-dataset"]], "Transfer learning using a dataset from the TFDS catalog": [[72, "transfer-learning-using-a-dataset-from-the-tfds-catalog"]], "Citations": [[72, "citations"], [73, "citations"], [82, "Citations"], [84, "Citations"]], "Text Classification Intel\u00ae Transfer Learning Tool CLI Example": [[73, "text-classification-intel-transfer-learning-tool-cli-example"]], "Fine tuning using your own dataset": [[73, "fine-tuning-using-your-own-dataset"]], "Fine tuning using a dataset from the TFDS catalog": [[73, "fine-tuning-using-a-dataset-from-the-tfds-catalog"]], "Distributed transfer learning using a dataset from Hugging Face": [[73, "distributed-transfer-learning-using-a-dataset-from-hugging-face"]], "What is Intel\u00ae Transfer Learning Tool": [[75, "what-is-intel-transfer-learning-tool"]], "How the Intel Transfer Learning Tool Works": [[75, "how-the-intel-transfer-learning-tool-works"]], "Support": [[75, "support"]], "Image Classification Methods": [[76, "image-classification-methods"]], "Text Classification Methods": [[76, "text-classification-methods"]], "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[77, "Medical-Imaging-Classification-(Colorectal-histology)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "1. Import dependencies and setup parameters": [[77, "1.-Import-dependencies-and-setup-parameters"], [79, "1.-Import-dependencies-and-setup-parameters"], [80, "1.-Import-dependencies-and-setup-parameters"], [81, "1.-Import-dependencies-and-setup-parameters"], [82, "1.-Import-dependencies-and-setup-parameters"], [83, "1.-Import-dependencies-and-setup-parameters"], [84, "1.-Import-dependencies-and-setup-parameters"]], "2. Get the model": [[77, "2.-Get-the-model"], [79, "2.-Get-the-model"], [81, "2.-Get-the-model"], [82, "2.-Get-the-model"], [83, "2.-Get-the-model"], [84, "2.-Get-the-model"]], "Option A: Load a model": [[77, "Option-A:-Load-a-model"], [79, "Option-A:-Load-a-model"]], "Option B: Load a pretrained checkpoint": [[77, "Option-B:-Load-a-pretrained-checkpoint"], [79, "Option-B:-Load-a-pretrained-checkpoint"]], "3. Get the dataset": [[77, "3.-Get-the-dataset"], [79, "3.-Get-the-dataset"], [80, "3.-Get-the-dataset"], [81, "3.-Get-the-dataset"], [82, "3.-Get-the-dataset"], [83, "3.-Get-the-dataset"], [84, "3.-Get-the-dataset"]], "4. Prepare the dataset": [[77, "4.-Prepare-the-dataset"], [79, "4.-Prepare-the-dataset"], [80, "4.-Prepare-the-dataset"], [81, "4.-Prepare-the-dataset"], [82, "4.-Prepare-the-dataset"], [83, "4.-Prepare-the-dataset"], [84, "4.-Prepare-the-dataset"]], "5. Transfer Learning": [[77, "5.-Transfer-Learning"], [79, "5.-Transfer-Learning"]], "6. Evaluate": [[77, "6.-Evaluate"], [79, "6.-Evaluate"]], "7. Export": [[77, "7.-Export"], [79, "7.-Export"]], "8. Inference": [[77, "8.-Inference"], [79, "8.-Inference"]], "Dataset Citations": [[77, "Dataset-Citations"], [79, "Dataset-Citations"], [80, "Dataset-Citations"], [81, "Dataset-Citations"], [83, "Dataset-Citations"]], "Intel\u00ae Transfer Learning Tool API Notebook Examples": [[78, "intel-transfer-learning-tool-api-notebook-examples"]], "Intel Transfer Learning Tool API Tutorial Notebooks": [[78, "intel-transfer-learning-tool-api-tutorial-notebooks"]], "Intel Transfer Learning Tool API End-to-End Pipelines": [[78, "intel-transfer-learning-tool-api-end-to-end-pipelines"]], "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[79, "Remote-Sensing-Image-Scene-Classification-(Resisc)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool": [[80, "Image-Anomaly-Detection-with-PyTorch-using-Intel\u00ae-Transfer-Learning-Tool"]], "2. Get or load the model": [[80, "2.-Get-or-load-the-model"]], "Method 1: Category Folders": [[80, "Method-1:-Category-Folders"]], "Method 2: Train & Test Folders with Category Subfolders": [[80, "Method-2:-Train-&-Test-Folders-with-Category-Subfolders"]], "5. Visualize samples from the dataset": [[80, "5.-Visualize-samples-from-the-dataset"]], "6. Training and Evaluation": [[80, "6.-Training-and-Evaluation"]], "Train Arguments": [[80, "Train-Arguments"]], "Required": [[80, "Required"], [81, "Required"], [82, "Required"], [83, "Required"], [84, "Required"]], "Optional": [[80, "Optional"], [81, "Optional"], [82, "Optional"], [83, "Optional"], [84, "Optional"]], "Feature Extraction": [[80, "Feature-Extraction"]], "Optional: The SimSiam TwoCropTransform": [[80, "Optional:-The-SimSiam-TwoCropTransform"]], "Optional: The Cut-paste Transforms": [[80, "Optional:-The-Cut-paste-Transforms"]], "7. Predict": [[80, "7.-Predict"], [81, "7.-Predict"], [83, "7.-Predict"]], "8. Export": [[80, "8.-Export"], [81, "8.-Export"], [83, "8.-Export"]], "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API": [[81, "Transfer-Learning-for-Image-Classification-using-PyTorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option A: Use your own dataset": [[81, "Option-A:-Use-your-own-dataset"], [82, "Option-A:-Use-your-own-dataset"], [83, "Option-A:-Use-your-own-dataset"], [84, "Option-A:-Use-your-own-dataset"]], "Option B: Use a dataset from the PyTorch\u2019s Torchvision Datasets catalog": [[81, "Option-B:-Use-a-dataset-from-the-PyTorch's-Torchvision-Datasets-catalog"]], "5. Predict using the original model": [[81, "5.-Predict-using-the-original-model"], [83, "5.-Predict-using-the-original-model"]], "6. Transfer Learning": [[81, "6.-Transfer-Learning"], [83, "6.-Transfer-Learning"]], "Arguments": [[81, "Arguments"], [82, "Arguments"], [83, "Arguments"], [84, "Arguments"]], "Custom Single Image Prediction": [[81, "Custom-Single-Image-Prediction"], [83, "Custom-Single-Image-Prediction"]], "9. Post-training quantization": [[81, "9.-Post-training-quantization"], [83, "9.-Post-training-quantization"]], "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API": [[82, "Text-Classification-fine-tuning-using-Pytorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the HuggingFace catalog": [[82, "Option-B:-Use-the-HuggingFace-catalog"]], "5. Fine tuning": [[82, "5.-Fine-tuning"], [84, "5.-Fine-tuning"]], "6. Predict": [[82, "6.-Predict"], [84, "6.-Predict"]], "Predict on Text": [[82, "Predict-on-Text"]], "7. Export the saved model": [[82, "7.-Export-the-saved-model"], [84, "7.-Export-the-saved-model"]], "8. Quantization": [[82, "8.-Quantization"], [84, "8.-Quantization"]], "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[83, "Transfer-Learning-for-Image-Classification-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use a dataset from the TensorFlow Datasets catalog": [[83, "Option-B:-Use-a-dataset-from-the-TensorFlow-Datasets-catalog"]], "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[84, "Text-Classification-fine-tuning-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the TFDS catalog": [[84, "Option-B:-Use-the-TFDS-catalog"]], "Environment Setup and Running the Notebooks": [[85, "environment-setup-and-running-the-notebooks"]], "Install Intel\u00ae Transfer Learning Tool": [[85, "install-intel-transfer-learning-tool"]], "Notebook Environment": [[85, "notebook-environment"]]}, "indexentries": {"basedataset (class in tlt.datasets.dataset)": [[4, "tlt.datasets.dataset.BaseDataset"]], "__init__() (tlt.datasets.dataset.basedataset method)": [[4, "tlt.datasets.dataset.BaseDataset.__init__"]], "hfdataset (class in tlt.datasets.hf_dataset)": [[5, "tlt.datasets.hf_dataset.HFDataset"]], "__init__() (tlt.datasets.hf_dataset.hfdataset method)": [[5, "tlt.datasets.hf_dataset.HFDataset.__init__"]], "imageclassificationdataset (class in tlt.datasets.image_classification.image_classification_dataset)": [[6, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.image_classification_dataset.imageclassificationdataset method)": [[6, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.__init__"]], "pytorchcustomimageclassificationdataset (class in tlt.datasets.image_classification.pytorch_custom_image_classification_dataset)": [[7, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.pytorchcustomimageclassificationdataset method)": [[7, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.__init__"]], "tfcustomimageclassificationdataset (class in tlt.datasets.image_classification.tf_custom_image_classification_dataset)": [[8, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tf_custom_image_classification_dataset.tfcustomimageclassificationdataset method)": [[8, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.__init__"]], "tfdsimageclassificationdataset (class in tlt.datasets.image_classification.tfds_image_classification_dataset)": [[9, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tfds_image_classification_dataset.tfdsimageclassificationdataset method)": [[9, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.__init__"]], "torchvisionimageclassificationdataset (class in tlt.datasets.image_classification.torchvision_image_classification_dataset)": [[10, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.torchvision_image_classification_dataset.torchvisionimageclassificationdataset method)": [[10, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.__init__"]], "pytorchdataset (class in tlt.datasets.pytorch_dataset)": [[11, "tlt.datasets.pytorch_dataset.PyTorchDataset"]], "__init__() (tlt.datasets.pytorch_dataset.pytorchdataset method)": [[11, "tlt.datasets.pytorch_dataset.PyTorchDataset.__init__"]], "hfcustomtextclassificationdataset (class in tlt.datasets.text_classification.hf_custom_text_classification_dataset)": [[12, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_custom_text_classification_dataset.hfcustomtextclassificationdataset method)": [[12, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.__init__"]], "hftextclassificationdataset (class in tlt.datasets.text_classification.hf_text_classification_dataset)": [[13, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_text_classification_dataset.hftextclassificationdataset method)": [[13, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.__init__"]], "textclassificationdataset (class in tlt.datasets.text_classification.text_classification_dataset)": [[14, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.text_classification_dataset.textclassificationdataset method)": [[14, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.__init__"]], "tfcustomtextclassificationdataset (class in tlt.datasets.text_classification.tf_custom_text_classification_dataset)": [[15, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tf_custom_text_classification_dataset.tfcustomtextclassificationdataset method)": [[15, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.__init__"]], "tfdstextclassificationdataset (class in tlt.datasets.text_classification.tfds_text_classification_dataset)": [[16, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tfds_text_classification_dataset.tfdstextclassificationdataset method)": [[16, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.__init__"]], "tfdataset (class in tlt.datasets.tf_dataset)": [[17, "tlt.datasets.tf_dataset.TFDataset"]], "__init__() (tlt.datasets.tf_dataset.tfdataset method)": [[17, "tlt.datasets.tf_dataset.TFDataset.__init__"]], "hfmodel (class in tlt.models.hf_model)": [[18, "tlt.models.hf_model.HFModel"]], "__init__() (tlt.models.hf_model.hfmodel method)": [[18, "tlt.models.hf_model.HFModel.__init__"]], "imageclassificationmodel (class in tlt.models.image_classification.image_classification_model)": [[19, "tlt.models.image_classification.image_classification_model.ImageClassificationModel"]], "__init__() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[19, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.__init__"]], "get_inc_config() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[20, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.get_inc_config"]], "quantize() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[21, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[22, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train"]], "kerasimageclassificationmodel (class in tlt.models.image_classification.keras_image_classification_model)": [[23, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel"]], "__init__() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[23, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.__init__"]], "get_inc_config() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[24, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.get_inc_config"]], "quantize() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[25, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[26, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train"]], "pytorchhubimageclassificationmodel (class in tlt.models.image_classification.pytorch_hub_image_classification_model)": [[27, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[27, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.__init__"]], "get_inc_config() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[28, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.get_inc_config"]], "quantize() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[29, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[30, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train"]], "pytorchimageclassificationmodel (class in tlt.models.image_classification.pytorch_image_classification_model)": [[31, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[31, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.__init__"]], "get_inc_config() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[32, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.get_inc_config"]], "quantize() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[33, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[34, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train"]], "tfimageclassificationmodel (class in tlt.models.image_classification.tf_image_classification_model)": [[35, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel"]], "__init__() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[35, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.__init__"]], "get_inc_config() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[36, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.get_inc_config"]], "quantize() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[37, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[38, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train"]], "tfhubimageclassificationmodel (class in tlt.models.image_classification.tfhub_image_classification_model)": [[39, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[39, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.__init__"]], "get_inc_config() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[40, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.get_inc_config"]], "quantize() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[41, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[42, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train"]], "torchvisionimageclassificationmodel (class in tlt.models.image_classification.torchvision_image_classification_model)": [[43, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel"]], "__init__() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[43, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.__init__"]], "get_inc_config() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[44, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.get_inc_config"]], "quantize() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[45, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[46, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train"]], "basemodel (class in tlt.models.model)": [[47, "tlt.models.model.BaseModel"]], "__init__() (tlt.models.model.basemodel method)": [[47, "tlt.models.model.BaseModel.__init__"]], "pytorchmodel (class in tlt.models.pytorch_model)": [[48, "tlt.models.pytorch_model.PyTorchModel"]], "__init__() (tlt.models.pytorch_model.pytorchmodel method)": [[48, "tlt.models.pytorch_model.PyTorchModel.__init__"]], "pytorchhftextclassificationmodel (class in tlt.models.text_classification.pytorch_hf_text_classification_model)": [[49, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[49, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.__init__"]], "quantize() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[50, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[51, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train"]], "write_inc_config_file() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[52, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.write_inc_config_file"]], "textclassificationmodel (class in tlt.models.text_classification.text_classification_model)": [[53, "tlt.models.text_classification.text_classification_model.TextClassificationModel"]], "__init__() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[53, "tlt.models.text_classification.text_classification_model.TextClassificationModel.__init__"]], "quantize() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[54, "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize"]], "train() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[55, "tlt.models.text_classification.text_classification_model.TextClassificationModel.train"]], "write_inc_config_file() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[56, "tlt.models.text_classification.text_classification_model.TextClassificationModel.write_inc_config_file"]], "tfhftextclassificationmodel (class in tlt.models.text_classification.tf_hf_text_classification_model)": [[57, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[57, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.__init__"]], "quantize() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[58, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[59, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train"]], "write_inc_config_file() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[60, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.write_inc_config_file"]], "tftextclassificationmodel (class in tlt.models.text_classification.tf_text_classification_model)": [[61, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[61, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.__init__"]], "quantize() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[62, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[63, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train"]], "write_inc_config_file() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[64, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.write_inc_config_file"]], "tfmodel (class in tlt.models.tf_model)": [[65, "tlt.models.tf_model.TFModel"]], "__init__() (tlt.models.tf_model.tfmodel method)": [[65, "tlt.models.tf_model.TFModel.__init__"]], "get_dataset() (in module tlt.datasets.dataset_factory)": [[66, "tlt.datasets.dataset_factory.get_dataset"]], "get_model() (in module tlt.models.model_factory)": [[66, "tlt.models.model_factory.get_model"]], "get_supported_models() (in module tlt.models.model_factory)": [[66, "tlt.models.model_factory.get_supported_models"]], "load_dataset() (in module tlt.datasets.dataset_factory)": [[66, "tlt.datasets.dataset_factory.load_dataset"]], "load_model() (in module tlt.models.model_factory)": [[66, "tlt.models.model_factory.load_model"]], "module": [[66, "module-tlt.datasets.dataset_factory"], [66, "module-tlt.models.model_factory"]], "print_supported_models() (in module tlt.models.model_factory)": [[66, "tlt.models.model_factory.print_supported_models"]], "tlt.datasets.dataset_factory": [[66, "module-tlt.datasets.dataset_factory"]], "tlt.models.model_factory": [[66, "module-tlt.models.model_factory"]], "--accuracy-criterion": [[67, "cmdoption-tlt-quantize-accuracy-criterion"]], "--accuracy_criterion": [[67, "cmdoption-tlt-quantize-accuracy-criterion"]], "--add-aug": [[67, "cmdoption-tlt-train-add-aug"]], "--add_aug": [[67, "cmdoption-tlt-train-add-aug"]], "--batch-size": [[67, "cmdoption-tlt-benchmark-batch-size"], [67, "cmdoption-tlt-quantize-batch-size"]], "--batch_size": [[67, "cmdoption-tlt-benchmark-batch-size"], [67, "cmdoption-tlt-quantize-batch-size"]], "--class-names": [[67, "cmdoption-tlt-eval-class-names"], [67, "cmdoption-tlt-train-class-names"]], "--class_names": [[67, "cmdoption-tlt-eval-class-names"], [67, "cmdoption-tlt-train-class-names"]], "--dataset-catalog": [[67, "cmdoption-tlt-eval-dataset-catalog"], [67, "cmdoption-tlt-train-dataset-catalog"]], "--dataset-dir": [[67, "cmdoption-tlt-benchmark-dataset-dir"], [67, "cmdoption-tlt-eval-dataset-dir"], [67, "cmdoption-tlt-quantize-dataset-dir"], [67, "cmdoption-tlt-train-dataset-dir"]], "--dataset-file": [[67, "cmdoption-tlt-eval-dataset-file"], [67, "cmdoption-tlt-train-dataset-file"]], "--dataset-name": [[67, "cmdoption-tlt-eval-dataset-name"], [67, "cmdoption-tlt-train-dataset-name"]], "--dataset_catalog": [[67, "cmdoption-tlt-eval-dataset-catalog"], [67, "cmdoption-tlt-train-dataset-catalog"]], "--dataset_dir": [[67, "cmdoption-tlt-benchmark-dataset-dir"], [67, "cmdoption-tlt-eval-dataset-dir"], [67, "cmdoption-tlt-quantize-dataset-dir"], [67, "cmdoption-tlt-train-dataset-dir"]], "--dataset_file": [[67, "cmdoption-tlt-eval-dataset-file"], [67, "cmdoption-tlt-train-dataset-file"]], "--dataset_name": [[67, "cmdoption-tlt-eval-dataset-name"], [67, "cmdoption-tlt-train-dataset-name"]], "--delimiter": [[67, "cmdoption-tlt-eval-delimiter"], [67, "cmdoption-tlt-train-delimiter"]], "--distributed": [[67, "cmdoption-tlt-train-d"]], "--early-stopping": [[67, "cmdoption-tlt-train-early-stopping"]], "--early_stopping": [[67, "cmdoption-tlt-train-early-stopping"]], "--epochs": [[67, "cmdoption-tlt-train-epochs"]], "--framework": [[67, "cmdoption-tlt-list-models-f"], [67, "cmdoption-tlt-train-f"]], "--hostfile": [[67, "cmdoption-tlt-train-hostfile"]], "--inc-config": [[67, "cmdoption-tlt-benchmark-inc-config"], [67, "cmdoption-tlt-quantize-inc-config"]], "--inc_config": [[67, "cmdoption-tlt-benchmark-inc-config"], [67, "cmdoption-tlt-quantize-inc-config"]], "--init-checkpoints": [[67, "cmdoption-tlt-train-init-checkpoints"]], "--init_checkpoints": [[67, "cmdoption-tlt-train-init-checkpoints"]], "--ipex-optimize": [[67, "cmdoption-tlt-train-ipex_optimize"]], "--ipex_optimize": [[67, "cmdoption-tlt-train-ipex_optimize"]], "--lr-decay": [[67, "cmdoption-tlt-train-lr-decay"]], "--lr_decay": [[67, "cmdoption-tlt-train-lr-decay"]], "--max-trials": [[67, "cmdoption-tlt-quantize-max-trials"]], "--max_trials": [[67, "cmdoption-tlt-quantize-max-trials"]], "--mode": [[67, "cmdoption-tlt-benchmark-mode"]], "--model-dir": [[67, "cmdoption-tlt-benchmark-model-dir"], [67, "cmdoption-tlt-eval-model-dir"], [67, "cmdoption-tlt-optimize-model-dir"], [67, "cmdoption-tlt-quantize-model-dir"]], "--model-name": [[67, "cmdoption-tlt-eval-model-name"], [67, "cmdoption-tlt-train-model-name"]], "--model_dir": [[67, "cmdoption-tlt-benchmark-model-dir"], [67, "cmdoption-tlt-eval-model-dir"], [67, "cmdoption-tlt-optimize-model-dir"], [67, "cmdoption-tlt-quantize-model-dir"]], "--model_name": [[67, "cmdoption-tlt-eval-model-name"], [67, "cmdoption-tlt-train-model-name"]], "--nnodes": [[67, "cmdoption-tlt-train-nnodes"]], "--nproc-per-node": [[67, "cmdoption-tlt-train-nproc_per_node"]], "--nproc_per_node": [[67, "cmdoption-tlt-train-nproc_per_node"]], "--output-dir": [[67, "cmdoption-tlt-benchmark-output-dir"], [67, "cmdoption-tlt-optimize-output-dir"], [67, "cmdoption-tlt-quantize-output-dir"], [67, "cmdoption-tlt-train-output-dir"]], "--output_dir": [[67, "cmdoption-tlt-benchmark-output-dir"], [67, "cmdoption-tlt-optimize-output-dir"], [67, "cmdoption-tlt-quantize-output-dir"], [67, "cmdoption-tlt-train-output-dir"]], "--timeout": [[67, "cmdoption-tlt-quantize-timeout"]], "--use-case": [[67, "cmdoption-tlt-list-models-use-case"]], "--use-horovod": [[67, "cmdoption-tlt-train-use-horovod"]], "--use_case": [[67, "cmdoption-tlt-list-models-use-case"]], "--use_horovod": [[67, "cmdoption-tlt-train-use-horovod"]], "--verbose": [[67, "cmdoption-tlt-list-models-verbose"]], "-d": [[67, "cmdoption-tlt-train-d"]], "-f": [[67, "cmdoption-tlt-list-models-f"], [67, "cmdoption-tlt-train-f"]], "tlt-benchmark command line option": [[67, "cmdoption-tlt-benchmark-batch-size"], [67, "cmdoption-tlt-benchmark-dataset-dir"], [67, "cmdoption-tlt-benchmark-inc-config"], [67, "cmdoption-tlt-benchmark-mode"], [67, "cmdoption-tlt-benchmark-model-dir"], [67, "cmdoption-tlt-benchmark-output-dir"]], "tlt-eval command line option": [[67, "cmdoption-tlt-eval-class-names"], [67, "cmdoption-tlt-eval-dataset-catalog"], [67, "cmdoption-tlt-eval-dataset-dir"], [67, "cmdoption-tlt-eval-dataset-file"], [67, "cmdoption-tlt-eval-dataset-name"], [67, "cmdoption-tlt-eval-delimiter"], [67, "cmdoption-tlt-eval-model-dir"], [67, "cmdoption-tlt-eval-model-name"]], "tlt-list-models command line option": [[67, "cmdoption-tlt-list-models-f"], [67, "cmdoption-tlt-list-models-use-case"], [67, "cmdoption-tlt-list-models-verbose"]], "tlt-optimize command line option": [[67, "cmdoption-tlt-optimize-model-dir"], [67, "cmdoption-tlt-optimize-output-dir"]], "tlt-quantize command line option": [[67, "cmdoption-tlt-quantize-accuracy-criterion"], [67, "cmdoption-tlt-quantize-batch-size"], [67, "cmdoption-tlt-quantize-dataset-dir"], [67, "cmdoption-tlt-quantize-inc-config"], [67, "cmdoption-tlt-quantize-max-trials"], [67, "cmdoption-tlt-quantize-model-dir"], [67, "cmdoption-tlt-quantize-output-dir"], [67, "cmdoption-tlt-quantize-timeout"]], "tlt-train command line option": [[67, "cmdoption-tlt-train-add-aug"], [67, "cmdoption-tlt-train-class-names"], [67, "cmdoption-tlt-train-d"], [67, "cmdoption-tlt-train-dataset-catalog"], [67, "cmdoption-tlt-train-dataset-dir"], [67, "cmdoption-tlt-train-dataset-file"], [67, "cmdoption-tlt-train-dataset-name"], [67, "cmdoption-tlt-train-delimiter"], [67, "cmdoption-tlt-train-early-stopping"], [67, "cmdoption-tlt-train-epochs"], [67, "cmdoption-tlt-train-f"], [67, "cmdoption-tlt-train-hostfile"], [67, "cmdoption-tlt-train-init-checkpoints"], [67, "cmdoption-tlt-train-ipex_optimize"], [67, "cmdoption-tlt-train-lr-decay"], [67, "cmdoption-tlt-train-model-name"], [67, "cmdoption-tlt-train-nnodes"], [67, "cmdoption-tlt-train-nproc_per_node"], [67, "cmdoption-tlt-train-output-dir"], [67, "cmdoption-tlt-train-use-horovod"]]}})